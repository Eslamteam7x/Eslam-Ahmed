
app_wash_machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000661a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  0000661a  000066ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008001da  008001da  00006828  2**0
                  ALLOC
  3 .stab         000051cc  00000000  00000000  00006828  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003158  00000000  00000000  0000b9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  0000ecec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f63  00000000  00000000  0000eedb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000147c  00000000  00000000  00011e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001406  00000000  00000000  000132ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000146c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000352  00000000  00000000  00014880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021b4  00000000  00000000  00014bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00016d86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__vector_1>
       8:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__vector_2>
       c:	0c 94 32 1f 	jmp	0x3e64	; 0x3e64 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 8e 24 	jmp	0x491c	; 0x491c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f6 e6       	ldi	r31, 0x66	; 102
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 31 	call	0x6386	; 0x6386 <main>
      8a:	0c 94 0b 33 	jmp	0x6616	; 0x6616 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__subsf3>
      be:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__udivdi3>:
      ea:	ae e5       	ldi	r26, 0x5E	; 94
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__>
      f6:	a8 e0       	ldi	r26, 0x08	; 8
      f8:	4e 01       	movw	r8, r28
      fa:	08 94       	sec
      fc:	81 1c       	adc	r8, r1
      fe:	91 1c       	adc	r9, r1
     100:	f4 01       	movw	r30, r8
     102:	6a 2e       	mov	r6, r26
     104:	11 92       	st	Z+, r1
     106:	6a 94       	dec	r6
     108:	e9 f7       	brne	.-6      	; 0x104 <__udivdi3+0x1a>
     10a:	29 83       	std	Y+1, r18	; 0x01
     10c:	3a 83       	std	Y+2, r19	; 0x02
     10e:	4b 83       	std	Y+3, r20	; 0x03
     110:	5c 83       	std	Y+4, r21	; 0x04
     112:	6d 83       	std	Y+5, r22	; 0x05
     114:	7e 83       	std	Y+6, r23	; 0x06
     116:	8f 83       	std	Y+7, r24	; 0x07
     118:	98 87       	std	Y+8, r25	; 0x08
     11a:	ce 01       	movw	r24, r28
     11c:	09 96       	adiw	r24, 0x09	; 9
     11e:	fc 01       	movw	r30, r24
     120:	11 92       	st	Z+, r1
     122:	aa 95       	dec	r26
     124:	e9 f7       	brne	.-6      	; 0x120 <__udivdi3+0x36>
     126:	a9 86       	std	Y+9, r10	; 0x09
     128:	ba 86       	std	Y+10, r11	; 0x0a
     12a:	cb 86       	std	Y+11, r12	; 0x0b
     12c:	dc 86       	std	Y+12, r13	; 0x0c
     12e:	ed 86       	std	Y+13, r14	; 0x0d
     130:	fe 86       	std	Y+14, r15	; 0x0e
     132:	0f 87       	std	Y+15, r16	; 0x0f
     134:	18 8b       	std	Y+16, r17	; 0x10
     136:	29 84       	ldd	r2, Y+9	; 0x09
     138:	3a 84       	ldd	r3, Y+10	; 0x0a
     13a:	4b 84       	ldd	r4, Y+11	; 0x0b
     13c:	5c 84       	ldd	r5, Y+12	; 0x0c
     13e:	ed 84       	ldd	r14, Y+13	; 0x0d
     140:	fe 84       	ldd	r15, Y+14	; 0x0e
     142:	0f 85       	ldd	r16, Y+15	; 0x0f
     144:	18 89       	ldd	r17, Y+16	; 0x10
     146:	69 80       	ldd	r6, Y+1	; 0x01
     148:	7a 80       	ldd	r7, Y+2	; 0x02
     14a:	8b 80       	ldd	r8, Y+3	; 0x03
     14c:	9c 80       	ldd	r9, Y+4	; 0x04
     14e:	6d a6       	std	Y+45, r6	; 0x2d
     150:	7e a6       	std	Y+46, r7	; 0x2e
     152:	8f a6       	std	Y+47, r8	; 0x2f
     154:	98 aa       	std	Y+48, r9	; 0x30
     156:	6d 80       	ldd	r6, Y+5	; 0x05
     158:	7e 80       	ldd	r7, Y+6	; 0x06
     15a:	8f 80       	ldd	r8, Y+7	; 0x07
     15c:	98 84       	ldd	r9, Y+8	; 0x08
     15e:	e1 14       	cp	r14, r1
     160:	f1 04       	cpc	r15, r1
     162:	01 05       	cpc	r16, r1
     164:	11 05       	cpc	r17, r1
     166:	09 f0       	breq	.+2      	; 0x16a <__udivdi3+0x80>
     168:	b3 c3       	rjmp	.+1894   	; 0x8d0 <__stack+0x71>
     16a:	62 14       	cp	r6, r2
     16c:	73 04       	cpc	r7, r3
     16e:	84 04       	cpc	r8, r4
     170:	95 04       	cpc	r9, r5
     172:	08 f0       	brcs	.+2      	; 0x176 <__udivdi3+0x8c>
     174:	3d c1       	rjmp	.+634    	; 0x3f0 <__udivdi3+0x306>
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	20 16       	cp	r2, r16
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	30 06       	cpc	r3, r16
     17e:	01 e0       	ldi	r16, 0x01	; 1
     180:	40 06       	cpc	r4, r16
     182:	00 e0       	ldi	r16, 0x00	; 0
     184:	50 06       	cpc	r5, r16
     186:	88 f4       	brcc	.+34     	; 0x1aa <__udivdi3+0xc0>
     188:	1f ef       	ldi	r17, 0xFF	; 255
     18a:	21 16       	cp	r2, r17
     18c:	31 04       	cpc	r3, r1
     18e:	41 04       	cpc	r4, r1
     190:	51 04       	cpc	r5, r1
     192:	39 f0       	breq	.+14     	; 0x1a2 <__udivdi3+0xb8>
     194:	30 f0       	brcs	.+12     	; 0x1a2 <__udivdi3+0xb8>
     196:	48 e0       	ldi	r20, 0x08	; 8
     198:	e4 2e       	mov	r14, r20
     19a:	f1 2c       	mov	r15, r1
     19c:	01 2d       	mov	r16, r1
     19e:	11 2d       	mov	r17, r1
     1a0:	18 c0       	rjmp	.+48     	; 0x1d2 <__udivdi3+0xe8>
     1a2:	ee 24       	eor	r14, r14
     1a4:	ff 24       	eor	r15, r15
     1a6:	87 01       	movw	r16, r14
     1a8:	14 c0       	rjmp	.+40     	; 0x1d2 <__udivdi3+0xe8>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	22 16       	cp	r2, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	32 06       	cpc	r3, r18
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	42 06       	cpc	r4, r18
     1b6:	21 e0       	ldi	r18, 0x01	; 1
     1b8:	52 06       	cpc	r5, r18
     1ba:	30 f0       	brcs	.+12     	; 0x1c8 <__udivdi3+0xde>
     1bc:	38 e1       	ldi	r19, 0x18	; 24
     1be:	e3 2e       	mov	r14, r19
     1c0:	f1 2c       	mov	r15, r1
     1c2:	01 2d       	mov	r16, r1
     1c4:	11 2d       	mov	r17, r1
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <__udivdi3+0xe8>
     1c8:	20 e1       	ldi	r18, 0x10	; 16
     1ca:	e2 2e       	mov	r14, r18
     1cc:	f1 2c       	mov	r15, r1
     1ce:	01 2d       	mov	r16, r1
     1d0:	11 2d       	mov	r17, r1
     1d2:	d2 01       	movw	r26, r4
     1d4:	c1 01       	movw	r24, r2
     1d6:	0e 2c       	mov	r0, r14
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__udivdi3+0xf8>
     1da:	b6 95       	lsr	r27
     1dc:	a7 95       	ror	r26
     1de:	97 95       	ror	r25
     1e0:	87 95       	ror	r24
     1e2:	0a 94       	dec	r0
     1e4:	d2 f7       	brpl	.-12     	; 0x1da <__udivdi3+0xf0>
     1e6:	81 59       	subi	r24, 0x91	; 145
     1e8:	9f 4f       	sbci	r25, 0xFF	; 255
     1ea:	dc 01       	movw	r26, r24
     1ec:	2c 91       	ld	r18, X
     1ee:	80 e2       	ldi	r24, 0x20	; 32
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	8e 19       	sub	r24, r14
     1f8:	9f 09       	sbc	r25, r15
     1fa:	a0 0b       	sbc	r26, r16
     1fc:	b1 0b       	sbc	r27, r17
     1fe:	7c 01       	movw	r14, r24
     200:	8d 01       	movw	r16, r26
     202:	e2 1a       	sub	r14, r18
     204:	f1 08       	sbc	r15, r1
     206:	01 09       	sbc	r16, r1
     208:	11 09       	sbc	r17, r1
     20a:	e1 14       	cp	r14, r1
     20c:	f1 04       	cpc	r15, r1
     20e:	01 05       	cpc	r16, r1
     210:	11 05       	cpc	r17, r1
     212:	a1 f1       	breq	.+104    	; 0x27c <__udivdi3+0x192>
     214:	0e 2c       	mov	r0, r14
     216:	04 c0       	rjmp	.+8      	; 0x220 <__udivdi3+0x136>
     218:	22 0c       	add	r2, r2
     21a:	33 1c       	adc	r3, r3
     21c:	44 1c       	adc	r4, r4
     21e:	55 1c       	adc	r5, r5
     220:	0a 94       	dec	r0
     222:	d2 f7       	brpl	.-12     	; 0x218 <__udivdi3+0x12e>
     224:	a4 01       	movw	r20, r8
     226:	93 01       	movw	r18, r6
     228:	0e 2c       	mov	r0, r14
     22a:	04 c0       	rjmp	.+8      	; 0x234 <__udivdi3+0x14a>
     22c:	22 0f       	add	r18, r18
     22e:	33 1f       	adc	r19, r19
     230:	44 1f       	adc	r20, r20
     232:	55 1f       	adc	r21, r21
     234:	0a 94       	dec	r0
     236:	d2 f7       	brpl	.-12     	; 0x22c <__udivdi3+0x142>
     238:	80 e2       	ldi	r24, 0x20	; 32
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	8e 19       	sub	r24, r14
     23e:	9f 09       	sbc	r25, r15
     240:	6d a4       	ldd	r6, Y+45	; 0x2d
     242:	7e a4       	ldd	r7, Y+46	; 0x2e
     244:	8f a4       	ldd	r8, Y+47	; 0x2f
     246:	98 a8       	ldd	r9, Y+48	; 0x30
     248:	04 c0       	rjmp	.+8      	; 0x252 <__udivdi3+0x168>
     24a:	96 94       	lsr	r9
     24c:	87 94       	ror	r8
     24e:	77 94       	ror	r7
     250:	67 94       	ror	r6
     252:	8a 95       	dec	r24
     254:	d2 f7       	brpl	.-12     	; 0x24a <__udivdi3+0x160>
     256:	62 2a       	or	r6, r18
     258:	73 2a       	or	r7, r19
     25a:	84 2a       	or	r8, r20
     25c:	95 2a       	or	r9, r21
     25e:	ad a4       	ldd	r10, Y+45	; 0x2d
     260:	be a4       	ldd	r11, Y+46	; 0x2e
     262:	cf a4       	ldd	r12, Y+47	; 0x2f
     264:	d8 a8       	ldd	r13, Y+48	; 0x30
     266:	04 c0       	rjmp	.+8      	; 0x270 <__udivdi3+0x186>
     268:	aa 0c       	add	r10, r10
     26a:	bb 1c       	adc	r11, r11
     26c:	cc 1c       	adc	r12, r12
     26e:	dd 1c       	adc	r13, r13
     270:	ea 94       	dec	r14
     272:	d2 f7       	brpl	.-12     	; 0x268 <__udivdi3+0x17e>
     274:	ad a6       	std	Y+45, r10	; 0x2d
     276:	be a6       	std	Y+46, r11	; 0x2e
     278:	cf a6       	std	Y+47, r12	; 0x2f
     27a:	d8 aa       	std	Y+48, r13	; 0x30
     27c:	62 01       	movw	r12, r4
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	cd aa       	std	Y+53, r12	; 0x35
     284:	de aa       	std	Y+54, r13	; 0x36
     286:	ef aa       	std	Y+55, r14	; 0x37
     288:	f8 ae       	std	Y+56, r15	; 0x38
     28a:	92 01       	movw	r18, r4
     28c:	81 01       	movw	r16, r2
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	30 70       	andi	r19, 0x00	; 0
     292:	09 af       	std	Y+57, r16	; 0x39
     294:	1a af       	std	Y+58, r17	; 0x3a
     296:	2b af       	std	Y+59, r18	; 0x3b
     298:	3c af       	std	Y+60, r19	; 0x3c
     29a:	c4 01       	movw	r24, r8
     29c:	b3 01       	movw	r22, r6
     29e:	a7 01       	movw	r20, r14
     2a0:	96 01       	movw	r18, r12
     2a2:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     2a6:	7b 01       	movw	r14, r22
     2a8:	8c 01       	movw	r16, r24
     2aa:	c4 01       	movw	r24, r8
     2ac:	b3 01       	movw	r22, r6
     2ae:	2d a9       	ldd	r18, Y+53	; 0x35
     2b0:	3e a9       	ldd	r19, Y+54	; 0x36
     2b2:	4f a9       	ldd	r20, Y+55	; 0x37
     2b4:	58 ad       	ldd	r21, Y+56	; 0x38
     2b6:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     2ba:	c9 01       	movw	r24, r18
     2bc:	da 01       	movw	r26, r20
     2be:	3c 01       	movw	r6, r24
     2c0:	4d 01       	movw	r8, r26
     2c2:	c4 01       	movw	r24, r8
     2c4:	b3 01       	movw	r22, r6
     2c6:	29 ad       	ldd	r18, Y+57	; 0x39
     2c8:	3a ad       	ldd	r19, Y+58	; 0x3a
     2ca:	4b ad       	ldd	r20, Y+59	; 0x3b
     2cc:	5c ad       	ldd	r21, Y+60	; 0x3c
     2ce:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	87 01       	movw	r16, r14
     2d8:	ff 24       	eor	r15, r15
     2da:	ee 24       	eor	r14, r14
     2dc:	ad a4       	ldd	r10, Y+45	; 0x2d
     2de:	be a4       	ldd	r11, Y+46	; 0x2e
     2e0:	cf a4       	ldd	r12, Y+47	; 0x2f
     2e2:	d8 a8       	ldd	r13, Y+48	; 0x30
     2e4:	c6 01       	movw	r24, r12
     2e6:	aa 27       	eor	r26, r26
     2e8:	bb 27       	eor	r27, r27
     2ea:	57 01       	movw	r10, r14
     2ec:	68 01       	movw	r12, r16
     2ee:	a8 2a       	or	r10, r24
     2f0:	b9 2a       	or	r11, r25
     2f2:	ca 2a       	or	r12, r26
     2f4:	db 2a       	or	r13, r27
     2f6:	a2 16       	cp	r10, r18
     2f8:	b3 06       	cpc	r11, r19
     2fa:	c4 06       	cpc	r12, r20
     2fc:	d5 06       	cpc	r13, r21
     2fe:	e0 f4       	brcc	.+56     	; 0x338 <__udivdi3+0x24e>
     300:	08 94       	sec
     302:	61 08       	sbc	r6, r1
     304:	71 08       	sbc	r7, r1
     306:	81 08       	sbc	r8, r1
     308:	91 08       	sbc	r9, r1
     30a:	a2 0c       	add	r10, r2
     30c:	b3 1c       	adc	r11, r3
     30e:	c4 1c       	adc	r12, r4
     310:	d5 1c       	adc	r13, r5
     312:	a2 14       	cp	r10, r2
     314:	b3 04       	cpc	r11, r3
     316:	c4 04       	cpc	r12, r4
     318:	d5 04       	cpc	r13, r5
     31a:	70 f0       	brcs	.+28     	; 0x338 <__udivdi3+0x24e>
     31c:	a2 16       	cp	r10, r18
     31e:	b3 06       	cpc	r11, r19
     320:	c4 06       	cpc	r12, r20
     322:	d5 06       	cpc	r13, r21
     324:	48 f4       	brcc	.+18     	; 0x338 <__udivdi3+0x24e>
     326:	08 94       	sec
     328:	61 08       	sbc	r6, r1
     32a:	71 08       	sbc	r7, r1
     32c:	81 08       	sbc	r8, r1
     32e:	91 08       	sbc	r9, r1
     330:	a2 0c       	add	r10, r2
     332:	b3 1c       	adc	r11, r3
     334:	c4 1c       	adc	r12, r4
     336:	d5 1c       	adc	r13, r5
     338:	a2 1a       	sub	r10, r18
     33a:	b3 0a       	sbc	r11, r19
     33c:	c4 0a       	sbc	r12, r20
     33e:	d5 0a       	sbc	r13, r21
     340:	c6 01       	movw	r24, r12
     342:	b5 01       	movw	r22, r10
     344:	2d a9       	ldd	r18, Y+53	; 0x35
     346:	3e a9       	ldd	r19, Y+54	; 0x36
     348:	4f a9       	ldd	r20, Y+55	; 0x37
     34a:	58 ad       	ldd	r21, Y+56	; 0x38
     34c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	c6 01       	movw	r24, r12
     356:	b5 01       	movw	r22, r10
     358:	2d a9       	ldd	r18, Y+53	; 0x35
     35a:	3e a9       	ldd	r19, Y+54	; 0x36
     35c:	4f a9       	ldd	r20, Y+55	; 0x37
     35e:	58 ad       	ldd	r21, Y+56	; 0x38
     360:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     364:	c9 01       	movw	r24, r18
     366:	da 01       	movw	r26, r20
     368:	5c 01       	movw	r10, r24
     36a:	6d 01       	movw	r12, r26
     36c:	c6 01       	movw	r24, r12
     36e:	b5 01       	movw	r22, r10
     370:	29 ad       	ldd	r18, Y+57	; 0x39
     372:	3a ad       	ldd	r19, Y+58	; 0x3a
     374:	4b ad       	ldd	r20, Y+59	; 0x3b
     376:	5c ad       	ldd	r21, Y+60	; 0x3c
     378:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     37c:	9b 01       	movw	r18, r22
     37e:	ac 01       	movw	r20, r24
     380:	87 01       	movw	r16, r14
     382:	ff 24       	eor	r15, r15
     384:	ee 24       	eor	r14, r14
     386:	8d a5       	ldd	r24, Y+45	; 0x2d
     388:	9e a5       	ldd	r25, Y+46	; 0x2e
     38a:	af a5       	ldd	r26, Y+47	; 0x2f
     38c:	b8 a9       	ldd	r27, Y+48	; 0x30
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	e8 2a       	or	r14, r24
     394:	f9 2a       	or	r15, r25
     396:	0a 2b       	or	r16, r26
     398:	1b 2b       	or	r17, r27
     39a:	e2 16       	cp	r14, r18
     39c:	f3 06       	cpc	r15, r19
     39e:	04 07       	cpc	r16, r20
     3a0:	15 07       	cpc	r17, r21
     3a2:	c0 f4       	brcc	.+48     	; 0x3d4 <__udivdi3+0x2ea>
     3a4:	08 94       	sec
     3a6:	a1 08       	sbc	r10, r1
     3a8:	b1 08       	sbc	r11, r1
     3aa:	c1 08       	sbc	r12, r1
     3ac:	d1 08       	sbc	r13, r1
     3ae:	e2 0c       	add	r14, r2
     3b0:	f3 1c       	adc	r15, r3
     3b2:	04 1d       	adc	r16, r4
     3b4:	15 1d       	adc	r17, r5
     3b6:	e2 14       	cp	r14, r2
     3b8:	f3 04       	cpc	r15, r3
     3ba:	04 05       	cpc	r16, r4
     3bc:	15 05       	cpc	r17, r5
     3be:	50 f0       	brcs	.+20     	; 0x3d4 <__udivdi3+0x2ea>
     3c0:	e2 16       	cp	r14, r18
     3c2:	f3 06       	cpc	r15, r19
     3c4:	04 07       	cpc	r16, r20
     3c6:	15 07       	cpc	r17, r21
     3c8:	28 f4       	brcc	.+10     	; 0x3d4 <__udivdi3+0x2ea>
     3ca:	08 94       	sec
     3cc:	a1 08       	sbc	r10, r1
     3ce:	b1 08       	sbc	r11, r1
     3d0:	c1 08       	sbc	r12, r1
     3d2:	d1 08       	sbc	r13, r1
     3d4:	d3 01       	movw	r26, r6
     3d6:	99 27       	eor	r25, r25
     3d8:	88 27       	eor	r24, r24
     3da:	86 01       	movw	r16, r12
     3dc:	75 01       	movw	r14, r10
     3de:	e8 2a       	or	r14, r24
     3e0:	f9 2a       	or	r15, r25
     3e2:	0a 2b       	or	r16, r26
     3e4:	1b 2b       	or	r17, r27
     3e6:	e9 aa       	std	Y+49, r14	; 0x31
     3e8:	fa aa       	std	Y+50, r15	; 0x32
     3ea:	0b ab       	std	Y+51, r16	; 0x33
     3ec:	1c ab       	std	Y+52, r17	; 0x34
     3ee:	cf c4       	rjmp	.+2462   	; 0xd8e <__stack+0x52f>
     3f0:	21 14       	cp	r2, r1
     3f2:	31 04       	cpc	r3, r1
     3f4:	41 04       	cpc	r4, r1
     3f6:	51 04       	cpc	r5, r1
     3f8:	71 f4       	brne	.+28     	; 0x416 <__udivdi3+0x32c>
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     40e:	c9 01       	movw	r24, r18
     410:	da 01       	movw	r26, r20
     412:	1c 01       	movw	r2, r24
     414:	2d 01       	movw	r4, r26
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	20 16       	cp	r2, r16
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	30 06       	cpc	r3, r16
     41e:	01 e0       	ldi	r16, 0x01	; 1
     420:	40 06       	cpc	r4, r16
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	50 06       	cpc	r5, r16
     426:	88 f4       	brcc	.+34     	; 0x44a <__udivdi3+0x360>
     428:	1f ef       	ldi	r17, 0xFF	; 255
     42a:	21 16       	cp	r2, r17
     42c:	31 04       	cpc	r3, r1
     42e:	41 04       	cpc	r4, r1
     430:	51 04       	cpc	r5, r1
     432:	31 f0       	breq	.+12     	; 0x440 <__udivdi3+0x356>
     434:	28 f0       	brcs	.+10     	; 0x440 <__udivdi3+0x356>
     436:	48 e0       	ldi	r20, 0x08	; 8
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	17 c0       	rjmp	.+46     	; 0x46e <__udivdi3+0x384>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	12 c0       	rjmp	.+36     	; 0x46e <__udivdi3+0x384>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	22 16       	cp	r2, r18
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	32 06       	cpc	r3, r18
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	42 06       	cpc	r4, r18
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	52 06       	cpc	r5, r18
     45a:	28 f0       	brcs	.+10     	; 0x466 <__udivdi3+0x37c>
     45c:	48 e1       	ldi	r20, 0x18	; 24
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <__udivdi3+0x384>
     466:	40 e1       	ldi	r20, 0x10	; 16
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	d2 01       	movw	r26, r4
     470:	c1 01       	movw	r24, r2
     472:	04 2e       	mov	r0, r20
     474:	04 c0       	rjmp	.+8      	; 0x47e <__udivdi3+0x394>
     476:	b6 95       	lsr	r27
     478:	a7 95       	ror	r26
     47a:	97 95       	ror	r25
     47c:	87 95       	ror	r24
     47e:	0a 94       	dec	r0
     480:	d2 f7       	brpl	.-12     	; 0x476 <__udivdi3+0x38c>
     482:	81 59       	subi	r24, 0x91	; 145
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	dc 01       	movw	r26, r24
     488:	2c 91       	ld	r18, X
     48a:	e0 e2       	ldi	r30, 0x20	; 32
     48c:	ee 2e       	mov	r14, r30
     48e:	f1 2c       	mov	r15, r1
     490:	01 2d       	mov	r16, r1
     492:	11 2d       	mov	r17, r1
     494:	d8 01       	movw	r26, r16
     496:	c7 01       	movw	r24, r14
     498:	84 1b       	sub	r24, r20
     49a:	95 0b       	sbc	r25, r21
     49c:	a6 0b       	sbc	r26, r22
     49e:	b7 0b       	sbc	r27, r23
     4a0:	82 1b       	sub	r24, r18
     4a2:	91 09       	sbc	r25, r1
     4a4:	a1 09       	sbc	r26, r1
     4a6:	b1 09       	sbc	r27, r1
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__udivdi3+0x3de>
     4b0:	64 01       	movw	r12, r8
     4b2:	53 01       	movw	r10, r6
     4b4:	a2 18       	sub	r10, r2
     4b6:	b3 08       	sbc	r11, r3
     4b8:	c4 08       	sbc	r12, r4
     4ba:	d5 08       	sbc	r13, r5
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	63 2e       	mov	r6, r19
     4c0:	71 2c       	mov	r7, r1
     4c2:	81 2c       	mov	r8, r1
     4c4:	91 2c       	mov	r9, r1
     4c6:	1e c1       	rjmp	.+572    	; 0x704 <__udivdi3+0x61a>
     4c8:	6f 96       	adiw	r28, 0x1f	; 31
     4ca:	8f af       	std	Y+63, r24	; 0x3f
     4cc:	6f 97       	sbiw	r28, 0x1f	; 31
     4ce:	08 2e       	mov	r0, r24
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__udivdi3+0x3f0>
     4d2:	22 0c       	add	r2, r2
     4d4:	33 1c       	adc	r3, r3
     4d6:	44 1c       	adc	r4, r4
     4d8:	55 1c       	adc	r5, r5
     4da:	0a 94       	dec	r0
     4dc:	d2 f7       	brpl	.-12     	; 0x4d2 <__udivdi3+0x3e8>
     4de:	ee 2d       	mov	r30, r14
     4e0:	e8 1b       	sub	r30, r24
     4e2:	64 01       	movw	r12, r8
     4e4:	53 01       	movw	r10, r6
     4e6:	0e 2e       	mov	r0, r30
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__udivdi3+0x408>
     4ea:	d6 94       	lsr	r13
     4ec:	c7 94       	ror	r12
     4ee:	b7 94       	ror	r11
     4f0:	a7 94       	ror	r10
     4f2:	0a 94       	dec	r0
     4f4:	d2 f7       	brpl	.-12     	; 0x4ea <__udivdi3+0x400>
     4f6:	a4 01       	movw	r20, r8
     4f8:	93 01       	movw	r18, r6
     4fa:	6f 96       	adiw	r28, 0x1f	; 31
     4fc:	0f ac       	ldd	r0, Y+63	; 0x3f
     4fe:	6f 97       	sbiw	r28, 0x1f	; 31
     500:	04 c0       	rjmp	.+8      	; 0x50a <__udivdi3+0x420>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	44 1f       	adc	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	0a 94       	dec	r0
     50c:	d2 f7       	brpl	.-12     	; 0x502 <__udivdi3+0x418>
     50e:	6d a4       	ldd	r6, Y+45	; 0x2d
     510:	7e a4       	ldd	r7, Y+46	; 0x2e
     512:	8f a4       	ldd	r8, Y+47	; 0x2f
     514:	98 a8       	ldd	r9, Y+48	; 0x30
     516:	0e 2e       	mov	r0, r30
     518:	04 c0       	rjmp	.+8      	; 0x522 <__udivdi3+0x438>
     51a:	96 94       	lsr	r9
     51c:	87 94       	ror	r8
     51e:	77 94       	ror	r7
     520:	67 94       	ror	r6
     522:	0a 94       	dec	r0
     524:	d2 f7       	brpl	.-12     	; 0x51a <__udivdi3+0x430>
     526:	84 01       	movw	r16, r8
     528:	73 01       	movw	r14, r6
     52a:	e2 2a       	or	r14, r18
     52c:	f3 2a       	or	r15, r19
     52e:	04 2b       	or	r16, r20
     530:	15 2b       	or	r17, r21
     532:	e9 a6       	std	Y+41, r14	; 0x29
     534:	fa a6       	std	Y+42, r15	; 0x2a
     536:	0b a7       	std	Y+43, r16	; 0x2b
     538:	1c a7       	std	Y+44, r17	; 0x2c
     53a:	32 01       	movw	r6, r4
     53c:	88 24       	eor	r8, r8
     53e:	99 24       	eor	r9, r9
     540:	92 01       	movw	r18, r4
     542:	81 01       	movw	r16, r2
     544:	20 70       	andi	r18, 0x00	; 0
     546:	30 70       	andi	r19, 0x00	; 0
     548:	21 96       	adiw	r28, 0x01	; 1
     54a:	0c af       	std	Y+60, r16	; 0x3c
     54c:	1d af       	std	Y+61, r17	; 0x3d
     54e:	2e af       	std	Y+62, r18	; 0x3e
     550:	3f af       	std	Y+63, r19	; 0x3f
     552:	21 97       	sbiw	r28, 0x01	; 1
     554:	c6 01       	movw	r24, r12
     556:	b5 01       	movw	r22, r10
     558:	a4 01       	movw	r20, r8
     55a:	93 01       	movw	r18, r6
     55c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     560:	7b 01       	movw	r14, r22
     562:	8c 01       	movw	r16, r24
     564:	c6 01       	movw	r24, r12
     566:	b5 01       	movw	r22, r10
     568:	a4 01       	movw	r20, r8
     56a:	93 01       	movw	r18, r6
     56c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     570:	c9 01       	movw	r24, r18
     572:	da 01       	movw	r26, r20
     574:	25 96       	adiw	r28, 0x05	; 5
     576:	8c af       	std	Y+60, r24	; 0x3c
     578:	9d af       	std	Y+61, r25	; 0x3d
     57a:	ae af       	std	Y+62, r26	; 0x3e
     57c:	bf af       	std	Y+63, r27	; 0x3f
     57e:	25 97       	sbiw	r28, 0x05	; 5
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	21 96       	adiw	r28, 0x01	; 1
     586:	2c ad       	ldd	r18, Y+60	; 0x3c
     588:	3d ad       	ldd	r19, Y+61	; 0x3d
     58a:	4e ad       	ldd	r20, Y+62	; 0x3e
     58c:	5f ad       	ldd	r21, Y+63	; 0x3f
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
     598:	87 01       	movw	r16, r14
     59a:	ff 24       	eor	r15, r15
     59c:	ee 24       	eor	r14, r14
     59e:	a9 a4       	ldd	r10, Y+41	; 0x29
     5a0:	ba a4       	ldd	r11, Y+42	; 0x2a
     5a2:	cb a4       	ldd	r12, Y+43	; 0x2b
     5a4:	dc a4       	ldd	r13, Y+44	; 0x2c
     5a6:	c6 01       	movw	r24, r12
     5a8:	aa 27       	eor	r26, r26
     5aa:	bb 27       	eor	r27, r27
     5ac:	5c 01       	movw	r10, r24
     5ae:	6d 01       	movw	r12, r26
     5b0:	ae 28       	or	r10, r14
     5b2:	bf 28       	or	r11, r15
     5b4:	c0 2a       	or	r12, r16
     5b6:	d1 2a       	or	r13, r17
     5b8:	a2 16       	cp	r10, r18
     5ba:	b3 06       	cpc	r11, r19
     5bc:	c4 06       	cpc	r12, r20
     5be:	d5 06       	cpc	r13, r21
     5c0:	60 f5       	brcc	.+88     	; 0x61a <__udivdi3+0x530>
     5c2:	25 96       	adiw	r28, 0x05	; 5
     5c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     5c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     5c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     5cc:	25 97       	sbiw	r28, 0x05	; 5
     5ce:	61 50       	subi	r22, 0x01	; 1
     5d0:	70 40       	sbci	r23, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	25 96       	adiw	r28, 0x05	; 5
     5d8:	6c af       	std	Y+60, r22	; 0x3c
     5da:	7d af       	std	Y+61, r23	; 0x3d
     5dc:	8e af       	std	Y+62, r24	; 0x3e
     5de:	9f af       	std	Y+63, r25	; 0x3f
     5e0:	25 97       	sbiw	r28, 0x05	; 5
     5e2:	a2 0c       	add	r10, r2
     5e4:	b3 1c       	adc	r11, r3
     5e6:	c4 1c       	adc	r12, r4
     5e8:	d5 1c       	adc	r13, r5
     5ea:	a2 14       	cp	r10, r2
     5ec:	b3 04       	cpc	r11, r3
     5ee:	c4 04       	cpc	r12, r4
     5f0:	d5 04       	cpc	r13, r5
     5f2:	98 f0       	brcs	.+38     	; 0x61a <__udivdi3+0x530>
     5f4:	a2 16       	cp	r10, r18
     5f6:	b3 06       	cpc	r11, r19
     5f8:	c4 06       	cpc	r12, r20
     5fa:	d5 06       	cpc	r13, r21
     5fc:	70 f4       	brcc	.+28     	; 0x61a <__udivdi3+0x530>
     5fe:	61 50       	subi	r22, 0x01	; 1
     600:	70 40       	sbci	r23, 0x00	; 0
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	25 96       	adiw	r28, 0x05	; 5
     608:	6c af       	std	Y+60, r22	; 0x3c
     60a:	7d af       	std	Y+61, r23	; 0x3d
     60c:	8e af       	std	Y+62, r24	; 0x3e
     60e:	9f af       	std	Y+63, r25	; 0x3f
     610:	25 97       	sbiw	r28, 0x05	; 5
     612:	a2 0c       	add	r10, r2
     614:	b3 1c       	adc	r11, r3
     616:	c4 1c       	adc	r12, r4
     618:	d5 1c       	adc	r13, r5
     61a:	a2 1a       	sub	r10, r18
     61c:	b3 0a       	sbc	r11, r19
     61e:	c4 0a       	sbc	r12, r20
     620:	d5 0a       	sbc	r13, r21
     622:	c6 01       	movw	r24, r12
     624:	b5 01       	movw	r22, r10
     626:	a4 01       	movw	r20, r8
     628:	93 01       	movw	r18, r6
     62a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     62e:	7b 01       	movw	r14, r22
     630:	8c 01       	movw	r16, r24
     632:	c6 01       	movw	r24, r12
     634:	b5 01       	movw	r22, r10
     636:	a4 01       	movw	r20, r8
     638:	93 01       	movw	r18, r6
     63a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     63e:	c9 01       	movw	r24, r18
     640:	da 01       	movw	r26, r20
     642:	3c 01       	movw	r6, r24
     644:	4d 01       	movw	r8, r26
     646:	c4 01       	movw	r24, r8
     648:	b3 01       	movw	r22, r6
     64a:	21 96       	adiw	r28, 0x01	; 1
     64c:	2c ad       	ldd	r18, Y+60	; 0x3c
     64e:	3d ad       	ldd	r19, Y+61	; 0x3d
     650:	4e ad       	ldd	r20, Y+62	; 0x3e
     652:	5f ad       	ldd	r21, Y+63	; 0x3f
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	87 01       	movw	r16, r14
     660:	ff 24       	eor	r15, r15
     662:	ee 24       	eor	r14, r14
     664:	89 a5       	ldd	r24, Y+41	; 0x29
     666:	9a a5       	ldd	r25, Y+42	; 0x2a
     668:	ab a5       	ldd	r26, Y+43	; 0x2b
     66a:	bc a5       	ldd	r27, Y+44	; 0x2c
     66c:	a0 70       	andi	r26, 0x00	; 0
     66e:	b0 70       	andi	r27, 0x00	; 0
     670:	57 01       	movw	r10, r14
     672:	68 01       	movw	r12, r16
     674:	a8 2a       	or	r10, r24
     676:	b9 2a       	or	r11, r25
     678:	ca 2a       	or	r12, r26
     67a:	db 2a       	or	r13, r27
     67c:	a2 16       	cp	r10, r18
     67e:	b3 06       	cpc	r11, r19
     680:	c4 06       	cpc	r12, r20
     682:	d5 06       	cpc	r13, r21
     684:	e0 f4       	brcc	.+56     	; 0x6be <__udivdi3+0x5d4>
     686:	08 94       	sec
     688:	61 08       	sbc	r6, r1
     68a:	71 08       	sbc	r7, r1
     68c:	81 08       	sbc	r8, r1
     68e:	91 08       	sbc	r9, r1
     690:	a2 0c       	add	r10, r2
     692:	b3 1c       	adc	r11, r3
     694:	c4 1c       	adc	r12, r4
     696:	d5 1c       	adc	r13, r5
     698:	a2 14       	cp	r10, r2
     69a:	b3 04       	cpc	r11, r3
     69c:	c4 04       	cpc	r12, r4
     69e:	d5 04       	cpc	r13, r5
     6a0:	70 f0       	brcs	.+28     	; 0x6be <__udivdi3+0x5d4>
     6a2:	a2 16       	cp	r10, r18
     6a4:	b3 06       	cpc	r11, r19
     6a6:	c4 06       	cpc	r12, r20
     6a8:	d5 06       	cpc	r13, r21
     6aa:	48 f4       	brcc	.+18     	; 0x6be <__udivdi3+0x5d4>
     6ac:	08 94       	sec
     6ae:	61 08       	sbc	r6, r1
     6b0:	71 08       	sbc	r7, r1
     6b2:	81 08       	sbc	r8, r1
     6b4:	91 08       	sbc	r9, r1
     6b6:	a2 0c       	add	r10, r2
     6b8:	b3 1c       	adc	r11, r3
     6ba:	c4 1c       	adc	r12, r4
     6bc:	d5 1c       	adc	r13, r5
     6be:	8d a5       	ldd	r24, Y+45	; 0x2d
     6c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     6c2:	af a5       	ldd	r26, Y+47	; 0x2f
     6c4:	b8 a9       	ldd	r27, Y+48	; 0x30
     6c6:	6f 96       	adiw	r28, 0x1f	; 31
     6c8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6ca:	6f 97       	sbiw	r28, 0x1f	; 31
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x5ec>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	aa 1f       	adc	r26, r26
     6d4:	bb 1f       	adc	r27, r27
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x5e4>
     6da:	8d a7       	std	Y+45, r24	; 0x2d
     6dc:	9e a7       	std	Y+46, r25	; 0x2e
     6de:	af a7       	std	Y+47, r26	; 0x2f
     6e0:	b8 ab       	std	Y+48, r27	; 0x30
     6e2:	a2 1a       	sub	r10, r18
     6e4:	b3 0a       	sbc	r11, r19
     6e6:	c4 0a       	sbc	r12, r20
     6e8:	d5 0a       	sbc	r13, r21
     6ea:	25 96       	adiw	r28, 0x05	; 5
     6ec:	ec ac       	ldd	r14, Y+60	; 0x3c
     6ee:	fd ac       	ldd	r15, Y+61	; 0x3d
     6f0:	0e ad       	ldd	r16, Y+62	; 0x3e
     6f2:	1f ad       	ldd	r17, Y+63	; 0x3f
     6f4:	25 97       	sbiw	r28, 0x05	; 5
     6f6:	d7 01       	movw	r26, r14
     6f8:	99 27       	eor	r25, r25
     6fa:	88 27       	eor	r24, r24
     6fc:	68 2a       	or	r6, r24
     6fe:	79 2a       	or	r7, r25
     700:	8a 2a       	or	r8, r26
     702:	9b 2a       	or	r9, r27
     704:	82 01       	movw	r16, r4
     706:	22 27       	eor	r18, r18
     708:	33 27       	eor	r19, r19
     70a:	29 96       	adiw	r28, 0x09	; 9
     70c:	0c af       	std	Y+60, r16	; 0x3c
     70e:	1d af       	std	Y+61, r17	; 0x3d
     710:	2e af       	std	Y+62, r18	; 0x3e
     712:	3f af       	std	Y+63, r19	; 0x3f
     714:	29 97       	sbiw	r28, 0x09	; 9
     716:	a2 01       	movw	r20, r4
     718:	91 01       	movw	r18, r2
     71a:	40 70       	andi	r20, 0x00	; 0
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	2d 96       	adiw	r28, 0x0d	; 13
     720:	2c af       	std	Y+60, r18	; 0x3c
     722:	3d af       	std	Y+61, r19	; 0x3d
     724:	4e af       	std	Y+62, r20	; 0x3e
     726:	5f af       	std	Y+63, r21	; 0x3f
     728:	2d 97       	sbiw	r28, 0x0d	; 13
     72a:	c6 01       	movw	r24, r12
     72c:	b5 01       	movw	r22, r10
     72e:	29 96       	adiw	r28, 0x09	; 9
     730:	2c ad       	ldd	r18, Y+60	; 0x3c
     732:	3d ad       	ldd	r19, Y+61	; 0x3d
     734:	4e ad       	ldd	r20, Y+62	; 0x3e
     736:	5f ad       	ldd	r21, Y+63	; 0x3f
     738:	29 97       	sbiw	r28, 0x09	; 9
     73a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     73e:	7b 01       	movw	r14, r22
     740:	8c 01       	movw	r16, r24
     742:	c6 01       	movw	r24, r12
     744:	b5 01       	movw	r22, r10
     746:	29 96       	adiw	r28, 0x09	; 9
     748:	2c ad       	ldd	r18, Y+60	; 0x3c
     74a:	3d ad       	ldd	r19, Y+61	; 0x3d
     74c:	4e ad       	ldd	r20, Y+62	; 0x3e
     74e:	5f ad       	ldd	r21, Y+63	; 0x3f
     750:	29 97       	sbiw	r28, 0x09	; 9
     752:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	61 96       	adiw	r28, 0x11	; 17
     75c:	8c af       	std	Y+60, r24	; 0x3c
     75e:	9d af       	std	Y+61, r25	; 0x3d
     760:	ae af       	std	Y+62, r26	; 0x3e
     762:	bf af       	std	Y+63, r27	; 0x3f
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	bc 01       	movw	r22, r24
     768:	cd 01       	movw	r24, r26
     76a:	2d 96       	adiw	r28, 0x0d	; 13
     76c:	2c ad       	ldd	r18, Y+60	; 0x3c
     76e:	3d ad       	ldd	r19, Y+61	; 0x3d
     770:	4e ad       	ldd	r20, Y+62	; 0x3e
     772:	5f ad       	ldd	r21, Y+63	; 0x3f
     774:	2d 97       	sbiw	r28, 0x0d	; 13
     776:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	87 01       	movw	r16, r14
     780:	ff 24       	eor	r15, r15
     782:	ee 24       	eor	r14, r14
     784:	ad a4       	ldd	r10, Y+45	; 0x2d
     786:	be a4       	ldd	r11, Y+46	; 0x2e
     788:	cf a4       	ldd	r12, Y+47	; 0x2f
     78a:	d8 a8       	ldd	r13, Y+48	; 0x30
     78c:	c6 01       	movw	r24, r12
     78e:	aa 27       	eor	r26, r26
     790:	bb 27       	eor	r27, r27
     792:	57 01       	movw	r10, r14
     794:	68 01       	movw	r12, r16
     796:	a8 2a       	or	r10, r24
     798:	b9 2a       	or	r11, r25
     79a:	ca 2a       	or	r12, r26
     79c:	db 2a       	or	r13, r27
     79e:	a2 16       	cp	r10, r18
     7a0:	b3 06       	cpc	r11, r19
     7a2:	c4 06       	cpc	r12, r20
     7a4:	d5 06       	cpc	r13, r21
     7a6:	60 f5       	brcc	.+88     	; 0x800 <__udivdi3+0x716>
     7a8:	61 96       	adiw	r28, 0x11	; 17
     7aa:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ac:	7d ad       	ldd	r23, Y+61	; 0x3d
     7ae:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b2:	61 97       	sbiw	r28, 0x11	; 17
     7b4:	61 50       	subi	r22, 0x01	; 1
     7b6:	70 40       	sbci	r23, 0x00	; 0
     7b8:	80 40       	sbci	r24, 0x00	; 0
     7ba:	90 40       	sbci	r25, 0x00	; 0
     7bc:	61 96       	adiw	r28, 0x11	; 17
     7be:	6c af       	std	Y+60, r22	; 0x3c
     7c0:	7d af       	std	Y+61, r23	; 0x3d
     7c2:	8e af       	std	Y+62, r24	; 0x3e
     7c4:	9f af       	std	Y+63, r25	; 0x3f
     7c6:	61 97       	sbiw	r28, 0x11	; 17
     7c8:	a2 0c       	add	r10, r2
     7ca:	b3 1c       	adc	r11, r3
     7cc:	c4 1c       	adc	r12, r4
     7ce:	d5 1c       	adc	r13, r5
     7d0:	a2 14       	cp	r10, r2
     7d2:	b3 04       	cpc	r11, r3
     7d4:	c4 04       	cpc	r12, r4
     7d6:	d5 04       	cpc	r13, r5
     7d8:	98 f0       	brcs	.+38     	; 0x800 <__udivdi3+0x716>
     7da:	a2 16       	cp	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	c4 06       	cpc	r12, r20
     7e0:	d5 06       	cpc	r13, r21
     7e2:	70 f4       	brcc	.+28     	; 0x800 <__udivdi3+0x716>
     7e4:	61 50       	subi	r22, 0x01	; 1
     7e6:	70 40       	sbci	r23, 0x00	; 0
     7e8:	80 40       	sbci	r24, 0x00	; 0
     7ea:	90 40       	sbci	r25, 0x00	; 0
     7ec:	61 96       	adiw	r28, 0x11	; 17
     7ee:	6c af       	std	Y+60, r22	; 0x3c
     7f0:	7d af       	std	Y+61, r23	; 0x3d
     7f2:	8e af       	std	Y+62, r24	; 0x3e
     7f4:	9f af       	std	Y+63, r25	; 0x3f
     7f6:	61 97       	sbiw	r28, 0x11	; 17
     7f8:	a2 0c       	add	r10, r2
     7fa:	b3 1c       	adc	r11, r3
     7fc:	c4 1c       	adc	r12, r4
     7fe:	d5 1c       	adc	r13, r5
     800:	a2 1a       	sub	r10, r18
     802:	b3 0a       	sbc	r11, r19
     804:	c4 0a       	sbc	r12, r20
     806:	d5 0a       	sbc	r13, r21
     808:	c6 01       	movw	r24, r12
     80a:	b5 01       	movw	r22, r10
     80c:	29 96       	adiw	r28, 0x09	; 9
     80e:	2c ad       	ldd	r18, Y+60	; 0x3c
     810:	3d ad       	ldd	r19, Y+61	; 0x3d
     812:	4e ad       	ldd	r20, Y+62	; 0x3e
     814:	5f ad       	ldd	r21, Y+63	; 0x3f
     816:	29 97       	sbiw	r28, 0x09	; 9
     818:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     81c:	7b 01       	movw	r14, r22
     81e:	8c 01       	movw	r16, r24
     820:	c6 01       	movw	r24, r12
     822:	b5 01       	movw	r22, r10
     824:	29 96       	adiw	r28, 0x09	; 9
     826:	2c ad       	ldd	r18, Y+60	; 0x3c
     828:	3d ad       	ldd	r19, Y+61	; 0x3d
     82a:	4e ad       	ldd	r20, Y+62	; 0x3e
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	29 97       	sbiw	r28, 0x09	; 9
     830:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	5c 01       	movw	r10, r24
     83a:	6d 01       	movw	r12, r26
     83c:	c6 01       	movw	r24, r12
     83e:	b5 01       	movw	r22, r10
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	8d a5       	ldd	r24, Y+45	; 0x2d
     85c:	9e a5       	ldd	r25, Y+46	; 0x2e
     85e:	af a5       	ldd	r26, Y+47	; 0x2f
     860:	b8 a9       	ldd	r27, Y+48	; 0x30
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	e8 2a       	or	r14, r24
     868:	f9 2a       	or	r15, r25
     86a:	0a 2b       	or	r16, r26
     86c:	1b 2b       	or	r17, r27
     86e:	e2 16       	cp	r14, r18
     870:	f3 06       	cpc	r15, r19
     872:	04 07       	cpc	r16, r20
     874:	15 07       	cpc	r17, r21
     876:	c0 f4       	brcc	.+48     	; 0x8a8 <__stack+0x49>
     878:	08 94       	sec
     87a:	a1 08       	sbc	r10, r1
     87c:	b1 08       	sbc	r11, r1
     87e:	c1 08       	sbc	r12, r1
     880:	d1 08       	sbc	r13, r1
     882:	e2 0c       	add	r14, r2
     884:	f3 1c       	adc	r15, r3
     886:	04 1d       	adc	r16, r4
     888:	15 1d       	adc	r17, r5
     88a:	e2 14       	cp	r14, r2
     88c:	f3 04       	cpc	r15, r3
     88e:	04 05       	cpc	r16, r4
     890:	15 05       	cpc	r17, r5
     892:	50 f0       	brcs	.+20     	; 0x8a8 <__stack+0x49>
     894:	e2 16       	cp	r14, r18
     896:	f3 06       	cpc	r15, r19
     898:	04 07       	cpc	r16, r20
     89a:	15 07       	cpc	r17, r21
     89c:	28 f4       	brcc	.+10     	; 0x8a8 <__stack+0x49>
     89e:	08 94       	sec
     8a0:	a1 08       	sbc	r10, r1
     8a2:	b1 08       	sbc	r11, r1
     8a4:	c1 08       	sbc	r12, r1
     8a6:	d1 08       	sbc	r13, r1
     8a8:	61 96       	adiw	r28, 0x11	; 17
     8aa:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ac:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ae:	0e ad       	ldd	r16, Y+62	; 0x3e
     8b0:	1f ad       	ldd	r17, Y+63	; 0x3f
     8b2:	61 97       	sbiw	r28, 0x11	; 17
     8b4:	d7 01       	movw	r26, r14
     8b6:	99 27       	eor	r25, r25
     8b8:	88 27       	eor	r24, r24
     8ba:	96 01       	movw	r18, r12
     8bc:	85 01       	movw	r16, r10
     8be:	08 2b       	or	r16, r24
     8c0:	19 2b       	or	r17, r25
     8c2:	2a 2b       	or	r18, r26
     8c4:	3b 2b       	or	r19, r27
     8c6:	09 ab       	std	Y+49, r16	; 0x31
     8c8:	1a ab       	std	Y+50, r17	; 0x32
     8ca:	2b ab       	std	Y+51, r18	; 0x33
     8cc:	3c ab       	std	Y+52, r19	; 0x34
     8ce:	62 c2       	rjmp	.+1220   	; 0xd94 <__stack+0x535>
     8d0:	6e 14       	cp	r6, r14
     8d2:	7f 04       	cpc	r7, r15
     8d4:	80 06       	cpc	r8, r16
     8d6:	91 06       	cpc	r9, r17
     8d8:	08 f4       	brcc	.+2      	; 0x8dc <__stack+0x7d>
     8da:	51 c2       	rjmp	.+1186   	; 0xd7e <__stack+0x51f>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	e2 16       	cp	r14, r18
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	f2 06       	cpc	r15, r18
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	02 07       	cpc	r16, r18
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	12 07       	cpc	r17, r18
     8ec:	88 f4       	brcc	.+34     	; 0x910 <__stack+0xb1>
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	e3 16       	cp	r14, r19
     8f2:	f1 04       	cpc	r15, r1
     8f4:	01 05       	cpc	r16, r1
     8f6:	11 05       	cpc	r17, r1
     8f8:	31 f0       	breq	.+12     	; 0x906 <__stack+0xa7>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <__stack+0xa7>
     8fc:	48 e0       	ldi	r20, 0x08	; 8
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	17 c0       	rjmp	.+46     	; 0x934 <__stack+0xd5>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	12 c0       	rjmp	.+36     	; 0x934 <__stack+0xd5>
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	e4 16       	cp	r14, r20
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	f4 06       	cpc	r15, r20
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	04 07       	cpc	r16, r20
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	14 07       	cpc	r17, r20
     920:	28 f0       	brcs	.+10     	; 0x92c <__stack+0xcd>
     922:	48 e1       	ldi	r20, 0x18	; 24
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0xd5>
     92c:	40 e1       	ldi	r20, 0x10	; 16
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	d8 01       	movw	r26, r16
     936:	c7 01       	movw	r24, r14
     938:	04 2e       	mov	r0, r20
     93a:	04 c0       	rjmp	.+8      	; 0x944 <__stack+0xe5>
     93c:	b6 95       	lsr	r27
     93e:	a7 95       	ror	r26
     940:	97 95       	ror	r25
     942:	87 95       	ror	r24
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <__stack+0xdd>
     948:	81 59       	subi	r24, 0x91	; 145
     94a:	9f 4f       	sbci	r25, 0xFF	; 255
     94c:	dc 01       	movw	r26, r24
     94e:	2c 91       	ld	r18, X
     950:	30 e2       	ldi	r19, 0x20	; 32
     952:	a3 2e       	mov	r10, r19
     954:	b1 2c       	mov	r11, r1
     956:	c1 2c       	mov	r12, r1
     958:	d1 2c       	mov	r13, r1
     95a:	d6 01       	movw	r26, r12
     95c:	c5 01       	movw	r24, r10
     95e:	84 1b       	sub	r24, r20
     960:	95 0b       	sbc	r25, r21
     962:	a6 0b       	sbc	r26, r22
     964:	b7 0b       	sbc	r27, r23
     966:	82 1b       	sub	r24, r18
     968:	91 09       	sbc	r25, r1
     96a:	a1 09       	sbc	r26, r1
     96c:	b1 09       	sbc	r27, r1
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	89 f4       	brne	.+34     	; 0x998 <__stack+0x139>
     976:	e6 14       	cp	r14, r6
     978:	f7 04       	cpc	r15, r7
     97a:	08 05       	cpc	r16, r8
     97c:	19 05       	cpc	r17, r9
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	f2 c1       	rjmp	.+996    	; 0xd66 <__stack+0x507>
     982:	6d a4       	ldd	r6, Y+45	; 0x2d
     984:	7e a4       	ldd	r7, Y+46	; 0x2e
     986:	8f a4       	ldd	r8, Y+47	; 0x2f
     988:	98 a8       	ldd	r9, Y+48	; 0x30
     98a:	62 14       	cp	r6, r2
     98c:	73 04       	cpc	r7, r3
     98e:	84 04       	cpc	r8, r4
     990:	95 04       	cpc	r9, r5
     992:	08 f0       	brcs	.+2      	; 0x996 <__stack+0x137>
     994:	e8 c1       	rjmp	.+976    	; 0xd66 <__stack+0x507>
     996:	f3 c1       	rjmp	.+998    	; 0xd7e <__stack+0x51f>
     998:	6e 96       	adiw	r28, 0x1e	; 30
     99a:	8f af       	std	Y+63, r24	; 0x3f
     99c:	6e 97       	sbiw	r28, 0x1e	; 30
     99e:	08 2e       	mov	r0, r24
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <__stack+0x14b>
     9a2:	ee 0c       	add	r14, r14
     9a4:	ff 1c       	adc	r15, r15
     9a6:	00 1f       	adc	r16, r16
     9a8:	11 1f       	adc	r17, r17
     9aa:	0a 94       	dec	r0
     9ac:	d2 f7       	brpl	.-12     	; 0x9a2 <__stack+0x143>
     9ae:	6a 2d       	mov	r22, r10
     9b0:	68 1b       	sub	r22, r24
     9b2:	d2 01       	movw	r26, r4
     9b4:	c1 01       	movw	r24, r2
     9b6:	06 2e       	mov	r0, r22
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	b6 95       	lsr	r27
     9bc:	a7 95       	ror	r26
     9be:	97 95       	ror	r25
     9c0:	87 95       	ror	r24
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	5c 01       	movw	r10, r24
     9c8:	6d 01       	movw	r12, r26
     9ca:	ae 28       	or	r10, r14
     9cc:	bf 28       	or	r11, r15
     9ce:	c0 2a       	or	r12, r16
     9d0:	d1 2a       	or	r13, r17
     9d2:	ad a2       	std	Y+37, r10	; 0x25
     9d4:	be a2       	std	Y+38, r11	; 0x26
     9d6:	cf a2       	std	Y+39, r12	; 0x27
     9d8:	d8 a6       	std	Y+40, r13	; 0x28
     9da:	72 01       	movw	r14, r4
     9dc:	61 01       	movw	r12, r2
     9de:	6e 96       	adiw	r28, 0x1e	; 30
     9e0:	0f ac       	ldd	r0, Y+63	; 0x3f
     9e2:	6e 97       	sbiw	r28, 0x1e	; 30
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__stack+0x18f>
     9e6:	cc 0c       	add	r12, r12
     9e8:	dd 1c       	adc	r13, r13
     9ea:	ee 1c       	adc	r14, r14
     9ec:	ff 1c       	adc	r15, r15
     9ee:	0a 94       	dec	r0
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__stack+0x187>
     9f2:	c9 a2       	std	Y+33, r12	; 0x21
     9f4:	da a2       	std	Y+34, r13	; 0x22
     9f6:	eb a2       	std	Y+35, r14	; 0x23
     9f8:	fc a2       	std	Y+36, r15	; 0x24
     9fa:	64 01       	movw	r12, r8
     9fc:	53 01       	movw	r10, r6
     9fe:	06 2e       	mov	r0, r22
     a00:	04 c0       	rjmp	.+8      	; 0xa0a <__stack+0x1ab>
     a02:	d6 94       	lsr	r13
     a04:	c7 94       	ror	r12
     a06:	b7 94       	ror	r11
     a08:	a7 94       	ror	r10
     a0a:	0a 94       	dec	r0
     a0c:	d2 f7       	brpl	.-12     	; 0xa02 <__stack+0x1a3>
     a0e:	d4 01       	movw	r26, r8
     a10:	c3 01       	movw	r24, r6
     a12:	6e 96       	adiw	r28, 0x1e	; 30
     a14:	0f ac       	ldd	r0, Y+63	; 0x3f
     a16:	6e 97       	sbiw	r28, 0x1e	; 30
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <__stack+0x1c3>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	aa 1f       	adc	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <__stack+0x1bb>
     a26:	ed a4       	ldd	r14, Y+45	; 0x2d
     a28:	fe a4       	ldd	r15, Y+46	; 0x2e
     a2a:	0f a5       	ldd	r16, Y+47	; 0x2f
     a2c:	18 a9       	ldd	r17, Y+48	; 0x30
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x1d9>
     a30:	16 95       	lsr	r17
     a32:	07 95       	ror	r16
     a34:	f7 94       	ror	r15
     a36:	e7 94       	ror	r14
     a38:	6a 95       	dec	r22
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__stack+0x1d1>
     a3c:	37 01       	movw	r6, r14
     a3e:	48 01       	movw	r8, r16
     a40:	68 2a       	or	r6, r24
     a42:	79 2a       	or	r7, r25
     a44:	8a 2a       	or	r8, r26
     a46:	9b 2a       	or	r9, r27
     a48:	6d 8e       	std	Y+29, r6	; 0x1d
     a4a:	7e 8e       	std	Y+30, r7	; 0x1e
     a4c:	8f 8e       	std	Y+31, r8	; 0x1f
     a4e:	98 a2       	std	Y+32, r9	; 0x20
     a50:	ed a0       	ldd	r14, Y+37	; 0x25
     a52:	fe a0       	ldd	r15, Y+38	; 0x26
     a54:	0f a1       	ldd	r16, Y+39	; 0x27
     a56:	18 a5       	ldd	r17, Y+40	; 0x28
     a58:	38 01       	movw	r6, r16
     a5a:	88 24       	eor	r8, r8
     a5c:	99 24       	eor	r9, r9
     a5e:	98 01       	movw	r18, r16
     a60:	87 01       	movw	r16, r14
     a62:	20 70       	andi	r18, 0x00	; 0
     a64:	30 70       	andi	r19, 0x00	; 0
     a66:	65 96       	adiw	r28, 0x15	; 21
     a68:	0c af       	std	Y+60, r16	; 0x3c
     a6a:	1d af       	std	Y+61, r17	; 0x3d
     a6c:	2e af       	std	Y+62, r18	; 0x3e
     a6e:	3f af       	std	Y+63, r19	; 0x3f
     a70:	65 97       	sbiw	r28, 0x15	; 21
     a72:	c6 01       	movw	r24, r12
     a74:	b5 01       	movw	r22, r10
     a76:	a4 01       	movw	r20, r8
     a78:	93 01       	movw	r18, r6
     a7a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     a7e:	7b 01       	movw	r14, r22
     a80:	8c 01       	movw	r16, r24
     a82:	c6 01       	movw	r24, r12
     a84:	b5 01       	movw	r22, r10
     a86:	a4 01       	movw	r20, r8
     a88:	93 01       	movw	r18, r6
     a8a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     a8e:	c9 01       	movw	r24, r18
     a90:	da 01       	movw	r26, r20
     a92:	1c 01       	movw	r2, r24
     a94:	2d 01       	movw	r4, r26
     a96:	c2 01       	movw	r24, r4
     a98:	b1 01       	movw	r22, r2
     a9a:	65 96       	adiw	r28, 0x15	; 21
     a9c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a9e:	3d ad       	ldd	r19, Y+61	; 0x3d
     aa0:	4e ad       	ldd	r20, Y+62	; 0x3e
     aa2:	5f ad       	ldd	r21, Y+63	; 0x3f
     aa4:	65 97       	sbiw	r28, 0x15	; 21
     aa6:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	87 01       	movw	r16, r14
     ab0:	ff 24       	eor	r15, r15
     ab2:	ee 24       	eor	r14, r14
     ab4:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ab6:	be 8c       	ldd	r11, Y+30	; 0x1e
     ab8:	cf 8c       	ldd	r12, Y+31	; 0x1f
     aba:	d8 a0       	ldd	r13, Y+32	; 0x20
     abc:	c6 01       	movw	r24, r12
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	57 01       	movw	r10, r14
     ac4:	68 01       	movw	r12, r16
     ac6:	a8 2a       	or	r10, r24
     ac8:	b9 2a       	or	r11, r25
     aca:	ca 2a       	or	r12, r26
     acc:	db 2a       	or	r13, r27
     ace:	a2 16       	cp	r10, r18
     ad0:	b3 06       	cpc	r11, r19
     ad2:	c4 06       	cpc	r12, r20
     ad4:	d5 06       	cpc	r13, r21
     ad6:	00 f5       	brcc	.+64     	; 0xb18 <__stack+0x2b9>
     ad8:	08 94       	sec
     ada:	21 08       	sbc	r2, r1
     adc:	31 08       	sbc	r3, r1
     ade:	41 08       	sbc	r4, r1
     ae0:	51 08       	sbc	r5, r1
     ae2:	ed a0       	ldd	r14, Y+37	; 0x25
     ae4:	fe a0       	ldd	r15, Y+38	; 0x26
     ae6:	0f a1       	ldd	r16, Y+39	; 0x27
     ae8:	18 a5       	ldd	r17, Y+40	; 0x28
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
     af2:	ae 14       	cp	r10, r14
     af4:	bf 04       	cpc	r11, r15
     af6:	c0 06       	cpc	r12, r16
     af8:	d1 06       	cpc	r13, r17
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__stack+0x2b9>
     afc:	a2 16       	cp	r10, r18
     afe:	b3 06       	cpc	r11, r19
     b00:	c4 06       	cpc	r12, r20
     b02:	d5 06       	cpc	r13, r21
     b04:	48 f4       	brcc	.+18     	; 0xb18 <__stack+0x2b9>
     b06:	08 94       	sec
     b08:	21 08       	sbc	r2, r1
     b0a:	31 08       	sbc	r3, r1
     b0c:	41 08       	sbc	r4, r1
     b0e:	51 08       	sbc	r5, r1
     b10:	ae 0c       	add	r10, r14
     b12:	bf 1c       	adc	r11, r15
     b14:	c0 1e       	adc	r12, r16
     b16:	d1 1e       	adc	r13, r17
     b18:	a2 1a       	sub	r10, r18
     b1a:	b3 0a       	sbc	r11, r19
     b1c:	c4 0a       	sbc	r12, r20
     b1e:	d5 0a       	sbc	r13, r21
     b20:	c6 01       	movw	r24, r12
     b22:	b5 01       	movw	r22, r10
     b24:	a4 01       	movw	r20, r8
     b26:	93 01       	movw	r18, r6
     b28:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     b2c:	7b 01       	movw	r14, r22
     b2e:	8c 01       	movw	r16, r24
     b30:	c6 01       	movw	r24, r12
     b32:	b5 01       	movw	r22, r10
     b34:	a4 01       	movw	r20, r8
     b36:	93 01       	movw	r18, r6
     b38:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     b3c:	c9 01       	movw	r24, r18
     b3e:	da 01       	movw	r26, r20
     b40:	3c 01       	movw	r6, r24
     b42:	4d 01       	movw	r8, r26
     b44:	c4 01       	movw	r24, r8
     b46:	b3 01       	movw	r22, r6
     b48:	65 96       	adiw	r28, 0x15	; 21
     b4a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b4c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b4e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b50:	5f ad       	ldd	r21, Y+63	; 0x3f
     b52:	65 97       	sbiw	r28, 0x15	; 21
     b54:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     b58:	9b 01       	movw	r18, r22
     b5a:	ac 01       	movw	r20, r24
     b5c:	87 01       	movw	r16, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	ee 24       	eor	r14, r14
     b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b66:	af 8d       	ldd	r26, Y+31	; 0x1f
     b68:	b8 a1       	ldd	r27, Y+32	; 0x20
     b6a:	a0 70       	andi	r26, 0x00	; 0
     b6c:	b0 70       	andi	r27, 0x00	; 0
     b6e:	57 01       	movw	r10, r14
     b70:	68 01       	movw	r12, r16
     b72:	a8 2a       	or	r10, r24
     b74:	b9 2a       	or	r11, r25
     b76:	ca 2a       	or	r12, r26
     b78:	db 2a       	or	r13, r27
     b7a:	a2 16       	cp	r10, r18
     b7c:	b3 06       	cpc	r11, r19
     b7e:	c4 06       	cpc	r12, r20
     b80:	d5 06       	cpc	r13, r21
     b82:	00 f5       	brcc	.+64     	; 0xbc4 <__stack+0x365>
     b84:	08 94       	sec
     b86:	61 08       	sbc	r6, r1
     b88:	71 08       	sbc	r7, r1
     b8a:	81 08       	sbc	r8, r1
     b8c:	91 08       	sbc	r9, r1
     b8e:	6d a1       	ldd	r22, Y+37	; 0x25
     b90:	7e a1       	ldd	r23, Y+38	; 0x26
     b92:	8f a1       	ldd	r24, Y+39	; 0x27
     b94:	98 a5       	ldd	r25, Y+40	; 0x28
     b96:	a6 0e       	add	r10, r22
     b98:	b7 1e       	adc	r11, r23
     b9a:	c8 1e       	adc	r12, r24
     b9c:	d9 1e       	adc	r13, r25
     b9e:	a6 16       	cp	r10, r22
     ba0:	b7 06       	cpc	r11, r23
     ba2:	c8 06       	cpc	r12, r24
     ba4:	d9 06       	cpc	r13, r25
     ba6:	70 f0       	brcs	.+28     	; 0xbc4 <__stack+0x365>
     ba8:	a2 16       	cp	r10, r18
     baa:	b3 06       	cpc	r11, r19
     bac:	c4 06       	cpc	r12, r20
     bae:	d5 06       	cpc	r13, r21
     bb0:	48 f4       	brcc	.+18     	; 0xbc4 <__stack+0x365>
     bb2:	08 94       	sec
     bb4:	61 08       	sbc	r6, r1
     bb6:	71 08       	sbc	r7, r1
     bb8:	81 08       	sbc	r8, r1
     bba:	91 08       	sbc	r9, r1
     bbc:	a6 0e       	add	r10, r22
     bbe:	b7 1e       	adc	r11, r23
     bc0:	c8 1e       	adc	r12, r24
     bc2:	d9 1e       	adc	r13, r25
     bc4:	d6 01       	movw	r26, r12
     bc6:	c5 01       	movw	r24, r10
     bc8:	82 1b       	sub	r24, r18
     bca:	93 0b       	sbc	r25, r19
     bcc:	a4 0b       	sbc	r26, r20
     bce:	b5 0b       	sbc	r27, r21
     bd0:	89 8f       	std	Y+25, r24	; 0x19
     bd2:	9a 8f       	std	Y+26, r25	; 0x1a
     bd4:	ab 8f       	std	Y+27, r26	; 0x1b
     bd6:	bc 8f       	std	Y+28, r27	; 0x1c
     bd8:	d1 01       	movw	r26, r2
     bda:	99 27       	eor	r25, r25
     bdc:	88 27       	eor	r24, r24
     bde:	64 01       	movw	r12, r8
     be0:	53 01       	movw	r10, r6
     be2:	a8 2a       	or	r10, r24
     be4:	b9 2a       	or	r11, r25
     be6:	ca 2a       	or	r12, r26
     be8:	db 2a       	or	r13, r27
     bea:	a9 aa       	std	Y+49, r10	; 0x31
     bec:	ba aa       	std	Y+50, r11	; 0x32
     bee:	cb aa       	std	Y+51, r12	; 0x33
     bf0:	dc aa       	std	Y+52, r13	; 0x34
     bf2:	86 01       	movw	r16, r12
     bf4:	75 01       	movw	r14, r10
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	50 e0       	ldi	r21, 0x00	; 0
     bfe:	e2 22       	and	r14, r18
     c00:	f3 22       	and	r15, r19
     c02:	04 23       	and	r16, r20
     c04:	15 23       	and	r17, r21
     c06:	a6 01       	movw	r20, r12
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	6d 96       	adiw	r28, 0x1d	; 29
     c0e:	4c af       	std	Y+60, r20	; 0x3c
     c10:	5d af       	std	Y+61, r21	; 0x3d
     c12:	6e af       	std	Y+62, r22	; 0x3e
     c14:	7f af       	std	Y+63, r23	; 0x3f
     c16:	6d 97       	sbiw	r28, 0x1d	; 29
     c18:	a9 a0       	ldd	r10, Y+33	; 0x21
     c1a:	ba a0       	ldd	r11, Y+34	; 0x22
     c1c:	cb a0       	ldd	r12, Y+35	; 0x23
     c1e:	dc a0       	ldd	r13, Y+36	; 0x24
     c20:	6f ef       	ldi	r22, 0xFF	; 255
     c22:	7f ef       	ldi	r23, 0xFF	; 255
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	a6 22       	and	r10, r22
     c2a:	b7 22       	and	r11, r23
     c2c:	c8 22       	and	r12, r24
     c2e:	d9 22       	and	r13, r25
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	9a a1       	ldd	r25, Y+34	; 0x22
     c34:	ab a1       	ldd	r26, Y+35	; 0x23
     c36:	bc a1       	ldd	r27, Y+36	; 0x24
     c38:	1d 01       	movw	r2, r26
     c3a:	44 24       	eor	r4, r4
     c3c:	55 24       	eor	r5, r5
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	a6 01       	movw	r20, r12
     c44:	95 01       	movw	r18, r10
     c46:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     c4a:	69 96       	adiw	r28, 0x19	; 25
     c4c:	6c af       	std	Y+60, r22	; 0x3c
     c4e:	7d af       	std	Y+61, r23	; 0x3d
     c50:	8e af       	std	Y+62, r24	; 0x3e
     c52:	9f af       	std	Y+63, r25	; 0x3f
     c54:	69 97       	sbiw	r28, 0x19	; 25
     c56:	c8 01       	movw	r24, r16
     c58:	b7 01       	movw	r22, r14
     c5a:	a2 01       	movw	r20, r4
     c5c:	91 01       	movw	r18, r2
     c5e:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     c62:	3b 01       	movw	r6, r22
     c64:	4c 01       	movw	r8, r24
     c66:	6d 96       	adiw	r28, 0x1d	; 29
     c68:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
     c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c70:	6d 97       	sbiw	r28, 0x1d	; 29
     c72:	a6 01       	movw	r20, r12
     c74:	95 01       	movw	r18, r10
     c76:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	6d 96       	adiw	r28, 0x1d	; 29
     c80:	6c ad       	ldd	r22, Y+60	; 0x3c
     c82:	7d ad       	ldd	r23, Y+61	; 0x3d
     c84:	8e ad       	ldd	r24, Y+62	; 0x3e
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	6d 97       	sbiw	r28, 0x1d	; 29
     c8a:	a2 01       	movw	r20, r4
     c8c:	91 01       	movw	r18, r2
     c8e:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
     c92:	5b 01       	movw	r10, r22
     c94:	6c 01       	movw	r12, r24
     c96:	a8 01       	movw	r20, r16
     c98:	97 01       	movw	r18, r14
     c9a:	26 0d       	add	r18, r6
     c9c:	37 1d       	adc	r19, r7
     c9e:	48 1d       	adc	r20, r8
     ca0:	59 1d       	adc	r21, r9
     ca2:	69 96       	adiw	r28, 0x19	; 25
     ca4:	6c ac       	ldd	r6, Y+60	; 0x3c
     ca6:	7d ac       	ldd	r7, Y+61	; 0x3d
     ca8:	8e ac       	ldd	r8, Y+62	; 0x3e
     caa:	9f ac       	ldd	r9, Y+63	; 0x3f
     cac:	69 97       	sbiw	r28, 0x19	; 25
     cae:	c4 01       	movw	r24, r8
     cb0:	aa 27       	eor	r26, r26
     cb2:	bb 27       	eor	r27, r27
     cb4:	28 0f       	add	r18, r24
     cb6:	39 1f       	adc	r19, r25
     cb8:	4a 1f       	adc	r20, r26
     cba:	5b 1f       	adc	r21, r27
     cbc:	2e 15       	cp	r18, r14
     cbe:	3f 05       	cpc	r19, r15
     cc0:	40 07       	cpc	r20, r16
     cc2:	51 07       	cpc	r21, r17
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <__stack+0x479>
     cc6:	e1 2c       	mov	r14, r1
     cc8:	f1 2c       	mov	r15, r1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	06 2f       	mov	r16, r22
     cce:	11 2d       	mov	r17, r1
     cd0:	ae 0c       	add	r10, r14
     cd2:	bf 1c       	adc	r11, r15
     cd4:	c0 1e       	adc	r12, r16
     cd6:	d1 1e       	adc	r13, r17
     cd8:	ca 01       	movw	r24, r20
     cda:	aa 27       	eor	r26, r26
     cdc:	bb 27       	eor	r27, r27
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	6a 0d       	add	r22, r10
     ce4:	7b 1d       	adc	r23, r11
     ce6:	8c 1d       	adc	r24, r12
     ce8:	9d 1d       	adc	r25, r13
     cea:	69 8c       	ldd	r6, Y+25	; 0x19
     cec:	7a 8c       	ldd	r7, Y+26	; 0x1a
     cee:	8b 8c       	ldd	r8, Y+27	; 0x1b
     cf0:	9c 8c       	ldd	r9, Y+28	; 0x1c
     cf2:	66 16       	cp	r6, r22
     cf4:	77 06       	cpc	r7, r23
     cf6:	88 06       	cpc	r8, r24
     cf8:	99 06       	cpc	r9, r25
     cfa:	40 f1       	brcs	.+80     	; 0xd4c <__stack+0x4ed>
     cfc:	66 15       	cp	r22, r6
     cfe:	77 05       	cpc	r23, r7
     d00:	88 05       	cpc	r24, r8
     d02:	99 05       	cpc	r25, r9
     d04:	09 f0       	breq	.+2      	; 0xd08 <__stack+0x4a9>
     d06:	43 c0       	rjmp	.+134    	; 0xd8e <__stack+0x52f>
     d08:	d9 01       	movw	r26, r18
     d0a:	99 27       	eor	r25, r25
     d0c:	88 27       	eor	r24, r24
     d0e:	69 96       	adiw	r28, 0x19	; 25
     d10:	2c ad       	ldd	r18, Y+60	; 0x3c
     d12:	3d ad       	ldd	r19, Y+61	; 0x3d
     d14:	4e ad       	ldd	r20, Y+62	; 0x3e
     d16:	5f ad       	ldd	r21, Y+63	; 0x3f
     d18:	69 97       	sbiw	r28, 0x19	; 25
     d1a:	40 70       	andi	r20, 0x00	; 0
     d1c:	50 70       	andi	r21, 0x00	; 0
     d1e:	82 0f       	add	r24, r18
     d20:	93 1f       	adc	r25, r19
     d22:	a4 1f       	adc	r26, r20
     d24:	b5 1f       	adc	r27, r21
     d26:	2d a5       	ldd	r18, Y+45	; 0x2d
     d28:	3e a5       	ldd	r19, Y+46	; 0x2e
     d2a:	4f a5       	ldd	r20, Y+47	; 0x2f
     d2c:	58 a9       	ldd	r21, Y+48	; 0x30
     d2e:	6e 96       	adiw	r28, 0x1e	; 30
     d30:	0f ac       	ldd	r0, Y+63	; 0x3f
     d32:	6e 97       	sbiw	r28, 0x1e	; 30
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__stack+0x4df>
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	44 1f       	adc	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	0a 94       	dec	r0
     d40:	d2 f7       	brpl	.-12     	; 0xd36 <__stack+0x4d7>
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	08 f5       	brcc	.+66     	; 0xd8e <__stack+0x52f>
     d4c:	09 a9       	ldd	r16, Y+49	; 0x31
     d4e:	1a a9       	ldd	r17, Y+50	; 0x32
     d50:	2b a9       	ldd	r18, Y+51	; 0x33
     d52:	3c a9       	ldd	r19, Y+52	; 0x34
     d54:	01 50       	subi	r16, 0x01	; 1
     d56:	10 40       	sbci	r17, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	30 40       	sbci	r19, 0x00	; 0
     d5c:	09 ab       	std	Y+49, r16	; 0x31
     d5e:	1a ab       	std	Y+50, r17	; 0x32
     d60:	2b ab       	std	Y+51, r18	; 0x33
     d62:	3c ab       	std	Y+52, r19	; 0x34
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <__stack+0x52f>
     d66:	66 24       	eor	r6, r6
     d68:	77 24       	eor	r7, r7
     d6a:	43 01       	movw	r8, r6
     d6c:	21 e0       	ldi	r18, 0x01	; 1
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	29 ab       	std	Y+49, r18	; 0x31
     d76:	3a ab       	std	Y+50, r19	; 0x32
     d78:	4b ab       	std	Y+51, r20	; 0x33
     d7a:	5c ab       	std	Y+52, r21	; 0x34
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <__stack+0x535>
     d7e:	66 24       	eor	r6, r6
     d80:	77 24       	eor	r7, r7
     d82:	43 01       	movw	r8, r6
     d84:	19 aa       	std	Y+49, r1	; 0x31
     d86:	1a aa       	std	Y+50, r1	; 0x32
     d88:	1b aa       	std	Y+51, r1	; 0x33
     d8a:	1c aa       	std	Y+52, r1	; 0x34
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <__stack+0x535>
     d8e:	66 24       	eor	r6, r6
     d90:	77 24       	eor	r7, r7
     d92:	43 01       	movw	r8, r6
     d94:	fe 01       	movw	r30, r28
     d96:	71 96       	adiw	r30, 0x11	; 17
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	df 01       	movw	r26, r30
     d9c:	1d 92       	st	X+, r1
     d9e:	8a 95       	dec	r24
     da0:	e9 f7       	brne	.-6      	; 0xd9c <__stack+0x53d>
     da2:	a9 a8       	ldd	r10, Y+49	; 0x31
     da4:	ba a8       	ldd	r11, Y+50	; 0x32
     da6:	cb a8       	ldd	r12, Y+51	; 0x33
     da8:	dc a8       	ldd	r13, Y+52	; 0x34
     daa:	a9 8a       	std	Y+17, r10	; 0x11
     dac:	ba 8a       	std	Y+18, r11	; 0x12
     dae:	cb 8a       	std	Y+19, r12	; 0x13
     db0:	dc 8a       	std	Y+20, r13	; 0x14
     db2:	6d 8a       	std	Y+21, r6	; 0x15
     db4:	7e 8a       	std	Y+22, r7	; 0x16
     db6:	8f 8a       	std	Y+23, r8	; 0x17
     db8:	98 8e       	std	Y+24, r9	; 0x18
     dba:	29 a9       	ldd	r18, Y+49	; 0x31
     dbc:	3a 89       	ldd	r19, Y+18	; 0x12
     dbe:	4b 89       	ldd	r20, Y+19	; 0x13
     dc0:	5c 89       	ldd	r21, Y+20	; 0x14
     dc2:	66 2d       	mov	r22, r6
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	c2 5a       	subi	r28, 0xA2	; 162
     dcc:	df 4f       	sbci	r29, 0xFF	; 255
     dce:	e2 e1       	ldi	r30, 0x12	; 18
     dd0:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__>

00000dd4 <__umoddi3>:
     dd4:	ab e5       	ldi	r26, 0x5B	; 91
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__>
     de0:	a8 e0       	ldi	r26, 0x08	; 8
     de2:	4e 01       	movw	r8, r28
     de4:	08 94       	sec
     de6:	81 1c       	adc	r8, r1
     de8:	91 1c       	adc	r9, r1
     dea:	f4 01       	movw	r30, r8
     dec:	6a 2e       	mov	r6, r26
     dee:	11 92       	st	Z+, r1
     df0:	6a 94       	dec	r6
     df2:	e9 f7       	brne	.-6      	; 0xdee <__umoddi3+0x1a>
     df4:	29 83       	std	Y+1, r18	; 0x01
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	5c 83       	std	Y+4, r21	; 0x04
     dfc:	6d 83       	std	Y+5, r22	; 0x05
     dfe:	7e 83       	std	Y+6, r23	; 0x06
     e00:	8f 83       	std	Y+7, r24	; 0x07
     e02:	98 87       	std	Y+8, r25	; 0x08
     e04:	ce 01       	movw	r24, r28
     e06:	09 96       	adiw	r24, 0x09	; 9
     e08:	fc 01       	movw	r30, r24
     e0a:	11 92       	st	Z+, r1
     e0c:	aa 95       	dec	r26
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <__umoddi3+0x36>
     e10:	a9 86       	std	Y+9, r10	; 0x09
     e12:	ba 86       	std	Y+10, r11	; 0x0a
     e14:	cb 86       	std	Y+11, r12	; 0x0b
     e16:	dc 86       	std	Y+12, r13	; 0x0c
     e18:	ed 86       	std	Y+13, r14	; 0x0d
     e1a:	fe 86       	std	Y+14, r15	; 0x0e
     e1c:	0f 87       	std	Y+15, r16	; 0x0f
     e1e:	18 8b       	std	Y+16, r17	; 0x10
     e20:	29 84       	ldd	r2, Y+9	; 0x09
     e22:	3a 84       	ldd	r3, Y+10	; 0x0a
     e24:	4b 84       	ldd	r4, Y+11	; 0x0b
     e26:	5c 84       	ldd	r5, Y+12	; 0x0c
     e28:	ad 84       	ldd	r10, Y+13	; 0x0d
     e2a:	be 84       	ldd	r11, Y+14	; 0x0e
     e2c:	cf 84       	ldd	r12, Y+15	; 0x0f
     e2e:	d8 88       	ldd	r13, Y+16	; 0x10
     e30:	29 81       	ldd	r18, Y+1	; 0x01
     e32:	3a 81       	ldd	r19, Y+2	; 0x02
     e34:	4b 81       	ldd	r20, Y+3	; 0x03
     e36:	5c 81       	ldd	r21, Y+4	; 0x04
     e38:	69 96       	adiw	r28, 0x19	; 25
     e3a:	2f af       	std	Y+63, r18	; 0x3f
     e3c:	69 97       	sbiw	r28, 0x19	; 25
     e3e:	6a 96       	adiw	r28, 0x1a	; 26
     e40:	3f af       	std	Y+63, r19	; 0x3f
     e42:	6a 97       	sbiw	r28, 0x1a	; 26
     e44:	6b 96       	adiw	r28, 0x1b	; 27
     e46:	4f af       	std	Y+63, r20	; 0x3f
     e48:	6b 97       	sbiw	r28, 0x1b	; 27
     e4a:	6c 96       	adiw	r28, 0x1c	; 28
     e4c:	5f af       	std	Y+63, r21	; 0x3f
     e4e:	6c 97       	sbiw	r28, 0x1c	; 28
     e50:	6c 96       	adiw	r28, 0x1c	; 28
     e52:	6c ac       	ldd	r6, Y+60	; 0x3c
     e54:	7d ac       	ldd	r7, Y+61	; 0x3d
     e56:	8e ac       	ldd	r8, Y+62	; 0x3e
     e58:	9f ac       	ldd	r9, Y+63	; 0x3f
     e5a:	6c 97       	sbiw	r28, 0x1c	; 28
     e5c:	69 aa       	std	Y+49, r6	; 0x31
     e5e:	7a aa       	std	Y+50, r7	; 0x32
     e60:	8b aa       	std	Y+51, r8	; 0x33
     e62:	9c aa       	std	Y+52, r9	; 0x34
     e64:	6d 81       	ldd	r22, Y+5	; 0x05
     e66:	7e 81       	ldd	r23, Y+6	; 0x06
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	98 85       	ldd	r25, Y+8	; 0x08
     e6c:	3b 01       	movw	r6, r22
     e6e:	4c 01       	movw	r8, r24
     e70:	6d aa       	std	Y+53, r6	; 0x35
     e72:	7e aa       	std	Y+54, r7	; 0x36
     e74:	8f aa       	std	Y+55, r8	; 0x37
     e76:	98 ae       	std	Y+56, r9	; 0x38
     e78:	a1 14       	cp	r10, r1
     e7a:	b1 04       	cpc	r11, r1
     e7c:	c1 04       	cpc	r12, r1
     e7e:	d1 04       	cpc	r13, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <__umoddi3+0xb0>
     e82:	04 c3       	rjmp	.+1544   	; 0x148c <__umoddi3+0x6b8>
     e84:	62 14       	cp	r6, r2
     e86:	73 04       	cpc	r7, r3
     e88:	84 04       	cpc	r8, r4
     e8a:	95 04       	cpc	r9, r5
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__umoddi3+0xbc>
     e8e:	00 c1       	rjmp	.+512    	; 0x1090 <__umoddi3+0x2bc>
     e90:	00 e0       	ldi	r16, 0x00	; 0
     e92:	20 16       	cp	r2, r16
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	30 06       	cpc	r3, r16
     e98:	01 e0       	ldi	r16, 0x01	; 1
     e9a:	40 06       	cpc	r4, r16
     e9c:	00 e0       	ldi	r16, 0x00	; 0
     e9e:	50 06       	cpc	r5, r16
     ea0:	88 f4       	brcc	.+34     	; 0xec4 <__umoddi3+0xf0>
     ea2:	1f ef       	ldi	r17, 0xFF	; 255
     ea4:	21 16       	cp	r2, r17
     ea6:	31 04       	cpc	r3, r1
     ea8:	41 04       	cpc	r4, r1
     eaa:	51 04       	cpc	r5, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <__umoddi3+0xe8>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__umoddi3+0xe8>
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e8 2e       	mov	r14, r24
     eb4:	f1 2c       	mov	r15, r1
     eb6:	01 2d       	mov	r16, r1
     eb8:	11 2d       	mov	r17, r1
     eba:	18 c0       	rjmp	.+48     	; 0xeec <__umoddi3+0x118>
     ebc:	ee 24       	eor	r14, r14
     ebe:	ff 24       	eor	r15, r15
     ec0:	87 01       	movw	r16, r14
     ec2:	14 c0       	rjmp	.+40     	; 0xeec <__umoddi3+0x118>
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	24 16       	cp	r2, r20
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	34 06       	cpc	r3, r20
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	44 06       	cpc	r4, r20
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	54 06       	cpc	r5, r20
     ed4:	30 f0       	brcs	.+12     	; 0xee2 <__umoddi3+0x10e>
     ed6:	b8 e1       	ldi	r27, 0x18	; 24
     ed8:	eb 2e       	mov	r14, r27
     eda:	f1 2c       	mov	r15, r1
     edc:	01 2d       	mov	r16, r1
     ede:	11 2d       	mov	r17, r1
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__umoddi3+0x118>
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	ea 2e       	mov	r14, r26
     ee6:	f1 2c       	mov	r15, r1
     ee8:	01 2d       	mov	r16, r1
     eea:	11 2d       	mov	r17, r1
     eec:	d2 01       	movw	r26, r4
     eee:	c1 01       	movw	r24, r2
     ef0:	0e 2c       	mov	r0, r14
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <__umoddi3+0x128>
     ef4:	b6 95       	lsr	r27
     ef6:	a7 95       	ror	r26
     ef8:	97 95       	ror	r25
     efa:	87 95       	ror	r24
     efc:	0a 94       	dec	r0
     efe:	d2 f7       	brpl	.-12     	; 0xef4 <__umoddi3+0x120>
     f00:	81 59       	subi	r24, 0x91	; 145
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	dc 01       	movw	r26, r24
     f06:	2c 91       	ld	r18, X
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	8e 19       	sub	r24, r14
     f12:	9f 09       	sbc	r25, r15
     f14:	a0 0b       	sbc	r26, r16
     f16:	b1 0b       	sbc	r27, r17
     f18:	5c 01       	movw	r10, r24
     f1a:	6d 01       	movw	r12, r26
     f1c:	a2 1a       	sub	r10, r18
     f1e:	b1 08       	sbc	r11, r1
     f20:	c1 08       	sbc	r12, r1
     f22:	d1 08       	sbc	r13, r1
     f24:	a9 ae       	std	Y+57, r10	; 0x39
     f26:	ba ae       	std	Y+58, r11	; 0x3a
     f28:	cb ae       	std	Y+59, r12	; 0x3b
     f2a:	dc ae       	std	Y+60, r13	; 0x3c
     f2c:	a1 14       	cp	r10, r1
     f2e:	b1 04       	cpc	r11, r1
     f30:	c1 04       	cpc	r12, r1
     f32:	d1 04       	cpc	r13, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <__umoddi3+0x164>
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <__umoddi3+0x1e2>
     f38:	69 ad       	ldd	r22, Y+57	; 0x39
     f3a:	06 2e       	mov	r0, r22
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__umoddi3+0x172>
     f3e:	22 0c       	add	r2, r2
     f40:	33 1c       	adc	r3, r3
     f42:	44 1c       	adc	r4, r4
     f44:	55 1c       	adc	r5, r5
     f46:	0a 94       	dec	r0
     f48:	d2 f7       	brpl	.-12     	; 0xf3e <__umoddi3+0x16a>
     f4a:	a4 01       	movw	r20, r8
     f4c:	93 01       	movw	r18, r6
     f4e:	06 2e       	mov	r0, r22
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__umoddi3+0x186>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	44 1f       	adc	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__umoddi3+0x17e>
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	8a 19       	sub	r24, r10
     f64:	9b 09       	sbc	r25, r11
     f66:	6c 96       	adiw	r28, 0x1c	; 28
     f68:	cc ac       	ldd	r12, Y+60	; 0x3c
     f6a:	dd ac       	ldd	r13, Y+61	; 0x3d
     f6c:	ee ac       	ldd	r14, Y+62	; 0x3e
     f6e:	ff ac       	ldd	r15, Y+63	; 0x3f
     f70:	6c 97       	sbiw	r28, 0x1c	; 28
     f72:	04 c0       	rjmp	.+8      	; 0xf7c <__umoddi3+0x1a8>
     f74:	f6 94       	lsr	r15
     f76:	e7 94       	ror	r14
     f78:	d7 94       	ror	r13
     f7a:	c7 94       	ror	r12
     f7c:	8a 95       	dec	r24
     f7e:	d2 f7       	brpl	.-12     	; 0xf74 <__umoddi3+0x1a0>
     f80:	87 01       	movw	r16, r14
     f82:	76 01       	movw	r14, r12
     f84:	e2 2a       	or	r14, r18
     f86:	f3 2a       	or	r15, r19
     f88:	04 2b       	or	r16, r20
     f8a:	15 2b       	or	r17, r21
     f8c:	ed aa       	std	Y+53, r14	; 0x35
     f8e:	fe aa       	std	Y+54, r15	; 0x36
     f90:	0f ab       	std	Y+55, r16	; 0x37
     f92:	18 af       	std	Y+56, r17	; 0x38
     f94:	6c 96       	adiw	r28, 0x1c	; 28
     f96:	8c ad       	ldd	r24, Y+60	; 0x3c
     f98:	9d ad       	ldd	r25, Y+61	; 0x3d
     f9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     f9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <__umoddi3+0x1d6>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	6a 95       	dec	r22
     fac:	d2 f7       	brpl	.-12     	; 0xfa2 <__umoddi3+0x1ce>
     fae:	89 ab       	std	Y+49, r24	; 0x31
     fb0:	9a ab       	std	Y+50, r25	; 0x32
     fb2:	ab ab       	std	Y+51, r26	; 0x33
     fb4:	bc ab       	std	Y+52, r27	; 0x34
     fb6:	32 01       	movw	r6, r4
     fb8:	88 24       	eor	r8, r8
     fba:	99 24       	eor	r9, r9
     fbc:	b2 01       	movw	r22, r4
     fbe:	a1 01       	movw	r20, r2
     fc0:	60 70       	andi	r22, 0x00	; 0
     fc2:	70 70       	andi	r23, 0x00	; 0
     fc4:	21 96       	adiw	r28, 0x01	; 1
     fc6:	4c af       	std	Y+60, r20	; 0x3c
     fc8:	5d af       	std	Y+61, r21	; 0x3d
     fca:	6e af       	std	Y+62, r22	; 0x3e
     fcc:	7f af       	std	Y+63, r23	; 0x3f
     fce:	21 97       	sbiw	r28, 0x01	; 1
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	a4 01       	movw	r20, r8
     fda:	93 01       	movw	r18, r6
     fdc:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	a4 01       	movw	r20, r8
     fee:	93 01       	movw	r18, r6
     ff0:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	21 96       	adiw	r28, 0x01	; 1
     ffa:	2c ad       	ldd	r18, Y+60	; 0x3c
     ffc:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1000:	5f ad       	ldd	r21, Y+63	; 0x3f
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	87 01       	movw	r16, r14
    100e:	ff 24       	eor	r15, r15
    1010:	ee 24       	eor	r14, r14
    1012:	a9 a8       	ldd	r10, Y+49	; 0x31
    1014:	ba a8       	ldd	r11, Y+50	; 0x32
    1016:	cb a8       	ldd	r12, Y+51	; 0x33
    1018:	dc a8       	ldd	r13, Y+52	; 0x34
    101a:	c6 01       	movw	r24, r12
    101c:	aa 27       	eor	r26, r26
    101e:	bb 27       	eor	r27, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	a8 2a       	or	r10, r24
    1026:	b9 2a       	or	r11, r25
    1028:	ca 2a       	or	r12, r26
    102a:	db 2a       	or	r13, r27
    102c:	a2 16       	cp	r10, r18
    102e:	b3 06       	cpc	r11, r19
    1030:	c4 06       	cpc	r12, r20
    1032:	d5 06       	cpc	r13, r21
    1034:	90 f4       	brcc	.+36     	; 0x105a <__umoddi3+0x286>
    1036:	a2 0c       	add	r10, r2
    1038:	b3 1c       	adc	r11, r3
    103a:	c4 1c       	adc	r12, r4
    103c:	d5 1c       	adc	r13, r5
    103e:	a2 14       	cp	r10, r2
    1040:	b3 04       	cpc	r11, r3
    1042:	c4 04       	cpc	r12, r4
    1044:	d5 04       	cpc	r13, r5
    1046:	48 f0       	brcs	.+18     	; 0x105a <__umoddi3+0x286>
    1048:	a2 16       	cp	r10, r18
    104a:	b3 06       	cpc	r11, r19
    104c:	c4 06       	cpc	r12, r20
    104e:	d5 06       	cpc	r13, r21
    1050:	20 f4       	brcc	.+8      	; 0x105a <__umoddi3+0x286>
    1052:	a2 0c       	add	r10, r2
    1054:	b3 1c       	adc	r11, r3
    1056:	c4 1c       	adc	r12, r4
    1058:	d5 1c       	adc	r13, r5
    105a:	a2 1a       	sub	r10, r18
    105c:	b3 0a       	sbc	r11, r19
    105e:	c4 0a       	sbc	r12, r20
    1060:	d5 0a       	sbc	r13, r21
    1062:	c6 01       	movw	r24, r12
    1064:	b5 01       	movw	r22, r10
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    106e:	7b 01       	movw	r14, r22
    1070:	8c 01       	movw	r16, r24
    1072:	c6 01       	movw	r24, r12
    1074:	b5 01       	movw	r22, r10
    1076:	a4 01       	movw	r20, r8
    1078:	93 01       	movw	r18, r6
    107a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	21 96       	adiw	r28, 0x01	; 1
    1084:	2c ad       	ldd	r18, Y+60	; 0x3c
    1086:	3d ad       	ldd	r19, Y+61	; 0x3d
    1088:	4e ad       	ldd	r20, Y+62	; 0x3e
    108a:	5f ad       	ldd	r21, Y+63	; 0x3f
    108c:	21 97       	sbiw	r28, 0x01	; 1
    108e:	ba c1       	rjmp	.+884    	; 0x1404 <__umoddi3+0x630>
    1090:	21 14       	cp	r2, r1
    1092:	31 04       	cpc	r3, r1
    1094:	41 04       	cpc	r4, r1
    1096:	51 04       	cpc	r5, r1
    1098:	71 f4       	brne	.+28     	; 0x10b6 <__umoddi3+0x2e2>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    10ae:	c9 01       	movw	r24, r18
    10b0:	da 01       	movw	r26, r20
    10b2:	1c 01       	movw	r2, r24
    10b4:	2d 01       	movw	r4, r26
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	20 16       	cp	r2, r16
    10ba:	00 e0       	ldi	r16, 0x00	; 0
    10bc:	30 06       	cpc	r3, r16
    10be:	01 e0       	ldi	r16, 0x01	; 1
    10c0:	40 06       	cpc	r4, r16
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	50 06       	cpc	r5, r16
    10c6:	88 f4       	brcc	.+34     	; 0x10ea <__umoddi3+0x316>
    10c8:	1f ef       	ldi	r17, 0xFF	; 255
    10ca:	21 16       	cp	r2, r17
    10cc:	31 04       	cpc	r3, r1
    10ce:	41 04       	cpc	r4, r1
    10d0:	51 04       	cpc	r5, r1
    10d2:	39 f0       	breq	.+14     	; 0x10e2 <__umoddi3+0x30e>
    10d4:	30 f0       	brcs	.+12     	; 0x10e2 <__umoddi3+0x30e>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	e6 2e       	mov	r14, r22
    10da:	f1 2c       	mov	r15, r1
    10dc:	01 2d       	mov	r16, r1
    10de:	11 2d       	mov	r17, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <__umoddi3+0x33e>
    10e2:	ee 24       	eor	r14, r14
    10e4:	ff 24       	eor	r15, r15
    10e6:	87 01       	movw	r16, r14
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <__umoddi3+0x33e>
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	24 16       	cp	r2, r20
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	34 06       	cpc	r3, r20
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	44 06       	cpc	r4, r20
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	54 06       	cpc	r5, r20
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <__umoddi3+0x334>
    10fc:	58 e1       	ldi	r21, 0x18	; 24
    10fe:	e5 2e       	mov	r14, r21
    1100:	f1 2c       	mov	r15, r1
    1102:	01 2d       	mov	r16, r1
    1104:	11 2d       	mov	r17, r1
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <__umoddi3+0x33e>
    1108:	40 e1       	ldi	r20, 0x10	; 16
    110a:	e4 2e       	mov	r14, r20
    110c:	f1 2c       	mov	r15, r1
    110e:	01 2d       	mov	r16, r1
    1110:	11 2d       	mov	r17, r1
    1112:	d2 01       	movw	r26, r4
    1114:	c1 01       	movw	r24, r2
    1116:	0e 2c       	mov	r0, r14
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <__umoddi3+0x34e>
    111a:	b6 95       	lsr	r27
    111c:	a7 95       	ror	r26
    111e:	97 95       	ror	r25
    1120:	87 95       	ror	r24
    1122:	0a 94       	dec	r0
    1124:	d2 f7       	brpl	.-12     	; 0x111a <__umoddi3+0x346>
    1126:	81 59       	subi	r24, 0x91	; 145
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	30 e2       	ldi	r19, 0x20	; 32
    1130:	a3 2e       	mov	r10, r19
    1132:	b1 2c       	mov	r11, r1
    1134:	c1 2c       	mov	r12, r1
    1136:	d1 2c       	mov	r13, r1
    1138:	d6 01       	movw	r26, r12
    113a:	c5 01       	movw	r24, r10
    113c:	8e 19       	sub	r24, r14
    113e:	9f 09       	sbc	r25, r15
    1140:	a0 0b       	sbc	r26, r16
    1142:	b1 0b       	sbc	r27, r17
    1144:	7c 01       	movw	r14, r24
    1146:	8d 01       	movw	r16, r26
    1148:	e2 1a       	sub	r14, r18
    114a:	f1 08       	sbc	r15, r1
    114c:	01 09       	sbc	r16, r1
    114e:	11 09       	sbc	r17, r1
    1150:	e9 ae       	std	Y+57, r14	; 0x39
    1152:	fa ae       	std	Y+58, r15	; 0x3a
    1154:	0b af       	std	Y+59, r16	; 0x3b
    1156:	1c af       	std	Y+60, r17	; 0x3c
    1158:	e1 14       	cp	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	01 05       	cpc	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	39 f4       	brne	.+14     	; 0x1170 <__umoddi3+0x39c>
    1162:	64 01       	movw	r12, r8
    1164:	53 01       	movw	r10, r6
    1166:	a2 18       	sub	r10, r2
    1168:	b3 08       	sbc	r11, r3
    116a:	c4 08       	sbc	r12, r4
    116c:	d5 08       	sbc	r13, r5
    116e:	e2 c0       	rjmp	.+452    	; 0x1334 <__umoddi3+0x560>
    1170:	f9 ac       	ldd	r15, Y+57	; 0x39
    1172:	68 96       	adiw	r28, 0x18	; 24
    1174:	ff ae       	std	Y+63, r15	; 0x3f
    1176:	68 97       	sbiw	r28, 0x18	; 24
    1178:	0f 2c       	mov	r0, r15
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__umoddi3+0x3b0>
    117c:	22 0c       	add	r2, r2
    117e:	33 1c       	adc	r3, r3
    1180:	44 1c       	adc	r4, r4
    1182:	55 1c       	adc	r5, r5
    1184:	0a 94       	dec	r0
    1186:	d2 f7       	brpl	.-12     	; 0x117c <__umoddi3+0x3a8>
    1188:	8a 2d       	mov	r24, r10
    118a:	8f 19       	sub	r24, r15
    118c:	64 01       	movw	r12, r8
    118e:	53 01       	movw	r10, r6
    1190:	08 2e       	mov	r0, r24
    1192:	04 c0       	rjmp	.+8      	; 0x119c <__umoddi3+0x3c8>
    1194:	d6 94       	lsr	r13
    1196:	c7 94       	ror	r12
    1198:	b7 94       	ror	r11
    119a:	a7 94       	ror	r10
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <__umoddi3+0x3c0>
    11a0:	a4 01       	movw	r20, r8
    11a2:	93 01       	movw	r18, r6
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__umoddi3+0x3da>
    11a6:	22 0f       	add	r18, r18
    11a8:	33 1f       	adc	r19, r19
    11aa:	44 1f       	adc	r20, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	fa 94       	dec	r15
    11b0:	d2 f7       	brpl	.-12     	; 0x11a6 <__umoddi3+0x3d2>
    11b2:	6c 96       	adiw	r28, 0x1c	; 28
    11b4:	6c ac       	ldd	r6, Y+60	; 0x3c
    11b6:	7d ac       	ldd	r7, Y+61	; 0x3d
    11b8:	8e ac       	ldd	r8, Y+62	; 0x3e
    11ba:	9f ac       	ldd	r9, Y+63	; 0x3f
    11bc:	6c 97       	sbiw	r28, 0x1c	; 28
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x3f4>
    11c0:	96 94       	lsr	r9
    11c2:	87 94       	ror	r8
    11c4:	77 94       	ror	r7
    11c6:	67 94       	ror	r6
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x3ec>
    11cc:	84 01       	movw	r16, r8
    11ce:	73 01       	movw	r14, r6
    11d0:	e2 2a       	or	r14, r18
    11d2:	f3 2a       	or	r15, r19
    11d4:	04 2b       	or	r16, r20
    11d6:	15 2b       	or	r17, r21
    11d8:	ed a6       	std	Y+45, r14	; 0x2d
    11da:	fe a6       	std	Y+46, r15	; 0x2e
    11dc:	0f a7       	std	Y+47, r16	; 0x2f
    11de:	18 ab       	std	Y+48, r17	; 0x30
    11e0:	32 01       	movw	r6, r4
    11e2:	88 24       	eor	r8, r8
    11e4:	99 24       	eor	r9, r9
    11e6:	b2 01       	movw	r22, r4
    11e8:	a1 01       	movw	r20, r2
    11ea:	60 70       	andi	r22, 0x00	; 0
    11ec:	70 70       	andi	r23, 0x00	; 0
    11ee:	25 96       	adiw	r28, 0x05	; 5
    11f0:	4c af       	std	Y+60, r20	; 0x3c
    11f2:	5d af       	std	Y+61, r21	; 0x3d
    11f4:	6e af       	std	Y+62, r22	; 0x3e
    11f6:	7f af       	std	Y+63, r23	; 0x3f
    11f8:	25 97       	sbiw	r28, 0x05	; 5
    11fa:	c6 01       	movw	r24, r12
    11fc:	b5 01       	movw	r22, r10
    11fe:	a4 01       	movw	r20, r8
    1200:	93 01       	movw	r18, r6
    1202:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    1206:	7b 01       	movw	r14, r22
    1208:	8c 01       	movw	r16, r24
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	a4 01       	movw	r20, r8
    1210:	93 01       	movw	r18, r6
    1212:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	25 96       	adiw	r28, 0x05	; 5
    121c:	2c ad       	ldd	r18, Y+60	; 0x3c
    121e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1220:	4e ad       	ldd	r20, Y+62	; 0x3e
    1222:	5f ad       	ldd	r21, Y+63	; 0x3f
    1224:	25 97       	sbiw	r28, 0x05	; 5
    1226:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	87 01       	movw	r16, r14
    1230:	ff 24       	eor	r15, r15
    1232:	ee 24       	eor	r14, r14
    1234:	ad a4       	ldd	r10, Y+45	; 0x2d
    1236:	be a4       	ldd	r11, Y+46	; 0x2e
    1238:	cf a4       	ldd	r12, Y+47	; 0x2f
    123a:	d8 a8       	ldd	r13, Y+48	; 0x30
    123c:	c6 01       	movw	r24, r12
    123e:	aa 27       	eor	r26, r26
    1240:	bb 27       	eor	r27, r27
    1242:	5c 01       	movw	r10, r24
    1244:	6d 01       	movw	r12, r26
    1246:	ae 28       	or	r10, r14
    1248:	bf 28       	or	r11, r15
    124a:	c0 2a       	or	r12, r16
    124c:	d1 2a       	or	r13, r17
    124e:	a2 16       	cp	r10, r18
    1250:	b3 06       	cpc	r11, r19
    1252:	c4 06       	cpc	r12, r20
    1254:	d5 06       	cpc	r13, r21
    1256:	90 f4       	brcc	.+36     	; 0x127c <__umoddi3+0x4a8>
    1258:	a2 0c       	add	r10, r2
    125a:	b3 1c       	adc	r11, r3
    125c:	c4 1c       	adc	r12, r4
    125e:	d5 1c       	adc	r13, r5
    1260:	a2 14       	cp	r10, r2
    1262:	b3 04       	cpc	r11, r3
    1264:	c4 04       	cpc	r12, r4
    1266:	d5 04       	cpc	r13, r5
    1268:	48 f0       	brcs	.+18     	; 0x127c <__umoddi3+0x4a8>
    126a:	a2 16       	cp	r10, r18
    126c:	b3 06       	cpc	r11, r19
    126e:	c4 06       	cpc	r12, r20
    1270:	d5 06       	cpc	r13, r21
    1272:	20 f4       	brcc	.+8      	; 0x127c <__umoddi3+0x4a8>
    1274:	a2 0c       	add	r10, r2
    1276:	b3 1c       	adc	r11, r3
    1278:	c4 1c       	adc	r12, r4
    127a:	d5 1c       	adc	r13, r5
    127c:	a2 1a       	sub	r10, r18
    127e:	b3 0a       	sbc	r11, r19
    1280:	c4 0a       	sbc	r12, r20
    1282:	d5 0a       	sbc	r13, r21
    1284:	c6 01       	movw	r24, r12
    1286:	b5 01       	movw	r22, r10
    1288:	a4 01       	movw	r20, r8
    128a:	93 01       	movw	r18, r6
    128c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    1290:	7b 01       	movw	r14, r22
    1292:	8c 01       	movw	r16, r24
    1294:	c6 01       	movw	r24, r12
    1296:	b5 01       	movw	r22, r10
    1298:	a4 01       	movw	r20, r8
    129a:	93 01       	movw	r18, r6
    129c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    12a0:	ca 01       	movw	r24, r20
    12a2:	b9 01       	movw	r22, r18
    12a4:	25 96       	adiw	r28, 0x05	; 5
    12a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    12a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    12aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    12ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ae:	25 97       	sbiw	r28, 0x05	; 5
    12b0:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    12b4:	9b 01       	movw	r18, r22
    12b6:	ac 01       	movw	r20, r24
    12b8:	87 01       	movw	r16, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	ee 24       	eor	r14, r14
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	af a5       	ldd	r26, Y+47	; 0x2f
    12c4:	b8 a9       	ldd	r27, Y+48	; 0x30
    12c6:	a0 70       	andi	r26, 0x00	; 0
    12c8:	b0 70       	andi	r27, 0x00	; 0
    12ca:	57 01       	movw	r10, r14
    12cc:	68 01       	movw	r12, r16
    12ce:	a8 2a       	or	r10, r24
    12d0:	b9 2a       	or	r11, r25
    12d2:	ca 2a       	or	r12, r26
    12d4:	db 2a       	or	r13, r27
    12d6:	a2 16       	cp	r10, r18
    12d8:	b3 06       	cpc	r11, r19
    12da:	c4 06       	cpc	r12, r20
    12dc:	d5 06       	cpc	r13, r21
    12de:	90 f4       	brcc	.+36     	; 0x1304 <__umoddi3+0x530>
    12e0:	a2 0c       	add	r10, r2
    12e2:	b3 1c       	adc	r11, r3
    12e4:	c4 1c       	adc	r12, r4
    12e6:	d5 1c       	adc	r13, r5
    12e8:	a2 14       	cp	r10, r2
    12ea:	b3 04       	cpc	r11, r3
    12ec:	c4 04       	cpc	r12, r4
    12ee:	d5 04       	cpc	r13, r5
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <__umoddi3+0x530>
    12f2:	a2 16       	cp	r10, r18
    12f4:	b3 06       	cpc	r11, r19
    12f6:	c4 06       	cpc	r12, r20
    12f8:	d5 06       	cpc	r13, r21
    12fa:	20 f4       	brcc	.+8      	; 0x1304 <__umoddi3+0x530>
    12fc:	a2 0c       	add	r10, r2
    12fe:	b3 1c       	adc	r11, r3
    1300:	c4 1c       	adc	r12, r4
    1302:	d5 1c       	adc	r13, r5
    1304:	6c 96       	adiw	r28, 0x1c	; 28
    1306:	ec ac       	ldd	r14, Y+60	; 0x3c
    1308:	fd ac       	ldd	r15, Y+61	; 0x3d
    130a:	0e ad       	ldd	r16, Y+62	; 0x3e
    130c:	1f ad       	ldd	r17, Y+63	; 0x3f
    130e:	6c 97       	sbiw	r28, 0x1c	; 28
    1310:	68 96       	adiw	r28, 0x18	; 24
    1312:	0f ac       	ldd	r0, Y+63	; 0x3f
    1314:	68 97       	sbiw	r28, 0x18	; 24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <__umoddi3+0x54c>
    1318:	ee 0c       	add	r14, r14
    131a:	ff 1c       	adc	r15, r15
    131c:	00 1f       	adc	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0a 94       	dec	r0
    1322:	d2 f7       	brpl	.-12     	; 0x1318 <__umoddi3+0x544>
    1324:	e9 aa       	std	Y+49, r14	; 0x31
    1326:	fa aa       	std	Y+50, r15	; 0x32
    1328:	0b ab       	std	Y+51, r16	; 0x33
    132a:	1c ab       	std	Y+52, r17	; 0x34
    132c:	a2 1a       	sub	r10, r18
    132e:	b3 0a       	sbc	r11, r19
    1330:	c4 0a       	sbc	r12, r20
    1332:	d5 0a       	sbc	r13, r21
    1334:	32 01       	movw	r6, r4
    1336:	88 24       	eor	r8, r8
    1338:	99 24       	eor	r9, r9
    133a:	b2 01       	movw	r22, r4
    133c:	a1 01       	movw	r20, r2
    133e:	60 70       	andi	r22, 0x00	; 0
    1340:	70 70       	andi	r23, 0x00	; 0
    1342:	29 96       	adiw	r28, 0x09	; 9
    1344:	4c af       	std	Y+60, r20	; 0x3c
    1346:	5d af       	std	Y+61, r21	; 0x3d
    1348:	6e af       	std	Y+62, r22	; 0x3e
    134a:	7f af       	std	Y+63, r23	; 0x3f
    134c:	29 97       	sbiw	r28, 0x09	; 9
    134e:	c6 01       	movw	r24, r12
    1350:	b5 01       	movw	r22, r10
    1352:	a4 01       	movw	r20, r8
    1354:	93 01       	movw	r18, r6
    1356:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	c6 01       	movw	r24, r12
    1360:	b5 01       	movw	r22, r10
    1362:	a4 01       	movw	r20, r8
    1364:	93 01       	movw	r18, r6
    1366:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	2c ad       	ldd	r18, Y+60	; 0x3c
    1372:	3d ad       	ldd	r19, Y+61	; 0x3d
    1374:	4e ad       	ldd	r20, Y+62	; 0x3e
    1376:	5f ad       	ldd	r21, Y+63	; 0x3f
    1378:	29 97       	sbiw	r28, 0x09	; 9
    137a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	87 01       	movw	r16, r14
    1384:	ff 24       	eor	r15, r15
    1386:	ee 24       	eor	r14, r14
    1388:	a9 a8       	ldd	r10, Y+49	; 0x31
    138a:	ba a8       	ldd	r11, Y+50	; 0x32
    138c:	cb a8       	ldd	r12, Y+51	; 0x33
    138e:	dc a8       	ldd	r13, Y+52	; 0x34
    1390:	c6 01       	movw	r24, r12
    1392:	aa 27       	eor	r26, r26
    1394:	bb 27       	eor	r27, r27
    1396:	57 01       	movw	r10, r14
    1398:	68 01       	movw	r12, r16
    139a:	a8 2a       	or	r10, r24
    139c:	b9 2a       	or	r11, r25
    139e:	ca 2a       	or	r12, r26
    13a0:	db 2a       	or	r13, r27
    13a2:	a2 16       	cp	r10, r18
    13a4:	b3 06       	cpc	r11, r19
    13a6:	c4 06       	cpc	r12, r20
    13a8:	d5 06       	cpc	r13, r21
    13aa:	90 f4       	brcc	.+36     	; 0x13d0 <__umoddi3+0x5fc>
    13ac:	a2 0c       	add	r10, r2
    13ae:	b3 1c       	adc	r11, r3
    13b0:	c4 1c       	adc	r12, r4
    13b2:	d5 1c       	adc	r13, r5
    13b4:	a2 14       	cp	r10, r2
    13b6:	b3 04       	cpc	r11, r3
    13b8:	c4 04       	cpc	r12, r4
    13ba:	d5 04       	cpc	r13, r5
    13bc:	48 f0       	brcs	.+18     	; 0x13d0 <__umoddi3+0x5fc>
    13be:	a2 16       	cp	r10, r18
    13c0:	b3 06       	cpc	r11, r19
    13c2:	c4 06       	cpc	r12, r20
    13c4:	d5 06       	cpc	r13, r21
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <__umoddi3+0x5fc>
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	a4 01       	movw	r20, r8
    13de:	93 01       	movw	r18, r6
    13e0:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    13e4:	7b 01       	movw	r14, r22
    13e6:	8c 01       	movw	r16, r24
    13e8:	c6 01       	movw	r24, r12
    13ea:	b5 01       	movw	r22, r10
    13ec:	a4 01       	movw	r20, r8
    13ee:	93 01       	movw	r18, r6
    13f0:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    13f4:	ca 01       	movw	r24, r20
    13f6:	b9 01       	movw	r22, r18
    13f8:	29 96       	adiw	r28, 0x09	; 9
    13fa:	2c ad       	ldd	r18, Y+60	; 0x3c
    13fc:	3d ad       	ldd	r19, Y+61	; 0x3d
    13fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1400:	5f ad       	ldd	r21, Y+63	; 0x3f
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    1408:	9b 01       	movw	r18, r22
    140a:	ac 01       	movw	r20, r24
    140c:	87 01       	movw	r16, r14
    140e:	ff 24       	eor	r15, r15
    1410:	ee 24       	eor	r14, r14
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	9a a9       	ldd	r25, Y+50	; 0x32
    1416:	ab a9       	ldd	r26, Y+51	; 0x33
    1418:	bc a9       	ldd	r27, Y+52	; 0x34
    141a:	a0 70       	andi	r26, 0x00	; 0
    141c:	b0 70       	andi	r27, 0x00	; 0
    141e:	e8 2a       	or	r14, r24
    1420:	f9 2a       	or	r15, r25
    1422:	0a 2b       	or	r16, r26
    1424:	1b 2b       	or	r17, r27
    1426:	e2 16       	cp	r14, r18
    1428:	f3 06       	cpc	r15, r19
    142a:	04 07       	cpc	r16, r20
    142c:	15 07       	cpc	r17, r21
    142e:	90 f4       	brcc	.+36     	; 0x1454 <__umoddi3+0x680>
    1430:	e2 0c       	add	r14, r2
    1432:	f3 1c       	adc	r15, r3
    1434:	04 1d       	adc	r16, r4
    1436:	15 1d       	adc	r17, r5
    1438:	e2 14       	cp	r14, r2
    143a:	f3 04       	cpc	r15, r3
    143c:	04 05       	cpc	r16, r4
    143e:	15 05       	cpc	r17, r5
    1440:	48 f0       	brcs	.+18     	; 0x1454 <__umoddi3+0x680>
    1442:	e2 16       	cp	r14, r18
    1444:	f3 06       	cpc	r15, r19
    1446:	04 07       	cpc	r16, r20
    1448:	15 07       	cpc	r17, r21
    144a:	20 f4       	brcc	.+8      	; 0x1454 <__umoddi3+0x680>
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 1a       	sub	r14, r18
    1456:	f3 0a       	sbc	r15, r19
    1458:	04 0b       	sbc	r16, r20
    145a:	15 0b       	sbc	r17, r21
    145c:	d8 01       	movw	r26, r16
    145e:	c7 01       	movw	r24, r14
    1460:	09 ac       	ldd	r0, Y+57	; 0x39
    1462:	04 c0       	rjmp	.+8      	; 0x146c <__umoddi3+0x698>
    1464:	b6 95       	lsr	r27
    1466:	a7 95       	ror	r26
    1468:	97 95       	ror	r25
    146a:	87 95       	ror	r24
    146c:	0a 94       	dec	r0
    146e:	d2 f7       	brpl	.-12     	; 0x1464 <__umoddi3+0x690>
    1470:	89 8b       	std	Y+17, r24	; 0x11
    1472:	9a 8b       	std	Y+18, r25	; 0x12
    1474:	ab 8b       	std	Y+19, r26	; 0x13
    1476:	bc 8b       	std	Y+20, r27	; 0x14
    1478:	1d 8a       	std	Y+21, r1	; 0x15
    147a:	1e 8a       	std	Y+22, r1	; 0x16
    147c:	1f 8a       	std	Y+23, r1	; 0x17
    147e:	18 8e       	std	Y+24, r1	; 0x18
    1480:	28 2f       	mov	r18, r24
    1482:	3a 89       	ldd	r19, Y+18	; 0x12
    1484:	4b 89       	ldd	r20, Y+19	; 0x13
    1486:	5c 89       	ldd	r21, Y+20	; 0x14
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	0c c3       	rjmp	.+1560   	; 0x1aa4 <__umoddi3+0xcd0>
    148c:	6a 14       	cp	r6, r10
    148e:	7b 04       	cpc	r7, r11
    1490:	8c 04       	cpc	r8, r12
    1492:	9d 04       	cpc	r9, r13
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__umoddi3+0x6c4>
    1496:	09 c3       	rjmp	.+1554   	; 0x1aaa <__umoddi3+0xcd6>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	a0 16       	cp	r10, r16
    149c:	00 e0       	ldi	r16, 0x00	; 0
    149e:	b0 06       	cpc	r11, r16
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	c0 06       	cpc	r12, r16
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	d0 06       	cpc	r13, r16
    14a8:	88 f4       	brcc	.+34     	; 0x14cc <__umoddi3+0x6f8>
    14aa:	1f ef       	ldi	r17, 0xFF	; 255
    14ac:	a1 16       	cp	r10, r17
    14ae:	b1 04       	cpc	r11, r1
    14b0:	c1 04       	cpc	r12, r1
    14b2:	d1 04       	cpc	r13, r1
    14b4:	39 f0       	breq	.+14     	; 0x14c4 <__umoddi3+0x6f0>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__umoddi3+0x6f0>
    14b8:	28 e0       	ldi	r18, 0x08	; 8
    14ba:	e2 2e       	mov	r14, r18
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	18 c0       	rjmp	.+48     	; 0x14f4 <__umoddi3+0x720>
    14c4:	ee 24       	eor	r14, r14
    14c6:	ff 24       	eor	r15, r15
    14c8:	87 01       	movw	r16, r14
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <__umoddi3+0x720>
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	a4 16       	cp	r10, r20
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	b4 06       	cpc	r11, r20
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	c4 06       	cpc	r12, r20
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	d4 06       	cpc	r13, r20
    14dc:	30 f0       	brcs	.+12     	; 0x14ea <__umoddi3+0x716>
    14de:	98 e1       	ldi	r25, 0x18	; 24
    14e0:	e9 2e       	mov	r14, r25
    14e2:	f1 2c       	mov	r15, r1
    14e4:	01 2d       	mov	r16, r1
    14e6:	11 2d       	mov	r17, r1
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <__umoddi3+0x720>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	e8 2e       	mov	r14, r24
    14ee:	f1 2c       	mov	r15, r1
    14f0:	01 2d       	mov	r16, r1
    14f2:	11 2d       	mov	r17, r1
    14f4:	d6 01       	movw	r26, r12
    14f6:	c5 01       	movw	r24, r10
    14f8:	0e 2c       	mov	r0, r14
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__umoddi3+0x730>
    14fc:	b6 95       	lsr	r27
    14fe:	a7 95       	ror	r26
    1500:	97 95       	ror	r25
    1502:	87 95       	ror	r24
    1504:	0a 94       	dec	r0
    1506:	d2 f7       	brpl	.-12     	; 0x14fc <__umoddi3+0x728>
    1508:	81 59       	subi	r24, 0x91	; 145
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	8e 19       	sub	r24, r14
    151a:	9f 09       	sbc	r25, r15
    151c:	a0 0b       	sbc	r26, r16
    151e:	b1 0b       	sbc	r27, r17
    1520:	82 1b       	sub	r24, r18
    1522:	91 09       	sbc	r25, r1
    1524:	a1 09       	sbc	r26, r1
    1526:	b1 09       	sbc	r27, r1
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 05       	cpc	r26, r1
    152c:	b1 05       	cpc	r27, r1
    152e:	09 f0       	breq	.+2      	; 0x1532 <__umoddi3+0x75e>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <__umoddi3+0x7fc>
    1532:	a6 14       	cp	r10, r6
    1534:	b7 04       	cpc	r11, r7
    1536:	c8 04       	cpc	r12, r8
    1538:	d9 04       	cpc	r13, r9
    153a:	58 f0       	brcs	.+22     	; 0x1552 <__umoddi3+0x77e>
    153c:	6c 96       	adiw	r28, 0x1c	; 28
    153e:	ec ac       	ldd	r14, Y+60	; 0x3c
    1540:	fd ac       	ldd	r15, Y+61	; 0x3d
    1542:	0e ad       	ldd	r16, Y+62	; 0x3e
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	6c 97       	sbiw	r28, 0x1c	; 28
    1548:	e2 14       	cp	r14, r2
    154a:	f3 04       	cpc	r15, r3
    154c:	04 05       	cpc	r16, r4
    154e:	15 05       	cpc	r17, r5
    1550:	68 f1       	brcs	.+90     	; 0x15ac <__umoddi3+0x7d8>
    1552:	6c 96       	adiw	r28, 0x1c	; 28
    1554:	ec ac       	ldd	r14, Y+60	; 0x3c
    1556:	fd ac       	ldd	r15, Y+61	; 0x3d
    1558:	0e ad       	ldd	r16, Y+62	; 0x3e
    155a:	1f ad       	ldd	r17, Y+63	; 0x3f
    155c:	6c 97       	sbiw	r28, 0x1c	; 28
    155e:	e2 18       	sub	r14, r2
    1560:	f3 08       	sbc	r15, r3
    1562:	04 09       	sbc	r16, r4
    1564:	15 09       	sbc	r17, r5
    1566:	a4 01       	movw	r20, r8
    1568:	93 01       	movw	r18, r6
    156a:	2a 19       	sub	r18, r10
    156c:	3b 09       	sbc	r19, r11
    156e:	4c 09       	sbc	r20, r12
    1570:	5d 09       	sbc	r21, r13
    1572:	aa 24       	eor	r10, r10
    1574:	bb 24       	eor	r11, r11
    1576:	65 01       	movw	r12, r10
    1578:	6c 96       	adiw	r28, 0x1c	; 28
    157a:	6c ad       	ldd	r22, Y+60	; 0x3c
    157c:	7d ad       	ldd	r23, Y+61	; 0x3d
    157e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1580:	9f ad       	ldd	r25, Y+63	; 0x3f
    1582:	6c 97       	sbiw	r28, 0x1c	; 28
    1584:	6e 15       	cp	r22, r14
    1586:	7f 05       	cpc	r23, r15
    1588:	80 07       	cpc	r24, r16
    158a:	91 07       	cpc	r25, r17
    158c:	28 f4       	brcc	.+10     	; 0x1598 <__umoddi3+0x7c4>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	ab 2e       	mov	r10, r27
    1592:	b1 2c       	mov	r11, r1
    1594:	c1 2c       	mov	r12, r1
    1596:	d1 2c       	mov	r13, r1
    1598:	da 01       	movw	r26, r20
    159a:	c9 01       	movw	r24, r18
    159c:	8a 19       	sub	r24, r10
    159e:	9b 09       	sbc	r25, r11
    15a0:	ac 09       	sbc	r26, r12
    15a2:	bd 09       	sbc	r27, r13
    15a4:	8d ab       	std	Y+53, r24	; 0x35
    15a6:	9e ab       	std	Y+54, r25	; 0x36
    15a8:	af ab       	std	Y+55, r26	; 0x37
    15aa:	b8 af       	std	Y+56, r27	; 0x38
    15ac:	e9 8a       	std	Y+17, r14	; 0x11
    15ae:	fa 8a       	std	Y+18, r15	; 0x12
    15b0:	0b 8b       	std	Y+19, r16	; 0x13
    15b2:	1c 8b       	std	Y+20, r17	; 0x14
    15b4:	6d a8       	ldd	r6, Y+53	; 0x35
    15b6:	7e a8       	ldd	r7, Y+54	; 0x36
    15b8:	8f a8       	ldd	r8, Y+55	; 0x37
    15ba:	98 ac       	ldd	r9, Y+56	; 0x38
    15bc:	6d 8a       	std	Y+21, r6	; 0x15
    15be:	7e 8a       	std	Y+22, r7	; 0x16
    15c0:	8f 8a       	std	Y+23, r8	; 0x17
    15c2:	98 8e       	std	Y+24, r9	; 0x18
    15c4:	2e 2d       	mov	r18, r14
    15c6:	3a 89       	ldd	r19, Y+18	; 0x12
    15c8:	4b 89       	ldd	r20, Y+19	; 0x13
    15ca:	5c 89       	ldd	r21, Y+20	; 0x14
    15cc:	6d a9       	ldd	r22, Y+53	; 0x35
    15ce:	6a c2       	rjmp	.+1236   	; 0x1aa4 <__umoddi3+0xcd0>
    15d0:	67 96       	adiw	r28, 0x17	; 23
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	67 97       	sbiw	r28, 0x17	; 23
    15d6:	a6 01       	movw	r20, r12
    15d8:	95 01       	movw	r18, r10
    15da:	08 2e       	mov	r0, r24
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__umoddi3+0x812>
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	44 1f       	adc	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	0a 94       	dec	r0
    15e8:	d2 f7       	brpl	.-12     	; 0x15de <__umoddi3+0x80a>
    15ea:	a0 e2       	ldi	r26, 0x20	; 32
    15ec:	aa 2e       	mov	r10, r26
    15ee:	a8 1a       	sub	r10, r24
    15f0:	66 96       	adiw	r28, 0x16	; 22
    15f2:	af ae       	std	Y+63, r10	; 0x3f
    15f4:	66 97       	sbiw	r28, 0x16	; 22
    15f6:	d2 01       	movw	r26, r4
    15f8:	c1 01       	movw	r24, r2
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <__umoddi3+0x830>
    15fc:	b6 95       	lsr	r27
    15fe:	a7 95       	ror	r26
    1600:	97 95       	ror	r25
    1602:	87 95       	ror	r24
    1604:	aa 94       	dec	r10
    1606:	d2 f7       	brpl	.-12     	; 0x15fc <__umoddi3+0x828>
    1608:	6c 01       	movw	r12, r24
    160a:	7d 01       	movw	r14, r26
    160c:	c2 2a       	or	r12, r18
    160e:	d3 2a       	or	r13, r19
    1610:	e4 2a       	or	r14, r20
    1612:	f5 2a       	or	r15, r21
    1614:	c9 a6       	std	Y+41, r12	; 0x29
    1616:	da a6       	std	Y+42, r13	; 0x2a
    1618:	eb a6       	std	Y+43, r14	; 0x2b
    161a:	fc a6       	std	Y+44, r15	; 0x2c
    161c:	82 01       	movw	r16, r4
    161e:	71 01       	movw	r14, r2
    1620:	67 96       	adiw	r28, 0x17	; 23
    1622:	0f ac       	ldd	r0, Y+63	; 0x3f
    1624:	67 97       	sbiw	r28, 0x17	; 23
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <__umoddi3+0x85c>
    1628:	ee 0c       	add	r14, r14
    162a:	ff 1c       	adc	r15, r15
    162c:	00 1f       	adc	r16, r16
    162e:	11 1f       	adc	r17, r17
    1630:	0a 94       	dec	r0
    1632:	d2 f7       	brpl	.-12     	; 0x1628 <__umoddi3+0x854>
    1634:	ed a2       	std	Y+37, r14	; 0x25
    1636:	fe a2       	std	Y+38, r15	; 0x26
    1638:	0f a3       	std	Y+39, r16	; 0x27
    163a:	18 a7       	std	Y+40, r17	; 0x28
    163c:	64 01       	movw	r12, r8
    163e:	53 01       	movw	r10, r6
    1640:	66 96       	adiw	r28, 0x16	; 22
    1642:	0f ac       	ldd	r0, Y+63	; 0x3f
    1644:	66 97       	sbiw	r28, 0x16	; 22
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__umoddi3+0x87c>
    1648:	d6 94       	lsr	r13
    164a:	c7 94       	ror	r12
    164c:	b7 94       	ror	r11
    164e:	a7 94       	ror	r10
    1650:	0a 94       	dec	r0
    1652:	d2 f7       	brpl	.-12     	; 0x1648 <__umoddi3+0x874>
    1654:	a4 01       	movw	r20, r8
    1656:	93 01       	movw	r18, r6
    1658:	67 96       	adiw	r28, 0x17	; 23
    165a:	0f ac       	ldd	r0, Y+63	; 0x3f
    165c:	67 97       	sbiw	r28, 0x17	; 23
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__umoddi3+0x894>
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__umoddi3+0x88c>
    166c:	6c 96       	adiw	r28, 0x1c	; 28
    166e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1670:	9d ad       	ldd	r25, Y+61	; 0x3d
    1672:	ae ad       	ldd	r26, Y+62	; 0x3e
    1674:	bf ad       	ldd	r27, Y+63	; 0x3f
    1676:	6c 97       	sbiw	r28, 0x1c	; 28
    1678:	66 96       	adiw	r28, 0x16	; 22
    167a:	0f ac       	ldd	r0, Y+63	; 0x3f
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__umoddi3+0x8b4>
    1680:	b6 95       	lsr	r27
    1682:	a7 95       	ror	r26
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	0a 94       	dec	r0
    168a:	d2 f7       	brpl	.-12     	; 0x1680 <__umoddi3+0x8ac>
    168c:	3c 01       	movw	r6, r24
    168e:	4d 01       	movw	r8, r26
    1690:	62 2a       	or	r6, r18
    1692:	73 2a       	or	r7, r19
    1694:	84 2a       	or	r8, r20
    1696:	95 2a       	or	r9, r21
    1698:	69 a2       	std	Y+33, r6	; 0x21
    169a:	7a a2       	std	Y+34, r7	; 0x22
    169c:	8b a2       	std	Y+35, r8	; 0x23
    169e:	9c a2       	std	Y+36, r9	; 0x24
    16a0:	6c 96       	adiw	r28, 0x1c	; 28
    16a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    16a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    16a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    16a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    16aa:	6c 97       	sbiw	r28, 0x1c	; 28
    16ac:	67 96       	adiw	r28, 0x17	; 23
    16ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    16b0:	67 97       	sbiw	r28, 0x17	; 23
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__umoddi3+0x8e8>
    16b4:	ee 0c       	add	r14, r14
    16b6:	ff 1c       	adc	r15, r15
    16b8:	00 1f       	adc	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__umoddi3+0x8e0>
    16c0:	ed 8e       	std	Y+29, r14	; 0x1d
    16c2:	fe 8e       	std	Y+30, r15	; 0x1e
    16c4:	0f 8f       	std	Y+31, r16	; 0x1f
    16c6:	18 a3       	std	Y+32, r17	; 0x20
    16c8:	49 a5       	ldd	r20, Y+41	; 0x29
    16ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    16cc:	6b a5       	ldd	r22, Y+43	; 0x2b
    16ce:	7c a5       	ldd	r23, Y+44	; 0x2c
    16d0:	3b 01       	movw	r6, r22
    16d2:	88 24       	eor	r8, r8
    16d4:	99 24       	eor	r9, r9
    16d6:	60 70       	andi	r22, 0x00	; 0
    16d8:	70 70       	andi	r23, 0x00	; 0
    16da:	2d 96       	adiw	r28, 0x0d	; 13
    16dc:	4c af       	std	Y+60, r20	; 0x3c
    16de:	5d af       	std	Y+61, r21	; 0x3d
    16e0:	6e af       	std	Y+62, r22	; 0x3e
    16e2:	7f af       	std	Y+63, r23	; 0x3f
    16e4:	2d 97       	sbiw	r28, 0x0d	; 13
    16e6:	c6 01       	movw	r24, r12
    16e8:	b5 01       	movw	r22, r10
    16ea:	a4 01       	movw	r20, r8
    16ec:	93 01       	movw	r18, r6
    16ee:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    16f2:	7b 01       	movw	r14, r22
    16f4:	8c 01       	movw	r16, r24
    16f6:	c6 01       	movw	r24, r12
    16f8:	b5 01       	movw	r22, r10
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    1702:	c9 01       	movw	r24, r18
    1704:	da 01       	movw	r26, r20
    1706:	1c 01       	movw	r2, r24
    1708:	2d 01       	movw	r4, r26
    170a:	c2 01       	movw	r24, r4
    170c:	b1 01       	movw	r22, r2
    170e:	2d 96       	adiw	r28, 0x0d	; 13
    1710:	2c ad       	ldd	r18, Y+60	; 0x3c
    1712:	3d ad       	ldd	r19, Y+61	; 0x3d
    1714:	4e ad       	ldd	r20, Y+62	; 0x3e
    1716:	5f ad       	ldd	r21, Y+63	; 0x3f
    1718:	2d 97       	sbiw	r28, 0x0d	; 13
    171a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    171e:	9b 01       	movw	r18, r22
    1720:	ac 01       	movw	r20, r24
    1722:	87 01       	movw	r16, r14
    1724:	ff 24       	eor	r15, r15
    1726:	ee 24       	eor	r14, r14
    1728:	a9 a0       	ldd	r10, Y+33	; 0x21
    172a:	ba a0       	ldd	r11, Y+34	; 0x22
    172c:	cb a0       	ldd	r12, Y+35	; 0x23
    172e:	dc a0       	ldd	r13, Y+36	; 0x24
    1730:	c6 01       	movw	r24, r12
    1732:	aa 27       	eor	r26, r26
    1734:	bb 27       	eor	r27, r27
    1736:	57 01       	movw	r10, r14
    1738:	68 01       	movw	r12, r16
    173a:	a8 2a       	or	r10, r24
    173c:	b9 2a       	or	r11, r25
    173e:	ca 2a       	or	r12, r26
    1740:	db 2a       	or	r13, r27
    1742:	a2 16       	cp	r10, r18
    1744:	b3 06       	cpc	r11, r19
    1746:	c4 06       	cpc	r12, r20
    1748:	d5 06       	cpc	r13, r21
    174a:	00 f5       	brcc	.+64     	; 0x178c <__umoddi3+0x9b8>
    174c:	08 94       	sec
    174e:	21 08       	sbc	r2, r1
    1750:	31 08       	sbc	r3, r1
    1752:	41 08       	sbc	r4, r1
    1754:	51 08       	sbc	r5, r1
    1756:	e9 a4       	ldd	r14, Y+41	; 0x29
    1758:	fa a4       	ldd	r15, Y+42	; 0x2a
    175a:	0b a5       	ldd	r16, Y+43	; 0x2b
    175c:	1c a5       	ldd	r17, Y+44	; 0x2c
    175e:	ae 0c       	add	r10, r14
    1760:	bf 1c       	adc	r11, r15
    1762:	c0 1e       	adc	r12, r16
    1764:	d1 1e       	adc	r13, r17
    1766:	ae 14       	cp	r10, r14
    1768:	bf 04       	cpc	r11, r15
    176a:	c0 06       	cpc	r12, r16
    176c:	d1 06       	cpc	r13, r17
    176e:	70 f0       	brcs	.+28     	; 0x178c <__umoddi3+0x9b8>
    1770:	a2 16       	cp	r10, r18
    1772:	b3 06       	cpc	r11, r19
    1774:	c4 06       	cpc	r12, r20
    1776:	d5 06       	cpc	r13, r21
    1778:	48 f4       	brcc	.+18     	; 0x178c <__umoddi3+0x9b8>
    177a:	08 94       	sec
    177c:	21 08       	sbc	r2, r1
    177e:	31 08       	sbc	r3, r1
    1780:	41 08       	sbc	r4, r1
    1782:	51 08       	sbc	r5, r1
    1784:	ae 0c       	add	r10, r14
    1786:	bf 1c       	adc	r11, r15
    1788:	c0 1e       	adc	r12, r16
    178a:	d1 1e       	adc	r13, r17
    178c:	a2 1a       	sub	r10, r18
    178e:	b3 0a       	sbc	r11, r19
    1790:	c4 0a       	sbc	r12, r20
    1792:	d5 0a       	sbc	r13, r21
    1794:	c6 01       	movw	r24, r12
    1796:	b5 01       	movw	r22, r10
    1798:	a4 01       	movw	r20, r8
    179a:	93 01       	movw	r18, r6
    179c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    17a0:	7b 01       	movw	r14, r22
    17a2:	8c 01       	movw	r16, r24
    17a4:	c6 01       	movw	r24, r12
    17a6:	b5 01       	movw	r22, r10
    17a8:	a4 01       	movw	r20, r8
    17aa:	93 01       	movw	r18, r6
    17ac:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    17b0:	c9 01       	movw	r24, r18
    17b2:	da 01       	movw	r26, r20
    17b4:	3c 01       	movw	r6, r24
    17b6:	4d 01       	movw	r8, r26
    17b8:	c4 01       	movw	r24, r8
    17ba:	b3 01       	movw	r22, r6
    17bc:	2d 96       	adiw	r28, 0x0d	; 13
    17be:	2c ad       	ldd	r18, Y+60	; 0x3c
    17c0:	3d ad       	ldd	r19, Y+61	; 0x3d
    17c2:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c4:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c6:	2d 97       	sbiw	r28, 0x0d	; 13
    17c8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	87 01       	movw	r16, r14
    17d2:	ff 24       	eor	r15, r15
    17d4:	ee 24       	eor	r14, r14
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	ab a1       	ldd	r26, Y+35	; 0x23
    17dc:	bc a1       	ldd	r27, Y+36	; 0x24
    17de:	a0 70       	andi	r26, 0x00	; 0
    17e0:	b0 70       	andi	r27, 0x00	; 0
    17e2:	57 01       	movw	r10, r14
    17e4:	68 01       	movw	r12, r16
    17e6:	a8 2a       	or	r10, r24
    17e8:	b9 2a       	or	r11, r25
    17ea:	ca 2a       	or	r12, r26
    17ec:	db 2a       	or	r13, r27
    17ee:	a2 16       	cp	r10, r18
    17f0:	b3 06       	cpc	r11, r19
    17f2:	c4 06       	cpc	r12, r20
    17f4:	d5 06       	cpc	r13, r21
    17f6:	00 f5       	brcc	.+64     	; 0x1838 <__umoddi3+0xa64>
    17f8:	08 94       	sec
    17fa:	61 08       	sbc	r6, r1
    17fc:	71 08       	sbc	r7, r1
    17fe:	81 08       	sbc	r8, r1
    1800:	91 08       	sbc	r9, r1
    1802:	69 a5       	ldd	r22, Y+41	; 0x29
    1804:	7a a5       	ldd	r23, Y+42	; 0x2a
    1806:	8b a5       	ldd	r24, Y+43	; 0x2b
    1808:	9c a5       	ldd	r25, Y+44	; 0x2c
    180a:	a6 0e       	add	r10, r22
    180c:	b7 1e       	adc	r11, r23
    180e:	c8 1e       	adc	r12, r24
    1810:	d9 1e       	adc	r13, r25
    1812:	a6 16       	cp	r10, r22
    1814:	b7 06       	cpc	r11, r23
    1816:	c8 06       	cpc	r12, r24
    1818:	d9 06       	cpc	r13, r25
    181a:	70 f0       	brcs	.+28     	; 0x1838 <__umoddi3+0xa64>
    181c:	a2 16       	cp	r10, r18
    181e:	b3 06       	cpc	r11, r19
    1820:	c4 06       	cpc	r12, r20
    1822:	d5 06       	cpc	r13, r21
    1824:	48 f4       	brcc	.+18     	; 0x1838 <__umoddi3+0xa64>
    1826:	08 94       	sec
    1828:	61 08       	sbc	r6, r1
    182a:	71 08       	sbc	r7, r1
    182c:	81 08       	sbc	r8, r1
    182e:	91 08       	sbc	r9, r1
    1830:	a6 0e       	add	r10, r22
    1832:	b7 1e       	adc	r11, r23
    1834:	c8 1e       	adc	r12, r24
    1836:	d9 1e       	adc	r13, r25
    1838:	d6 01       	movw	r26, r12
    183a:	c5 01       	movw	r24, r10
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	a4 0b       	sbc	r26, r20
    1842:	b5 0b       	sbc	r27, r21
    1844:	89 8f       	std	Y+25, r24	; 0x19
    1846:	9a 8f       	std	Y+26, r25	; 0x1a
    1848:	ab 8f       	std	Y+27, r26	; 0x1b
    184a:	bc 8f       	std	Y+28, r27	; 0x1c
    184c:	d1 01       	movw	r26, r2
    184e:	99 27       	eor	r25, r25
    1850:	88 27       	eor	r24, r24
    1852:	84 01       	movw	r16, r8
    1854:	73 01       	movw	r14, r6
    1856:	e8 2a       	or	r14, r24
    1858:	f9 2a       	or	r15, r25
    185a:	0a 2b       	or	r16, r26
    185c:	1b 2b       	or	r17, r27
    185e:	4f ef       	ldi	r20, 0xFF	; 255
    1860:	a4 2e       	mov	r10, r20
    1862:	4f ef       	ldi	r20, 0xFF	; 255
    1864:	b4 2e       	mov	r11, r20
    1866:	c1 2c       	mov	r12, r1
    1868:	d1 2c       	mov	r13, r1
    186a:	ae 20       	and	r10, r14
    186c:	bf 20       	and	r11, r15
    186e:	c0 22       	and	r12, r16
    1870:	d1 22       	and	r13, r17
    1872:	78 01       	movw	r14, r16
    1874:	00 27       	eor	r16, r16
    1876:	11 27       	eor	r17, r17
    1878:	6d a0       	ldd	r6, Y+37	; 0x25
    187a:	7e a0       	ldd	r7, Y+38	; 0x26
    187c:	8f a0       	ldd	r8, Y+39	; 0x27
    187e:	98 a4       	ldd	r9, Y+40	; 0x28
    1880:	4f ef       	ldi	r20, 0xFF	; 255
    1882:	5f ef       	ldi	r21, 0xFF	; 255
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	64 22       	and	r6, r20
    188a:	75 22       	and	r7, r21
    188c:	86 22       	and	r8, r22
    188e:	97 22       	and	r9, r23
    1890:	8d a1       	ldd	r24, Y+37	; 0x25
    1892:	9e a1       	ldd	r25, Y+38	; 0x26
    1894:	af a1       	ldd	r26, Y+39	; 0x27
    1896:	b8 a5       	ldd	r27, Y+40	; 0x28
    1898:	bd 01       	movw	r22, r26
    189a:	88 27       	eor	r24, r24
    189c:	99 27       	eor	r25, r25
    189e:	65 96       	adiw	r28, 0x15	; 21
    18a0:	6c af       	std	Y+60, r22	; 0x3c
    18a2:	7d af       	std	Y+61, r23	; 0x3d
    18a4:	8e af       	std	Y+62, r24	; 0x3e
    18a6:	9f af       	std	Y+63, r25	; 0x3f
    18a8:	65 97       	sbiw	r28, 0x15	; 21
    18aa:	c6 01       	movw	r24, r12
    18ac:	b5 01       	movw	r22, r10
    18ae:	a4 01       	movw	r20, r8
    18b0:	93 01       	movw	r18, r6
    18b2:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    18b6:	61 96       	adiw	r28, 0x11	; 17
    18b8:	6c af       	std	Y+60, r22	; 0x3c
    18ba:	7d af       	std	Y+61, r23	; 0x3d
    18bc:	8e af       	std	Y+62, r24	; 0x3e
    18be:	9f af       	std	Y+63, r25	; 0x3f
    18c0:	61 97       	sbiw	r28, 0x11	; 17
    18c2:	c6 01       	movw	r24, r12
    18c4:	b5 01       	movw	r22, r10
    18c6:	65 96       	adiw	r28, 0x15	; 21
    18c8:	2c ad       	ldd	r18, Y+60	; 0x3c
    18ca:	3d ad       	ldd	r19, Y+61	; 0x3d
    18cc:	4e ad       	ldd	r20, Y+62	; 0x3e
    18ce:	5f ad       	ldd	r21, Y+63	; 0x3f
    18d0:	65 97       	sbiw	r28, 0x15	; 21
    18d2:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    18d6:	1b 01       	movw	r2, r22
    18d8:	2c 01       	movw	r4, r24
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a4 01       	movw	r20, r8
    18e0:	93 01       	movw	r18, r6
    18e2:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    18e6:	5b 01       	movw	r10, r22
    18e8:	6c 01       	movw	r12, r24
    18ea:	c8 01       	movw	r24, r16
    18ec:	b7 01       	movw	r22, r14
    18ee:	65 96       	adiw	r28, 0x15	; 21
    18f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18f8:	65 97       	sbiw	r28, 0x15	; 21
    18fa:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    18fe:	7b 01       	movw	r14, r22
    1900:	8c 01       	movw	r16, r24
    1902:	a6 01       	movw	r20, r12
    1904:	95 01       	movw	r18, r10
    1906:	22 0d       	add	r18, r2
    1908:	33 1d       	adc	r19, r3
    190a:	44 1d       	adc	r20, r4
    190c:	55 1d       	adc	r21, r5
    190e:	61 96       	adiw	r28, 0x11	; 17
    1910:	6c ac       	ldd	r6, Y+60	; 0x3c
    1912:	7d ac       	ldd	r7, Y+61	; 0x3d
    1914:	8e ac       	ldd	r8, Y+62	; 0x3e
    1916:	9f ac       	ldd	r9, Y+63	; 0x3f
    1918:	61 97       	sbiw	r28, 0x11	; 17
    191a:	c4 01       	movw	r24, r8
    191c:	aa 27       	eor	r26, r26
    191e:	bb 27       	eor	r27, r27
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	4a 1f       	adc	r20, r26
    1926:	5b 1f       	adc	r21, r27
    1928:	2a 15       	cp	r18, r10
    192a:	3b 05       	cpc	r19, r11
    192c:	4c 05       	cpc	r20, r12
    192e:	5d 05       	cpc	r21, r13
    1930:	48 f4       	brcc	.+18     	; 0x1944 <__umoddi3+0xb70>
    1932:	81 2c       	mov	r8, r1
    1934:	91 2c       	mov	r9, r1
    1936:	e1 e0       	ldi	r30, 0x01	; 1
    1938:	ae 2e       	mov	r10, r30
    193a:	b1 2c       	mov	r11, r1
    193c:	e8 0c       	add	r14, r8
    193e:	f9 1c       	adc	r15, r9
    1940:	0a 1d       	adc	r16, r10
    1942:	1b 1d       	adc	r17, r11
    1944:	ca 01       	movw	r24, r20
    1946:	aa 27       	eor	r26, r26
    1948:	bb 27       	eor	r27, r27
    194a:	57 01       	movw	r10, r14
    194c:	68 01       	movw	r12, r16
    194e:	a8 0e       	add	r10, r24
    1950:	b9 1e       	adc	r11, r25
    1952:	ca 1e       	adc	r12, r26
    1954:	db 1e       	adc	r13, r27
    1956:	a9 01       	movw	r20, r18
    1958:	33 27       	eor	r19, r19
    195a:	22 27       	eor	r18, r18
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1960:	9d ad       	ldd	r25, Y+61	; 0x3d
    1962:	ae ad       	ldd	r26, Y+62	; 0x3e
    1964:	bf ad       	ldd	r27, Y+63	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	a0 70       	andi	r26, 0x00	; 0
    196a:	b0 70       	andi	r27, 0x00	; 0
    196c:	28 0f       	add	r18, r24
    196e:	39 1f       	adc	r19, r25
    1970:	4a 1f       	adc	r20, r26
    1972:	5b 1f       	adc	r21, r27
    1974:	e9 8c       	ldd	r14, Y+25	; 0x19
    1976:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1978:	0b 8d       	ldd	r16, Y+27	; 0x1b
    197a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	70 f0       	brcs	.+28     	; 0x19a2 <__umoddi3+0xbce>
    1986:	ae 14       	cp	r10, r14
    1988:	bf 04       	cpc	r11, r15
    198a:	c0 06       	cpc	r12, r16
    198c:	d1 06       	cpc	r13, r17
    198e:	69 f5       	brne	.+90     	; 0x19ea <__umoddi3+0xc16>
    1990:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1992:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1996:	98 a1       	ldd	r25, Y+32	; 0x20
    1998:	62 17       	cp	r22, r18
    199a:	73 07       	cpc	r23, r19
    199c:	84 07       	cpc	r24, r20
    199e:	95 07       	cpc	r25, r21
    19a0:	20 f5       	brcc	.+72     	; 0x19ea <__umoddi3+0xc16>
    19a2:	da 01       	movw	r26, r20
    19a4:	c9 01       	movw	r24, r18
    19a6:	6d a0       	ldd	r6, Y+37	; 0x25
    19a8:	7e a0       	ldd	r7, Y+38	; 0x26
    19aa:	8f a0       	ldd	r8, Y+39	; 0x27
    19ac:	98 a4       	ldd	r9, Y+40	; 0x28
    19ae:	86 19       	sub	r24, r6
    19b0:	97 09       	sbc	r25, r7
    19b2:	a8 09       	sbc	r26, r8
    19b4:	b9 09       	sbc	r27, r9
    19b6:	e9 a4       	ldd	r14, Y+41	; 0x29
    19b8:	fa a4       	ldd	r15, Y+42	; 0x2a
    19ba:	0b a5       	ldd	r16, Y+43	; 0x2b
    19bc:	1c a5       	ldd	r17, Y+44	; 0x2c
    19be:	ae 18       	sub	r10, r14
    19c0:	bf 08       	sbc	r11, r15
    19c2:	c0 0a       	sbc	r12, r16
    19c4:	d1 0a       	sbc	r13, r17
    19c6:	ee 24       	eor	r14, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	87 01       	movw	r16, r14
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	4a 07       	cpc	r20, r26
    19d2:	5b 07       	cpc	r21, r27
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <__umoddi3+0xc0c>
    19d6:	21 e0       	ldi	r18, 0x01	; 1
    19d8:	e2 2e       	mov	r14, r18
    19da:	f1 2c       	mov	r15, r1
    19dc:	01 2d       	mov	r16, r1
    19de:	11 2d       	mov	r17, r1
    19e0:	ae 18       	sub	r10, r14
    19e2:	bf 08       	sbc	r11, r15
    19e4:	c0 0a       	sbc	r12, r16
    19e6:	d1 0a       	sbc	r13, r17
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__umoddi3+0xc1a>
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	6d 8c       	ldd	r6, Y+29	; 0x1d
    19f0:	7e 8c       	ldd	r7, Y+30	; 0x1e
    19f2:	8f 8c       	ldd	r8, Y+31	; 0x1f
    19f4:	98 a0       	ldd	r9, Y+32	; 0x20
    19f6:	68 1a       	sub	r6, r24
    19f8:	79 0a       	sbc	r7, r25
    19fa:	8a 0a       	sbc	r8, r26
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	49 8d       	ldd	r20, Y+25	; 0x19
    1a00:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a06:	4a 19       	sub	r20, r10
    1a08:	5b 09       	sbc	r21, r11
    1a0a:	6c 09       	sbc	r22, r12
    1a0c:	7d 09       	sbc	r23, r13
    1a0e:	5a 01       	movw	r10, r20
    1a10:	6b 01       	movw	r12, r22
    1a12:	22 24       	eor	r2, r2
    1a14:	33 24       	eor	r3, r3
    1a16:	21 01       	movw	r4, r2
    1a18:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a1a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a20:	66 15       	cp	r22, r6
    1a22:	77 05       	cpc	r23, r7
    1a24:	88 05       	cpc	r24, r8
    1a26:	99 05       	cpc	r25, r9
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <__umoddi3+0xc60>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	28 2e       	mov	r2, r24
    1a2e:	31 2c       	mov	r3, r1
    1a30:	41 2c       	mov	r4, r1
    1a32:	51 2c       	mov	r5, r1
    1a34:	86 01       	movw	r16, r12
    1a36:	75 01       	movw	r14, r10
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	66 96       	adiw	r28, 0x16	; 22
    1a46:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a48:	66 97       	sbiw	r28, 0x16	; 22
    1a4a:	04 c0       	rjmp	.+8      	; 0x1a54 <__umoddi3+0xc80>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	55 1f       	adc	r21, r21
    1a54:	0a 94       	dec	r0
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__umoddi3+0xc78>
    1a58:	d4 01       	movw	r26, r8
    1a5a:	c3 01       	movw	r24, r6
    1a5c:	67 96       	adiw	r28, 0x17	; 23
    1a5e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a60:	67 97       	sbiw	r28, 0x17	; 23
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <__umoddi3+0xc98>
    1a64:	b6 95       	lsr	r27
    1a66:	a7 95       	ror	r26
    1a68:	97 95       	ror	r25
    1a6a:	87 95       	ror	r24
    1a6c:	0a 94       	dec	r0
    1a6e:	d2 f7       	brpl	.-12     	; 0x1a64 <__umoddi3+0xc90>
    1a70:	28 2b       	or	r18, r24
    1a72:	39 2b       	or	r19, r25
    1a74:	4a 2b       	or	r20, r26
    1a76:	5b 2b       	or	r21, r27
    1a78:	29 8b       	std	Y+17, r18	; 0x11
    1a7a:	3a 8b       	std	Y+18, r19	; 0x12
    1a7c:	4b 8b       	std	Y+19, r20	; 0x13
    1a7e:	5c 8b       	std	Y+20, r21	; 0x14
    1a80:	67 96       	adiw	r28, 0x17	; 23
    1a82:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a84:	67 97       	sbiw	r28, 0x17	; 23
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <__umoddi3+0xcbc>
    1a88:	16 95       	lsr	r17
    1a8a:	07 95       	ror	r16
    1a8c:	f7 94       	ror	r15
    1a8e:	e7 94       	ror	r14
    1a90:	0a 94       	dec	r0
    1a92:	d2 f7       	brpl	.-12     	; 0x1a88 <__umoddi3+0xcb4>
    1a94:	ed 8a       	std	Y+21, r14	; 0x15
    1a96:	fe 8a       	std	Y+22, r15	; 0x16
    1a98:	0f 8b       	std	Y+23, r16	; 0x17
    1a9a:	18 8f       	std	Y+24, r17	; 0x18
    1a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1aa0:	5c 89       	ldd	r21, Y+20	; 0x14
    1aa2:	6e 2d       	mov	r22, r14
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	c5 5a       	subi	r28, 0xA5	; 165
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	e2 e1       	ldi	r30, 0x12	; 18
    1ab0:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__>

00001ab4 <_fpadd_parts>:
    1ab4:	a0 e0       	ldi	r26, 0x00	; 0
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e0 e6       	ldi	r30, 0x60	; 96
    1aba:	fd e0       	ldi	r31, 0x0D	; 13
    1abc:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	fa 01       	movw	r30, r20
    1ac6:	9c 91       	ld	r25, X
    1ac8:	92 30       	cpi	r25, 0x02	; 2
    1aca:	08 f4       	brcc	.+2      	; 0x1ace <_fpadd_parts+0x1a>
    1acc:	39 c1       	rjmp	.+626    	; 0x1d40 <_fpadd_parts+0x28c>
    1ace:	eb 01       	movw	r28, r22
    1ad0:	88 81       	ld	r24, Y
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <_fpadd_parts+0x24>
    1ad6:	33 c1       	rjmp	.+614    	; 0x1d3e <_fpadd_parts+0x28a>
    1ad8:	94 30       	cpi	r25, 0x04	; 4
    1ada:	69 f4       	brne	.+26     	; 0x1af6 <_fpadd_parts+0x42>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <_fpadd_parts+0x2e>
    1ae0:	2f c1       	rjmp	.+606    	; 0x1d40 <_fpadd_parts+0x28c>
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 91       	ld	r25, X
    1ae6:	11 97       	sbiw	r26, 0x01	; 1
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	98 17       	cp	r25, r24
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <_fpadd_parts+0x3c>
    1aee:	28 c1       	rjmp	.+592    	; 0x1d40 <_fpadd_parts+0x28c>
    1af0:	a7 e6       	ldi	r26, 0x67	; 103
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	25 c1       	rjmp	.+586    	; 0x1d40 <_fpadd_parts+0x28c>
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	09 f4       	brne	.+2      	; 0x1afc <_fpadd_parts+0x48>
    1afa:	21 c1       	rjmp	.+578    	; 0x1d3e <_fpadd_parts+0x28a>
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	a9 f4       	brne	.+42     	; 0x1b2a <_fpadd_parts+0x76>
    1b00:	92 30       	cpi	r25, 0x02	; 2
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <_fpadd_parts+0x52>
    1b04:	1d c1       	rjmp	.+570    	; 0x1d40 <_fpadd_parts+0x28c>
    1b06:	9a 01       	movw	r18, r20
    1b08:	ad 01       	movw	r20, r26
    1b0a:	88 e0       	ldi	r24, 0x08	; 8
    1b0c:	ea 01       	movw	r28, r20
    1b0e:	09 90       	ld	r0, Y+
    1b10:	ae 01       	movw	r20, r28
    1b12:	e9 01       	movw	r28, r18
    1b14:	09 92       	st	Y+, r0
    1b16:	9e 01       	movw	r18, r28
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	c1 f7       	brne	.-16     	; 0x1b0c <_fpadd_parts+0x58>
    1b1c:	e2 01       	movw	r28, r4
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	11 96       	adiw	r26, 0x01	; 1
    1b22:	9c 91       	ld	r25, X
    1b24:	89 23       	and	r24, r25
    1b26:	81 83       	std	Z+1, r24	; 0x01
    1b28:	08 c1       	rjmp	.+528    	; 0x1d3a <_fpadd_parts+0x286>
    1b2a:	92 30       	cpi	r25, 0x02	; 2
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <_fpadd_parts+0x7c>
    1b2e:	07 c1       	rjmp	.+526    	; 0x1d3e <_fpadd_parts+0x28a>
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	2d 90       	ld	r2, X+
    1b34:	3c 90       	ld	r3, X
    1b36:	13 97       	sbiw	r26, 0x03	; 3
    1b38:	eb 01       	movw	r28, r22
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	ad 90       	ld	r10, X+
    1b42:	bd 90       	ld	r11, X+
    1b44:	cd 90       	ld	r12, X+
    1b46:	dc 90       	ld	r13, X
    1b48:	17 97       	sbiw	r26, 0x07	; 7
    1b4a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4e:	0e 81       	ldd	r16, Y+6	; 0x06
    1b50:	1f 81       	ldd	r17, Y+7	; 0x07
    1b52:	91 01       	movw	r18, r2
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	b9 01       	movw	r22, r18
    1b5a:	37 ff       	sbrs	r19, 7
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <_fpadd_parts+0xb2>
    1b5e:	66 27       	eor	r22, r22
    1b60:	77 27       	eor	r23, r23
    1b62:	62 1b       	sub	r22, r18
    1b64:	73 0b       	sbc	r23, r19
    1b66:	60 32       	cpi	r22, 0x20	; 32
    1b68:	71 05       	cpc	r23, r1
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <_fpadd_parts+0xba>
    1b6c:	61 c0       	rjmp	.+194    	; 0x1c30 <_fpadd_parts+0x17c>
    1b6e:	12 16       	cp	r1, r18
    1b70:	13 06       	cpc	r1, r19
    1b72:	6c f5       	brge	.+90     	; 0x1bce <_fpadd_parts+0x11a>
    1b74:	37 01       	movw	r6, r14
    1b76:	48 01       	movw	r8, r16
    1b78:	06 2e       	mov	r0, r22
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <_fpadd_parts+0xd0>
    1b7c:	96 94       	lsr	r9
    1b7e:	87 94       	ror	r8
    1b80:	77 94       	ror	r7
    1b82:	67 94       	ror	r6
    1b84:	0a 94       	dec	r0
    1b86:	d2 f7       	brpl	.-12     	; 0x1b7c <_fpadd_parts+0xc8>
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	50 e0       	ldi	r21, 0x00	; 0
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <_fpadd_parts+0xe6>
    1b92:	22 0f       	add	r18, r18
    1b94:	33 1f       	adc	r19, r19
    1b96:	44 1f       	adc	r20, r20
    1b98:	55 1f       	adc	r21, r21
    1b9a:	6a 95       	dec	r22
    1b9c:	d2 f7       	brpl	.-12     	; 0x1b92 <_fpadd_parts+0xde>
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	30 40       	sbci	r19, 0x00	; 0
    1ba2:	40 40       	sbci	r20, 0x00	; 0
    1ba4:	50 40       	sbci	r21, 0x00	; 0
    1ba6:	2e 21       	and	r18, r14
    1ba8:	3f 21       	and	r19, r15
    1baa:	40 23       	and	r20, r16
    1bac:	51 23       	and	r21, r17
    1bae:	21 15       	cp	r18, r1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	41 05       	cpc	r20, r1
    1bb4:	51 05       	cpc	r21, r1
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <_fpadd_parts+0x10c>
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	79 01       	movw	r14, r18
    1bc2:	8a 01       	movw	r16, r20
    1bc4:	e6 28       	or	r14, r6
    1bc6:	f7 28       	or	r15, r7
    1bc8:	08 29       	or	r16, r8
    1bca:	19 29       	or	r17, r9
    1bcc:	3c c0       	rjmp	.+120    	; 0x1c46 <_fpadd_parts+0x192>
    1bce:	23 2b       	or	r18, r19
    1bd0:	d1 f1       	breq	.+116    	; 0x1c46 <_fpadd_parts+0x192>
    1bd2:	26 0e       	add	r2, r22
    1bd4:	37 1e       	adc	r3, r23
    1bd6:	35 01       	movw	r6, r10
    1bd8:	46 01       	movw	r8, r12
    1bda:	06 2e       	mov	r0, r22
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <_fpadd_parts+0x132>
    1bde:	96 94       	lsr	r9
    1be0:	87 94       	ror	r8
    1be2:	77 94       	ror	r7
    1be4:	67 94       	ror	r6
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <_fpadd_parts+0x12a>
    1bea:	21 e0       	ldi	r18, 0x01	; 1
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <_fpadd_parts+0x148>
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	44 1f       	adc	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	6a 95       	dec	r22
    1bfe:	d2 f7       	brpl	.-12     	; 0x1bf4 <_fpadd_parts+0x140>
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	30 40       	sbci	r19, 0x00	; 0
    1c04:	40 40       	sbci	r20, 0x00	; 0
    1c06:	50 40       	sbci	r21, 0x00	; 0
    1c08:	2a 21       	and	r18, r10
    1c0a:	3b 21       	and	r19, r11
    1c0c:	4c 21       	and	r20, r12
    1c0e:	5d 21       	and	r21, r13
    1c10:	21 15       	cp	r18, r1
    1c12:	31 05       	cpc	r19, r1
    1c14:	41 05       	cpc	r20, r1
    1c16:	51 05       	cpc	r21, r1
    1c18:	21 f0       	breq	.+8      	; 0x1c22 <_fpadd_parts+0x16e>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	50 e0       	ldi	r21, 0x00	; 0
    1c22:	59 01       	movw	r10, r18
    1c24:	6a 01       	movw	r12, r20
    1c26:	a6 28       	or	r10, r6
    1c28:	b7 28       	or	r11, r7
    1c2a:	c8 28       	or	r12, r8
    1c2c:	d9 28       	or	r13, r9
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <_fpadd_parts+0x192>
    1c30:	82 15       	cp	r24, r2
    1c32:	93 05       	cpc	r25, r3
    1c34:	2c f0       	brlt	.+10     	; 0x1c40 <_fpadd_parts+0x18c>
    1c36:	1c 01       	movw	r2, r24
    1c38:	aa 24       	eor	r10, r10
    1c3a:	bb 24       	eor	r11, r11
    1c3c:	65 01       	movw	r12, r10
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <_fpadd_parts+0x192>
    1c40:	ee 24       	eor	r14, r14
    1c42:	ff 24       	eor	r15, r15
    1c44:	87 01       	movw	r16, r14
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	9c 91       	ld	r25, X
    1c4a:	d2 01       	movw	r26, r4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	8c 91       	ld	r24, X
    1c50:	98 17       	cp	r25, r24
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_fpadd_parts+0x1a2>
    1c54:	45 c0       	rjmp	.+138    	; 0x1ce0 <_fpadd_parts+0x22c>
    1c56:	99 23       	and	r25, r25
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <_fpadd_parts+0x1b4>
    1c5a:	a8 01       	movw	r20, r16
    1c5c:	97 01       	movw	r18, r14
    1c5e:	2a 19       	sub	r18, r10
    1c60:	3b 09       	sbc	r19, r11
    1c62:	4c 09       	sbc	r20, r12
    1c64:	5d 09       	sbc	r21, r13
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <_fpadd_parts+0x1c0>
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	2e 19       	sub	r18, r14
    1c6e:	3f 09       	sbc	r19, r15
    1c70:	40 0b       	sbc	r20, r16
    1c72:	51 0b       	sbc	r21, r17
    1c74:	57 fd       	sbrc	r21, 7
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <_fpadd_parts+0x1d4>
    1c78:	11 82       	std	Z+1, r1	; 0x01
    1c7a:	33 82       	std	Z+3, r3	; 0x03
    1c7c:	22 82       	std	Z+2, r2	; 0x02
    1c7e:	24 83       	std	Z+4, r18	; 0x04
    1c80:	35 83       	std	Z+5, r19	; 0x05
    1c82:	46 83       	std	Z+6, r20	; 0x06
    1c84:	57 83       	std	Z+7, r21	; 0x07
    1c86:	1d c0       	rjmp	.+58     	; 0x1cc2 <_fpadd_parts+0x20e>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	81 83       	std	Z+1, r24	; 0x01
    1c8c:	33 82       	std	Z+3, r3	; 0x03
    1c8e:	22 82       	std	Z+2, r2	; 0x02
    1c90:	88 27       	eor	r24, r24
    1c92:	99 27       	eor	r25, r25
    1c94:	dc 01       	movw	r26, r24
    1c96:	82 1b       	sub	r24, r18
    1c98:	93 0b       	sbc	r25, r19
    1c9a:	a4 0b       	sbc	r26, r20
    1c9c:	b5 0b       	sbc	r27, r21
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05
    1ca2:	a6 83       	std	Z+6, r26	; 0x06
    1ca4:	b7 83       	std	Z+7, r27	; 0x07
    1ca6:	0d c0       	rjmp	.+26     	; 0x1cc2 <_fpadd_parts+0x20e>
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	55 1f       	adc	r21, r21
    1cb0:	24 83       	std	Z+4, r18	; 0x04
    1cb2:	35 83       	std	Z+5, r19	; 0x05
    1cb4:	46 83       	std	Z+6, r20	; 0x06
    1cb6:	57 83       	std	Z+7, r21	; 0x07
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	93 83       	std	Z+3, r25	; 0x03
    1cc0:	82 83       	std	Z+2, r24	; 0x02
    1cc2:	24 81       	ldd	r18, Z+4	; 0x04
    1cc4:	35 81       	ldd	r19, Z+5	; 0x05
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	da 01       	movw	r26, r20
    1ccc:	c9 01       	movw	r24, r18
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b1 09       	sbc	r27, r1
    1cd4:	8f 5f       	subi	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	af 4f       	sbci	r26, 0xFF	; 255
    1cda:	bf 43       	sbci	r27, 0x3F	; 63
    1cdc:	28 f3       	brcs	.-54     	; 0x1ca8 <_fpadd_parts+0x1f4>
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <_fpadd_parts+0x242>
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	33 82       	std	Z+3, r3	; 0x03
    1ce4:	22 82       	std	Z+2, r2	; 0x02
    1ce6:	ea 0c       	add	r14, r10
    1ce8:	fb 1c       	adc	r15, r11
    1cea:	0c 1d       	adc	r16, r12
    1cec:	1d 1d       	adc	r17, r13
    1cee:	e4 82       	std	Z+4, r14	; 0x04
    1cf0:	f5 82       	std	Z+5, r15	; 0x05
    1cf2:	06 83       	std	Z+6, r16	; 0x06
    1cf4:	17 83       	std	Z+7, r17	; 0x07
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	80 83       	st	Z, r24
    1cfa:	24 81       	ldd	r18, Z+4	; 0x04
    1cfc:	35 81       	ldd	r19, Z+5	; 0x05
    1cfe:	46 81       	ldd	r20, Z+6	; 0x06
    1d00:	57 81       	ldd	r21, Z+7	; 0x07
    1d02:	57 ff       	sbrs	r21, 7
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <_fpadd_parts+0x286>
    1d06:	c9 01       	movw	r24, r18
    1d08:	aa 27       	eor	r26, r26
    1d0a:	97 fd       	sbrc	r25, 7
    1d0c:	a0 95       	com	r26
    1d0e:	ba 2f       	mov	r27, r26
    1d10:	81 70       	andi	r24, 0x01	; 1
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	a0 70       	andi	r26, 0x00	; 0
    1d16:	b0 70       	andi	r27, 0x00	; 0
    1d18:	56 95       	lsr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	37 95       	ror	r19
    1d1e:	27 95       	ror	r18
    1d20:	82 2b       	or	r24, r18
    1d22:	93 2b       	or	r25, r19
    1d24:	a4 2b       	or	r26, r20
    1d26:	b5 2b       	or	r27, r21
    1d28:	84 83       	std	Z+4, r24	; 0x04
    1d2a:	95 83       	std	Z+5, r25	; 0x05
    1d2c:	a6 83       	std	Z+6, r26	; 0x06
    1d2e:	b7 83       	std	Z+7, r27	; 0x07
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
    1d3a:	df 01       	movw	r26, r30
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <_fpadd_parts+0x28c>
    1d3e:	d2 01       	movw	r26, r4
    1d40:	cd 01       	movw	r24, r26
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	e2 e1       	ldi	r30, 0x12	; 18
    1d48:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__>

00001d4c <__subsf3>:
    1d4c:	a0 e2       	ldi	r26, 0x20	; 32
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__prologue_saves__+0x18>
    1d58:	69 83       	std	Y+1, r22	; 0x01
    1d5a:	7a 83       	std	Y+2, r23	; 0x02
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	2d 83       	std	Y+5, r18	; 0x05
    1d62:	3e 83       	std	Y+6, r19	; 0x06
    1d64:	4f 83       	std	Y+7, r20	; 0x07
    1d66:	58 87       	std	Y+8, r21	; 0x08
    1d68:	e9 e0       	ldi	r30, 0x09	; 9
    1d6a:	ee 2e       	mov	r14, r30
    1d6c:	f1 2c       	mov	r15, r1
    1d6e:	ec 0e       	add	r14, r28
    1d70:	fd 1e       	adc	r15, r29
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1d7c:	8e 01       	movw	r16, r28
    1d7e:	0f 5e       	subi	r16, 0xEF	; 239
    1d80:	1f 4f       	sbci	r17, 0xFF	; 255
    1d82:	ce 01       	movw	r24, r28
    1d84:	05 96       	adiw	r24, 0x05	; 5
    1d86:	b8 01       	movw	r22, r16
    1d88:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1d8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	89 27       	eor	r24, r25
    1d92:	8a 8b       	std	Y+18, r24	; 0x12
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	ae 01       	movw	r20, r28
    1d9a:	47 5e       	subi	r20, 0xE7	; 231
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1da2:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1da6:	a0 96       	adiw	r28, 0x20	; 32
    1da8:	e6 e0       	ldi	r30, 0x06	; 6
    1daa:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <__epilogue_restores__+0x18>

00001dae <__addsf3>:
    1dae:	a0 e2       	ldi	r26, 0x20	; 32
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ed ed       	ldi	r30, 0xDD	; 221
    1db4:	fe e0       	ldi	r31, 0x0E	; 14
    1db6:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__prologue_saves__+0x18>
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	7a 83       	std	Y+2, r23	; 0x02
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	9c 83       	std	Y+4, r25	; 0x04
    1dc2:	2d 83       	std	Y+5, r18	; 0x05
    1dc4:	3e 83       	std	Y+6, r19	; 0x06
    1dc6:	4f 83       	std	Y+7, r20	; 0x07
    1dc8:	58 87       	std	Y+8, r21	; 0x08
    1dca:	f9 e0       	ldi	r31, 0x09	; 9
    1dcc:	ef 2e       	mov	r14, r31
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	ec 0e       	add	r14, r28
    1dd2:	fd 1e       	adc	r15, r29
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	b7 01       	movw	r22, r14
    1dda:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1dde:	8e 01       	movw	r16, r28
    1de0:	0f 5e       	subi	r16, 0xEF	; 239
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	ce 01       	movw	r24, r28
    1de6:	05 96       	adiw	r24, 0x05	; 5
    1de8:	b8 01       	movw	r22, r16
    1dea:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1dee:	c7 01       	movw	r24, r14
    1df0:	b8 01       	movw	r22, r16
    1df2:	ae 01       	movw	r20, r28
    1df4:	47 5e       	subi	r20, 0xE7	; 231
    1df6:	5f 4f       	sbci	r21, 0xFF	; 255
    1df8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_fpadd_parts>
    1dfc:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1e00:	a0 96       	adiw	r28, 0x20	; 32
    1e02:	e6 e0       	ldi	r30, 0x06	; 6
    1e04:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <__epilogue_restores__+0x18>

00001e08 <__mulsf3>:
    1e08:	a0 e2       	ldi	r26, 0x20	; 32
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 d4 32 	jmp	0x65a8	; 0x65a8 <__prologue_saves__>
    1e14:	69 83       	std	Y+1, r22	; 0x01
    1e16:	7a 83       	std	Y+2, r23	; 0x02
    1e18:	8b 83       	std	Y+3, r24	; 0x03
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	3e 83       	std	Y+6, r19	; 0x06
    1e20:	4f 83       	std	Y+7, r20	; 0x07
    1e22:	58 87       	std	Y+8, r21	; 0x08
    1e24:	ce 01       	movw	r24, r28
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	be 01       	movw	r22, r28
    1e2a:	67 5f       	subi	r22, 0xF7	; 247
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1e32:	ce 01       	movw	r24, r28
    1e34:	05 96       	adiw	r24, 0x05	; 5
    1e36:	be 01       	movw	r22, r28
    1e38:	6f 5e       	subi	r22, 0xEF	; 239
    1e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    1e40:	99 85       	ldd	r25, Y+9	; 0x09
    1e42:	92 30       	cpi	r25, 0x02	; 2
    1e44:	88 f0       	brcs	.+34     	; 0x1e68 <__mulsf3+0x60>
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	82 30       	cpi	r24, 0x02	; 2
    1e4a:	c8 f0       	brcs	.+50     	; 0x1e7e <__mulsf3+0x76>
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	19 f4       	brne	.+6      	; 0x1e56 <__mulsf3+0x4e>
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	51 f4       	brne	.+20     	; 0x1e68 <__mulsf3+0x60>
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__mulsf3+0x56>
    1e56:	84 30       	cpi	r24, 0x04	; 4
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <__mulsf3+0x5c>
    1e5a:	92 30       	cpi	r25, 0x02	; 2
    1e5c:	81 f4       	brne	.+32     	; 0x1e7e <__mulsf3+0x76>
    1e5e:	87 e6       	ldi	r24, 0x67	; 103
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	c6 c0       	rjmp	.+396    	; 0x1ff0 <__mulsf3+0x1e8>
    1e64:	92 30       	cpi	r25, 0x02	; 2
    1e66:	49 f4       	brne	.+18     	; 0x1e7a <__mulsf3+0x72>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e6e:	98 13       	cpse	r25, r24
    1e70:	21 e0       	ldi	r18, 0x01	; 1
    1e72:	2a 87       	std	Y+10, r18	; 0x0a
    1e74:	ce 01       	movw	r24, r28
    1e76:	09 96       	adiw	r24, 0x09	; 9
    1e78:	bb c0       	rjmp	.+374    	; 0x1ff0 <__mulsf3+0x1e8>
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <__mulsf3+0x88>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	8a 89       	ldd	r24, Y+18	; 0x12
    1e84:	98 13       	cpse	r25, r24
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	2a 8b       	std	Y+18, r18	; 0x12
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	41 96       	adiw	r24, 0x11	; 17
    1e8e:	b0 c0       	rjmp	.+352    	; 0x1ff0 <__mulsf3+0x1e8>
    1e90:	2d 84       	ldd	r2, Y+13	; 0x0d
    1e92:	3e 84       	ldd	r3, Y+14	; 0x0e
    1e94:	4f 84       	ldd	r4, Y+15	; 0x0f
    1e96:	58 88       	ldd	r5, Y+16	; 0x10
    1e98:	6d 88       	ldd	r6, Y+21	; 0x15
    1e9a:	7e 88       	ldd	r7, Y+22	; 0x16
    1e9c:	8f 88       	ldd	r8, Y+23	; 0x17
    1e9e:	98 8c       	ldd	r9, Y+24	; 0x18
    1ea0:	ee 24       	eor	r14, r14
    1ea2:	ff 24       	eor	r15, r15
    1ea4:	87 01       	movw	r16, r14
    1ea6:	aa 24       	eor	r10, r10
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	65 01       	movw	r12, r10
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	50 e0       	ldi	r21, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	e0 e0       	ldi	r30, 0x00	; 0
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	c1 01       	movw	r24, r2
    1eba:	81 70       	andi	r24, 0x01	; 1
    1ebc:	90 70       	andi	r25, 0x00	; 0
    1ebe:	89 2b       	or	r24, r25
    1ec0:	e9 f0       	breq	.+58     	; 0x1efc <__mulsf3+0xf4>
    1ec2:	e6 0c       	add	r14, r6
    1ec4:	f7 1c       	adc	r15, r7
    1ec6:	08 1d       	adc	r16, r8
    1ec8:	19 1d       	adc	r17, r9
    1eca:	9a 01       	movw	r18, r20
    1ecc:	ab 01       	movw	r20, r22
    1ece:	2a 0d       	add	r18, r10
    1ed0:	3b 1d       	adc	r19, r11
    1ed2:	4c 1d       	adc	r20, r12
    1ed4:	5d 1d       	adc	r21, r13
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e0       	ldi	r26, 0x00	; 0
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e6 14       	cp	r14, r6
    1ee0:	f7 04       	cpc	r15, r7
    1ee2:	08 05       	cpc	r16, r8
    1ee4:	19 05       	cpc	r17, r9
    1ee6:	20 f4       	brcc	.+8      	; 0x1ef0 <__mulsf3+0xe8>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	ba 01       	movw	r22, r20
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 0f       	add	r20, r24
    1ef6:	59 1f       	adc	r21, r25
    1ef8:	6a 1f       	adc	r22, r26
    1efa:	7b 1f       	adc	r23, r27
    1efc:	aa 0c       	add	r10, r10
    1efe:	bb 1c       	adc	r11, r11
    1f00:	cc 1c       	adc	r12, r12
    1f02:	dd 1c       	adc	r13, r13
    1f04:	97 fe       	sbrs	r9, 7
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__mulsf3+0x110>
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	a8 2a       	or	r10, r24
    1f12:	b9 2a       	or	r11, r25
    1f14:	ca 2a       	or	r12, r26
    1f16:	db 2a       	or	r13, r27
    1f18:	31 96       	adiw	r30, 0x01	; 1
    1f1a:	e0 32       	cpi	r30, 0x20	; 32
    1f1c:	f1 05       	cpc	r31, r1
    1f1e:	49 f0       	breq	.+18     	; 0x1f32 <__mulsf3+0x12a>
    1f20:	66 0c       	add	r6, r6
    1f22:	77 1c       	adc	r7, r7
    1f24:	88 1c       	adc	r8, r8
    1f26:	99 1c       	adc	r9, r9
    1f28:	56 94       	lsr	r5
    1f2a:	47 94       	ror	r4
    1f2c:	37 94       	ror	r3
    1f2e:	27 94       	ror	r2
    1f30:	c3 cf       	rjmp	.-122    	; 0x1eb8 <__mulsf3+0xb0>
    1f32:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f34:	ea 89       	ldd	r30, Y+18	; 0x12
    1f36:	2b 89       	ldd	r18, Y+19	; 0x13
    1f38:	3c 89       	ldd	r19, Y+20	; 0x14
    1f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	2e 5f       	subi	r18, 0xFE	; 254
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	17 c0       	rjmp	.+46     	; 0x1f76 <__mulsf3+0x16e>
    1f48:	ca 01       	movw	r24, r20
    1f4a:	81 70       	andi	r24, 0x01	; 1
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	89 2b       	or	r24, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__mulsf3+0x162>
    1f52:	16 95       	lsr	r17
    1f54:	07 95       	ror	r16
    1f56:	f7 94       	ror	r15
    1f58:	e7 94       	ror	r14
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	b0 e8       	ldi	r27, 0x80	; 128
    1f62:	e8 2a       	or	r14, r24
    1f64:	f9 2a       	or	r15, r25
    1f66:	0a 2b       	or	r16, r26
    1f68:	1b 2b       	or	r17, r27
    1f6a:	76 95       	lsr	r23
    1f6c:	67 95       	ror	r22
    1f6e:	57 95       	ror	r21
    1f70:	47 95       	ror	r20
    1f72:	2f 5f       	subi	r18, 0xFF	; 255
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	77 fd       	sbrc	r23, 7
    1f78:	e7 cf       	rjmp	.-50     	; 0x1f48 <__mulsf3+0x140>
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <__mulsf3+0x18c>
    1f7c:	44 0f       	add	r20, r20
    1f7e:	55 1f       	adc	r21, r21
    1f80:	66 1f       	adc	r22, r22
    1f82:	77 1f       	adc	r23, r23
    1f84:	17 fd       	sbrc	r17, 7
    1f86:	41 60       	ori	r20, 0x01	; 1
    1f88:	ee 0c       	add	r14, r14
    1f8a:	ff 1c       	adc	r15, r15
    1f8c:	00 1f       	adc	r16, r16
    1f8e:	11 1f       	adc	r17, r17
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 30       	cpi	r20, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	59 07       	cpc	r21, r25
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	69 07       	cpc	r22, r25
    1f9e:	90 e4       	ldi	r25, 0x40	; 64
    1fa0:	79 07       	cpc	r23, r25
    1fa2:	60 f3       	brcs	.-40     	; 0x1f7c <__mulsf3+0x174>
    1fa4:	2b 8f       	std	Y+27, r18	; 0x1b
    1fa6:	3c 8f       	std	Y+28, r19	; 0x1c
    1fa8:	db 01       	movw	r26, r22
    1faa:	ca 01       	movw	r24, r20
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	90 70       	andi	r25, 0x00	; 0
    1fb0:	a0 70       	andi	r26, 0x00	; 0
    1fb2:	b0 70       	andi	r27, 0x00	; 0
    1fb4:	80 34       	cpi	r24, 0x40	; 64
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	a1 05       	cpc	r26, r1
    1fba:	b1 05       	cpc	r27, r1
    1fbc:	61 f4       	brne	.+24     	; 0x1fd6 <__mulsf3+0x1ce>
    1fbe:	47 fd       	sbrc	r20, 7
    1fc0:	0a c0       	rjmp	.+20     	; 0x1fd6 <__mulsf3+0x1ce>
    1fc2:	e1 14       	cp	r14, r1
    1fc4:	f1 04       	cpc	r15, r1
    1fc6:	01 05       	cpc	r16, r1
    1fc8:	11 05       	cpc	r17, r1
    1fca:	29 f0       	breq	.+10     	; 0x1fd6 <__mulsf3+0x1ce>
    1fcc:	40 5c       	subi	r20, 0xC0	; 192
    1fce:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd0:	6f 4f       	sbci	r22, 0xFF	; 255
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	40 78       	andi	r20, 0x80	; 128
    1fd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1fd8:	fe 17       	cp	r31, r30
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <__mulsf3+0x1d8>
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	4d 8f       	std	Y+29, r20	; 0x1d
    1fe2:	5e 8f       	std	Y+30, r21	; 0x1e
    1fe4:	6f 8f       	std	Y+31, r22	; 0x1f
    1fe6:	78 a3       	std	Y+32, r23	; 0x20
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    1fec:	ce 01       	movw	r24, r28
    1fee:	49 96       	adiw	r24, 0x19	; 25
    1ff0:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    1ff4:	a0 96       	adiw	r28, 0x20	; 32
    1ff6:	e2 e1       	ldi	r30, 0x12	; 18
    1ff8:	0c 94 f0 32 	jmp	0x65e0	; 0x65e0 <__epilogue_restores__>

00001ffc <__divsf3>:
    1ffc:	a8 e1       	ldi	r26, 0x18	; 24
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e4 e0       	ldi	r30, 0x04	; 4
    2002:	f0 e1       	ldi	r31, 0x10	; 16
    2004:	0c 94 dc 32 	jmp	0x65b8	; 0x65b8 <__prologue_saves__+0x10>
    2008:	69 83       	std	Y+1, r22	; 0x01
    200a:	7a 83       	std	Y+2, r23	; 0x02
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	2d 83       	std	Y+5, r18	; 0x05
    2012:	3e 83       	std	Y+6, r19	; 0x06
    2014:	4f 83       	std	Y+7, r20	; 0x07
    2016:	58 87       	std	Y+8, r21	; 0x08
    2018:	b9 e0       	ldi	r27, 0x09	; 9
    201a:	eb 2e       	mov	r14, r27
    201c:	f1 2c       	mov	r15, r1
    201e:	ec 0e       	add	r14, r28
    2020:	fd 1e       	adc	r15, r29
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5e       	subi	r16, 0xEF	; 239
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	ce 01       	movw	r24, r28
    2034:	05 96       	adiw	r24, 0x05	; 5
    2036:	b8 01       	movw	r22, r16
    2038:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    203c:	29 85       	ldd	r18, Y+9	; 0x09
    203e:	22 30       	cpi	r18, 0x02	; 2
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__divsf3+0x48>
    2042:	7e c0       	rjmp	.+252    	; 0x2140 <__divsf3+0x144>
    2044:	39 89       	ldd	r19, Y+17	; 0x11
    2046:	32 30       	cpi	r19, 0x02	; 2
    2048:	10 f4       	brcc	.+4      	; 0x204e <__divsf3+0x52>
    204a:	b8 01       	movw	r22, r16
    204c:	7c c0       	rjmp	.+248    	; 0x2146 <__divsf3+0x14a>
    204e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2050:	9a 89       	ldd	r25, Y+18	; 0x12
    2052:	89 27       	eor	r24, r25
    2054:	8a 87       	std	Y+10, r24	; 0x0a
    2056:	24 30       	cpi	r18, 0x04	; 4
    2058:	11 f0       	breq	.+4      	; 0x205e <__divsf3+0x62>
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 f4       	brne	.+12     	; 0x206a <__divsf3+0x6e>
    205e:	23 17       	cp	r18, r19
    2060:	09 f0       	breq	.+2      	; 0x2064 <__divsf3+0x68>
    2062:	6e c0       	rjmp	.+220    	; 0x2140 <__divsf3+0x144>
    2064:	67 e6       	ldi	r22, 0x67	; 103
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	6e c0       	rjmp	.+220    	; 0x2146 <__divsf3+0x14a>
    206a:	34 30       	cpi	r19, 0x04	; 4
    206c:	39 f4       	brne	.+14     	; 0x207c <__divsf3+0x80>
    206e:	1d 86       	std	Y+13, r1	; 0x0d
    2070:	1e 86       	std	Y+14, r1	; 0x0e
    2072:	1f 86       	std	Y+15, r1	; 0x0f
    2074:	18 8a       	std	Y+16, r1	; 0x10
    2076:	1c 86       	std	Y+12, r1	; 0x0c
    2078:	1b 86       	std	Y+11, r1	; 0x0b
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <__divsf3+0x88>
    207c:	32 30       	cpi	r19, 0x02	; 2
    207e:	21 f4       	brne	.+8      	; 0x2088 <__divsf3+0x8c>
    2080:	84 e0       	ldi	r24, 0x04	; 4
    2082:	89 87       	std	Y+9, r24	; 0x09
    2084:	b7 01       	movw	r22, r14
    2086:	5f c0       	rjmp	.+190    	; 0x2146 <__divsf3+0x14a>
    2088:	2b 85       	ldd	r18, Y+11	; 0x0b
    208a:	3c 85       	ldd	r19, Y+12	; 0x0c
    208c:	8b 89       	ldd	r24, Y+19	; 0x13
    208e:	9c 89       	ldd	r25, Y+20	; 0x14
    2090:	28 1b       	sub	r18, r24
    2092:	39 0b       	sbc	r19, r25
    2094:	3c 87       	std	Y+12, r19	; 0x0c
    2096:	2b 87       	std	Y+11, r18	; 0x0b
    2098:	ed 84       	ldd	r14, Y+13	; 0x0d
    209a:	fe 84       	ldd	r15, Y+14	; 0x0e
    209c:	0f 85       	ldd	r16, Y+15	; 0x0f
    209e:	18 89       	ldd	r17, Y+16	; 0x10
    20a0:	ad 88       	ldd	r10, Y+21	; 0x15
    20a2:	be 88       	ldd	r11, Y+22	; 0x16
    20a4:	cf 88       	ldd	r12, Y+23	; 0x17
    20a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    20a8:	ea 14       	cp	r14, r10
    20aa:	fb 04       	cpc	r15, r11
    20ac:	0c 05       	cpc	r16, r12
    20ae:	1d 05       	cpc	r17, r13
    20b0:	40 f4       	brcc	.+16     	; 0x20c2 <__divsf3+0xc6>
    20b2:	ee 0c       	add	r14, r14
    20b4:	ff 1c       	adc	r15, r15
    20b6:	00 1f       	adc	r16, r16
    20b8:	11 1f       	adc	r17, r17
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	30 40       	sbci	r19, 0x00	; 0
    20be:	3c 87       	std	Y+12, r19	; 0x0c
    20c0:	2b 87       	std	Y+11, r18	; 0x0b
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e4       	ldi	r27, 0x40	; 64
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	ea 14       	cp	r14, r10
    20d8:	fb 04       	cpc	r15, r11
    20da:	0c 05       	cpc	r16, r12
    20dc:	1d 05       	cpc	r17, r13
    20de:	40 f0       	brcs	.+16     	; 0x20f0 <__divsf3+0xf4>
    20e0:	28 2b       	or	r18, r24
    20e2:	39 2b       	or	r19, r25
    20e4:	4a 2b       	or	r20, r26
    20e6:	5b 2b       	or	r21, r27
    20e8:	ea 18       	sub	r14, r10
    20ea:	fb 08       	sbc	r15, r11
    20ec:	0c 09       	sbc	r16, r12
    20ee:	1d 09       	sbc	r17, r13
    20f0:	b6 95       	lsr	r27
    20f2:	a7 95       	ror	r26
    20f4:	97 95       	ror	r25
    20f6:	87 95       	ror	r24
    20f8:	ee 0c       	add	r14, r14
    20fa:	ff 1c       	adc	r15, r15
    20fc:	00 1f       	adc	r16, r16
    20fe:	11 1f       	adc	r17, r17
    2100:	6f 5f       	subi	r22, 0xFF	; 255
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	6f 31       	cpi	r22, 0x1F	; 31
    2106:	71 05       	cpc	r23, r1
    2108:	31 f7       	brne	.-52     	; 0x20d6 <__divsf3+0xda>
    210a:	da 01       	movw	r26, r20
    210c:	c9 01       	movw	r24, r18
    210e:	8f 77       	andi	r24, 0x7F	; 127
    2110:	90 70       	andi	r25, 0x00	; 0
    2112:	a0 70       	andi	r26, 0x00	; 0
    2114:	b0 70       	andi	r27, 0x00	; 0
    2116:	80 34       	cpi	r24, 0x40	; 64
    2118:	91 05       	cpc	r25, r1
    211a:	a1 05       	cpc	r26, r1
    211c:	b1 05       	cpc	r27, r1
    211e:	61 f4       	brne	.+24     	; 0x2138 <__divsf3+0x13c>
    2120:	27 fd       	sbrc	r18, 7
    2122:	0a c0       	rjmp	.+20     	; 0x2138 <__divsf3+0x13c>
    2124:	e1 14       	cp	r14, r1
    2126:	f1 04       	cpc	r15, r1
    2128:	01 05       	cpc	r16, r1
    212a:	11 05       	cpc	r17, r1
    212c:	29 f0       	breq	.+10     	; 0x2138 <__divsf3+0x13c>
    212e:	20 5c       	subi	r18, 0xC0	; 192
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	4f 4f       	sbci	r20, 0xFF	; 255
    2134:	5f 4f       	sbci	r21, 0xFF	; 255
    2136:	20 78       	andi	r18, 0x80	; 128
    2138:	2d 87       	std	Y+13, r18	; 0x0d
    213a:	3e 87       	std	Y+14, r19	; 0x0e
    213c:	4f 87       	std	Y+15, r20	; 0x0f
    213e:	58 8b       	std	Y+16, r21	; 0x10
    2140:	be 01       	movw	r22, r28
    2142:	67 5f       	subi	r22, 0xF7	; 247
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	cb 01       	movw	r24, r22
    2148:	0e 94 8e 11 	call	0x231c	; 0x231c <__pack_f>
    214c:	68 96       	adiw	r28, 0x18	; 24
    214e:	ea e0       	ldi	r30, 0x0A	; 10
    2150:	0c 94 f8 32 	jmp	0x65f0	; 0x65f0 <__epilogue_restores__+0x10>

00002154 <__gtsf2>:
    2154:	a8 e1       	ldi	r26, 0x18	; 24
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e0 eb       	ldi	r30, 0xB0	; 176
    215a:	f0 e1       	ldi	r31, 0x10	; 16
    215c:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__prologue_saves__+0x18>
    2160:	69 83       	std	Y+1, r22	; 0x01
    2162:	7a 83       	std	Y+2, r23	; 0x02
    2164:	8b 83       	std	Y+3, r24	; 0x03
    2166:	9c 83       	std	Y+4, r25	; 0x04
    2168:	2d 83       	std	Y+5, r18	; 0x05
    216a:	3e 83       	std	Y+6, r19	; 0x06
    216c:	4f 83       	std	Y+7, r20	; 0x07
    216e:	58 87       	std	Y+8, r21	; 0x08
    2170:	89 e0       	ldi	r24, 0x09	; 9
    2172:	e8 2e       	mov	r14, r24
    2174:	f1 2c       	mov	r15, r1
    2176:	ec 0e       	add	r14, r28
    2178:	fd 1e       	adc	r15, r29
    217a:	ce 01       	movw	r24, r28
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	b7 01       	movw	r22, r14
    2180:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2184:	8e 01       	movw	r16, r28
    2186:	0f 5e       	subi	r16, 0xEF	; 239
    2188:	1f 4f       	sbci	r17, 0xFF	; 255
    218a:	ce 01       	movw	r24, r28
    218c:	05 96       	adiw	r24, 0x05	; 5
    218e:	b8 01       	movw	r22, r16
    2190:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	40 f0       	brcs	.+16     	; 0x21aa <__gtsf2+0x56>
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	28 f0       	brcs	.+10     	; 0x21aa <__gtsf2+0x56>
    21a0:	c7 01       	movw	r24, r14
    21a2:	b8 01       	movw	r22, r16
    21a4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <__gtsf2+0x58>
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	68 96       	adiw	r28, 0x18	; 24
    21ae:	e6 e0       	ldi	r30, 0x06	; 6
    21b0:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <__epilogue_restores__+0x18>

000021b4 <__gesf2>:
    21b4:	a8 e1       	ldi	r26, 0x18	; 24
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__prologue_saves__+0x18>
    21c0:	69 83       	std	Y+1, r22	; 0x01
    21c2:	7a 83       	std	Y+2, r23	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	2d 83       	std	Y+5, r18	; 0x05
    21ca:	3e 83       	std	Y+6, r19	; 0x06
    21cc:	4f 83       	std	Y+7, r20	; 0x07
    21ce:	58 87       	std	Y+8, r21	; 0x08
    21d0:	89 e0       	ldi	r24, 0x09	; 9
    21d2:	e8 2e       	mov	r14, r24
    21d4:	f1 2c       	mov	r15, r1
    21d6:	ec 0e       	add	r14, r28
    21d8:	fd 1e       	adc	r15, r29
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	b7 01       	movw	r22, r14
    21e0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    21e4:	8e 01       	movw	r16, r28
    21e6:	0f 5e       	subi	r16, 0xEF	; 239
    21e8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ea:	ce 01       	movw	r24, r28
    21ec:	05 96       	adiw	r24, 0x05	; 5
    21ee:	b8 01       	movw	r22, r16
    21f0:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	40 f0       	brcs	.+16     	; 0x220a <__gesf2+0x56>
    21fa:	89 89       	ldd	r24, Y+17	; 0x11
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	28 f0       	brcs	.+10     	; 0x220a <__gesf2+0x56>
    2200:	c7 01       	movw	r24, r14
    2202:	b8 01       	movw	r22, r16
    2204:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__gesf2+0x58>
    220a:	8f ef       	ldi	r24, 0xFF	; 255
    220c:	68 96       	adiw	r28, 0x18	; 24
    220e:	e6 e0       	ldi	r30, 0x06	; 6
    2210:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <__epilogue_restores__+0x18>

00002214 <__ltsf2>:
    2214:	a8 e1       	ldi	r26, 0x18	; 24
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e1       	ldi	r30, 0x10	; 16
    221a:	f1 e1       	ldi	r31, 0x11	; 17
    221c:	0c 94 e0 32 	jmp	0x65c0	; 0x65c0 <__prologue_saves__+0x18>
    2220:	69 83       	std	Y+1, r22	; 0x01
    2222:	7a 83       	std	Y+2, r23	; 0x02
    2224:	8b 83       	std	Y+3, r24	; 0x03
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	3e 83       	std	Y+6, r19	; 0x06
    222c:	4f 83       	std	Y+7, r20	; 0x07
    222e:	58 87       	std	Y+8, r21	; 0x08
    2230:	89 e0       	ldi	r24, 0x09	; 9
    2232:	e8 2e       	mov	r14, r24
    2234:	f1 2c       	mov	r15, r1
    2236:	ec 0e       	add	r14, r28
    2238:	fd 1e       	adc	r15, r29
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	b7 01       	movw	r22, r14
    2240:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2244:	8e 01       	movw	r16, r28
    2246:	0f 5e       	subi	r16, 0xEF	; 239
    2248:	1f 4f       	sbci	r17, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	05 96       	adiw	r24, 0x05	; 5
    224e:	b8 01       	movw	r22, r16
    2250:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	40 f0       	brcs	.+16     	; 0x226a <__ltsf2+0x56>
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	82 30       	cpi	r24, 0x02	; 2
    225e:	28 f0       	brcs	.+10     	; 0x226a <__ltsf2+0x56>
    2260:	c7 01       	movw	r24, r14
    2262:	b8 01       	movw	r22, r16
    2264:	0e 94 db 12 	call	0x25b6	; 0x25b6 <__fpcmp_parts_f>
    2268:	01 c0       	rjmp	.+2      	; 0x226c <__ltsf2+0x58>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	68 96       	adiw	r28, 0x18	; 24
    226e:	e6 e0       	ldi	r30, 0x06	; 6
    2270:	0c 94 fc 32 	jmp	0x65f8	; 0x65f8 <__epilogue_restores__+0x18>

00002274 <__fixsfsi>:
    2274:	ac e0       	ldi	r26, 0x0C	; 12
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 e4 32 	jmp	0x65c8	; 0x65c8 <__prologue_saves__+0x20>
    2280:	69 83       	std	Y+1, r22	; 0x01
    2282:	7a 83       	std	Y+2, r23	; 0x02
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	ce 01       	movw	r24, r28
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	be 01       	movw	r22, r28
    228e:	6b 5f       	subi	r22, 0xFB	; 251
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__unpack_f>
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	61 f1       	breq	.+88     	; 0x22f4 <__fixsfsi+0x80>
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	50 f1       	brcs	.+84     	; 0x22f4 <__fixsfsi+0x80>
    22a0:	84 30       	cpi	r24, 0x04	; 4
    22a2:	21 f4       	brne	.+8      	; 0x22ac <__fixsfsi+0x38>
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	88 23       	and	r24, r24
    22a8:	51 f1       	breq	.+84     	; 0x22fe <__fixsfsi+0x8a>
    22aa:	2e c0       	rjmp	.+92     	; 0x2308 <__fixsfsi+0x94>
    22ac:	2f 81       	ldd	r18, Y+7	; 0x07
    22ae:	38 85       	ldd	r19, Y+8	; 0x08
    22b0:	37 fd       	sbrc	r19, 7
    22b2:	20 c0       	rjmp	.+64     	; 0x22f4 <__fixsfsi+0x80>
    22b4:	6e 81       	ldd	r22, Y+6	; 0x06
    22b6:	2f 31       	cpi	r18, 0x1F	; 31
    22b8:	31 05       	cpc	r19, r1
    22ba:	1c f0       	brlt	.+6      	; 0x22c2 <__fixsfsi+0x4e>
    22bc:	66 23       	and	r22, r22
    22be:	f9 f0       	breq	.+62     	; 0x22fe <__fixsfsi+0x8a>
    22c0:	23 c0       	rjmp	.+70     	; 0x2308 <__fixsfsi+0x94>
    22c2:	8e e1       	ldi	r24, 0x1E	; 30
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	82 1b       	sub	r24, r18
    22c8:	93 0b       	sbc	r25, r19
    22ca:	29 85       	ldd	r18, Y+9	; 0x09
    22cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    22d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    22d2:	04 c0       	rjmp	.+8      	; 0x22dc <__fixsfsi+0x68>
    22d4:	56 95       	lsr	r21
    22d6:	47 95       	ror	r20
    22d8:	37 95       	ror	r19
    22da:	27 95       	ror	r18
    22dc:	8a 95       	dec	r24
    22de:	d2 f7       	brpl	.-12     	; 0x22d4 <__fixsfsi+0x60>
    22e0:	66 23       	and	r22, r22
    22e2:	b1 f0       	breq	.+44     	; 0x2310 <__fixsfsi+0x9c>
    22e4:	50 95       	com	r21
    22e6:	40 95       	com	r20
    22e8:	30 95       	com	r19
    22ea:	21 95       	neg	r18
    22ec:	3f 4f       	sbci	r19, 0xFF	; 255
    22ee:	4f 4f       	sbci	r20, 0xFF	; 255
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <__fixsfsi+0x9c>
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__fixsfsi+0x9c>
    22fe:	2f ef       	ldi	r18, 0xFF	; 255
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f ef       	ldi	r20, 0xFF	; 255
    2304:	5f e7       	ldi	r21, 0x7F	; 127
    2306:	04 c0       	rjmp	.+8      	; 0x2310 <__fixsfsi+0x9c>
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e8       	ldi	r21, 0x80	; 128
    2310:	b9 01       	movw	r22, r18
    2312:	ca 01       	movw	r24, r20
    2314:	2c 96       	adiw	r28, 0x0c	; 12
    2316:	e2 e0       	ldi	r30, 0x02	; 2
    2318:	0c 94 00 33 	jmp	0x6600	; 0x6600 <__epilogue_restores__+0x20>

0000231c <__pack_f>:
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	fc 01       	movw	r30, r24
    2328:	e4 80       	ldd	r14, Z+4	; 0x04
    232a:	f5 80       	ldd	r15, Z+5	; 0x05
    232c:	06 81       	ldd	r16, Z+6	; 0x06
    232e:	17 81       	ldd	r17, Z+7	; 0x07
    2330:	d1 80       	ldd	r13, Z+1	; 0x01
    2332:	80 81       	ld	r24, Z
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	48 f4       	brcc	.+18     	; 0x234a <__pack_f+0x2e>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e1       	ldi	r26, 0x10	; 16
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e8 2a       	or	r14, r24
    2342:	f9 2a       	or	r15, r25
    2344:	0a 2b       	or	r16, r26
    2346:	1b 2b       	or	r17, r27
    2348:	a5 c0       	rjmp	.+330    	; 0x2494 <__pack_f+0x178>
    234a:	84 30       	cpi	r24, 0x04	; 4
    234c:	09 f4       	brne	.+2      	; 0x2350 <__pack_f+0x34>
    234e:	9f c0       	rjmp	.+318    	; 0x248e <__pack_f+0x172>
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	21 f4       	brne	.+8      	; 0x235c <__pack_f+0x40>
    2354:	ee 24       	eor	r14, r14
    2356:	ff 24       	eor	r15, r15
    2358:	87 01       	movw	r16, r14
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <__pack_f+0x4a>
    235c:	e1 14       	cp	r14, r1
    235e:	f1 04       	cpc	r15, r1
    2360:	01 05       	cpc	r16, r1
    2362:	11 05       	cpc	r17, r1
    2364:	19 f4       	brne	.+6      	; 0x236c <__pack_f+0x50>
    2366:	e0 e0       	ldi	r30, 0x00	; 0
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	96 c0       	rjmp	.+300    	; 0x2498 <__pack_f+0x17c>
    236c:	62 81       	ldd	r22, Z+2	; 0x02
    236e:	73 81       	ldd	r23, Z+3	; 0x03
    2370:	9f ef       	ldi	r25, 0xFF	; 255
    2372:	62 38       	cpi	r22, 0x82	; 130
    2374:	79 07       	cpc	r23, r25
    2376:	0c f0       	brlt	.+2      	; 0x237a <__pack_f+0x5e>
    2378:	5b c0       	rjmp	.+182    	; 0x2430 <__pack_f+0x114>
    237a:	22 e8       	ldi	r18, 0x82	; 130
    237c:	3f ef       	ldi	r19, 0xFF	; 255
    237e:	26 1b       	sub	r18, r22
    2380:	37 0b       	sbc	r19, r23
    2382:	2a 31       	cpi	r18, 0x1A	; 26
    2384:	31 05       	cpc	r19, r1
    2386:	2c f0       	brlt	.+10     	; 0x2392 <__pack_f+0x76>
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	2a c0       	rjmp	.+84     	; 0x23e6 <__pack_f+0xca>
    2392:	b8 01       	movw	r22, r16
    2394:	a7 01       	movw	r20, r14
    2396:	02 2e       	mov	r0, r18
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <__pack_f+0x86>
    239a:	76 95       	lsr	r23
    239c:	67 95       	ror	r22
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	0a 94       	dec	r0
    23a4:	d2 f7       	brpl	.-12     	; 0x239a <__pack_f+0x7e>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0x9c>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	aa 1f       	adc	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	2a 95       	dec	r18
    23ba:	d2 f7       	brpl	.-12     	; 0x23b0 <__pack_f+0x94>
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	a1 09       	sbc	r26, r1
    23c0:	b1 09       	sbc	r27, r1
    23c2:	8e 21       	and	r24, r14
    23c4:	9f 21       	and	r25, r15
    23c6:	a0 23       	and	r26, r16
    23c8:	b1 23       	and	r27, r17
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	a1 05       	cpc	r26, r1
    23ce:	b1 05       	cpc	r27, r1
    23d0:	21 f0       	breq	.+8      	; 0x23da <__pack_f+0xbe>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	9a 01       	movw	r18, r20
    23dc:	ab 01       	movw	r20, r22
    23de:	28 2b       	or	r18, r24
    23e0:	39 2b       	or	r19, r25
    23e2:	4a 2b       	or	r20, r26
    23e4:	5b 2b       	or	r21, r27
    23e6:	da 01       	movw	r26, r20
    23e8:	c9 01       	movw	r24, r18
    23ea:	8f 77       	andi	r24, 0x7F	; 127
    23ec:	90 70       	andi	r25, 0x00	; 0
    23ee:	a0 70       	andi	r26, 0x00	; 0
    23f0:	b0 70       	andi	r27, 0x00	; 0
    23f2:	80 34       	cpi	r24, 0x40	; 64
    23f4:	91 05       	cpc	r25, r1
    23f6:	a1 05       	cpc	r26, r1
    23f8:	b1 05       	cpc	r27, r1
    23fa:	39 f4       	brne	.+14     	; 0x240a <__pack_f+0xee>
    23fc:	27 ff       	sbrs	r18, 7
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <__pack_f+0xf6>
    2400:	20 5c       	subi	r18, 0xC0	; 192
    2402:	3f 4f       	sbci	r19, 0xFF	; 255
    2404:	4f 4f       	sbci	r20, 0xFF	; 255
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	04 c0       	rjmp	.+8      	; 0x2412 <__pack_f+0xf6>
    240a:	21 5c       	subi	r18, 0xC1	; 193
    240c:	3f 4f       	sbci	r19, 0xFF	; 255
    240e:	4f 4f       	sbci	r20, 0xFF	; 255
    2410:	5f 4f       	sbci	r21, 0xFF	; 255
    2412:	e0 e0       	ldi	r30, 0x00	; 0
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	20 30       	cpi	r18, 0x00	; 0
    2418:	a0 e0       	ldi	r26, 0x00	; 0
    241a:	3a 07       	cpc	r19, r26
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	4a 07       	cpc	r20, r26
    2420:	a0 e4       	ldi	r26, 0x40	; 64
    2422:	5a 07       	cpc	r21, r26
    2424:	10 f0       	brcs	.+4      	; 0x242a <__pack_f+0x10e>
    2426:	e1 e0       	ldi	r30, 0x01	; 1
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	79 01       	movw	r14, r18
    242c:	8a 01       	movw	r16, r20
    242e:	27 c0       	rjmp	.+78     	; 0x247e <__pack_f+0x162>
    2430:	60 38       	cpi	r22, 0x80	; 128
    2432:	71 05       	cpc	r23, r1
    2434:	64 f5       	brge	.+88     	; 0x248e <__pack_f+0x172>
    2436:	fb 01       	movw	r30, r22
    2438:	e1 58       	subi	r30, 0x81	; 129
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	d8 01       	movw	r26, r16
    243e:	c7 01       	movw	r24, r14
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	a0 70       	andi	r26, 0x00	; 0
    2446:	b0 70       	andi	r27, 0x00	; 0
    2448:	80 34       	cpi	r24, 0x40	; 64
    244a:	91 05       	cpc	r25, r1
    244c:	a1 05       	cpc	r26, r1
    244e:	b1 05       	cpc	r27, r1
    2450:	39 f4       	brne	.+14     	; 0x2460 <__pack_f+0x144>
    2452:	e7 fe       	sbrs	r14, 7
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <__pack_f+0x154>
    2456:	80 e4       	ldi	r24, 0x40	; 64
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e0       	ldi	r26, 0x00	; 0
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <__pack_f+0x14c>
    2460:	8f e3       	ldi	r24, 0x3F	; 63
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 0e       	add	r14, r24
    246a:	f9 1e       	adc	r15, r25
    246c:	0a 1f       	adc	r16, r26
    246e:	1b 1f       	adc	r17, r27
    2470:	17 ff       	sbrs	r17, 7
    2472:	05 c0       	rjmp	.+10     	; 0x247e <__pack_f+0x162>
    2474:	16 95       	lsr	r17
    2476:	07 95       	ror	r16
    2478:	f7 94       	ror	r15
    247a:	e7 94       	ror	r14
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	87 e0       	ldi	r24, 0x07	; 7
    2480:	16 95       	lsr	r17
    2482:	07 95       	ror	r16
    2484:	f7 94       	ror	r15
    2486:	e7 94       	ror	r14
    2488:	8a 95       	dec	r24
    248a:	d1 f7       	brne	.-12     	; 0x2480 <__pack_f+0x164>
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <__pack_f+0x17c>
    248e:	ee 24       	eor	r14, r14
    2490:	ff 24       	eor	r15, r15
    2492:	87 01       	movw	r16, r14
    2494:	ef ef       	ldi	r30, 0xFF	; 255
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	6e 2f       	mov	r22, r30
    249a:	67 95       	ror	r22
    249c:	66 27       	eor	r22, r22
    249e:	67 95       	ror	r22
    24a0:	90 2f       	mov	r25, r16
    24a2:	9f 77       	andi	r25, 0x7F	; 127
    24a4:	d7 94       	ror	r13
    24a6:	dd 24       	eor	r13, r13
    24a8:	d7 94       	ror	r13
    24aa:	8e 2f       	mov	r24, r30
    24ac:	86 95       	lsr	r24
    24ae:	49 2f       	mov	r20, r25
    24b0:	46 2b       	or	r20, r22
    24b2:	58 2f       	mov	r21, r24
    24b4:	5d 29       	or	r21, r13
    24b6:	b7 01       	movw	r22, r14
    24b8:	ca 01       	movw	r24, r20
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	08 95       	ret

000024c6 <__unpack_f>:
    24c6:	fc 01       	movw	r30, r24
    24c8:	db 01       	movw	r26, r22
    24ca:	40 81       	ld	r20, Z
    24cc:	51 81       	ldd	r21, Z+1	; 0x01
    24ce:	22 81       	ldd	r18, Z+2	; 0x02
    24d0:	62 2f       	mov	r22, r18
    24d2:	6f 77       	andi	r22, 0x7F	; 127
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	22 1f       	adc	r18, r18
    24d8:	22 27       	eor	r18, r18
    24da:	22 1f       	adc	r18, r18
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	89 2f       	mov	r24, r25
    24e0:	88 0f       	add	r24, r24
    24e2:	82 2b       	or	r24, r18
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	99 1f       	adc	r25, r25
    24ea:	99 27       	eor	r25, r25
    24ec:	99 1f       	adc	r25, r25
    24ee:	11 96       	adiw	r26, 0x01	; 1
    24f0:	9c 93       	st	X, r25
    24f2:	11 97       	sbiw	r26, 0x01	; 1
    24f4:	21 15       	cp	r18, r1
    24f6:	31 05       	cpc	r19, r1
    24f8:	a9 f5       	brne	.+106    	; 0x2564 <__unpack_f+0x9e>
    24fa:	41 15       	cp	r20, r1
    24fc:	51 05       	cpc	r21, r1
    24fe:	61 05       	cpc	r22, r1
    2500:	71 05       	cpc	r23, r1
    2502:	11 f4       	brne	.+4      	; 0x2508 <__unpack_f+0x42>
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	37 c0       	rjmp	.+110    	; 0x2576 <__unpack_f+0xb0>
    2508:	82 e8       	ldi	r24, 0x82	; 130
    250a:	9f ef       	ldi	r25, 0xFF	; 255
    250c:	13 96       	adiw	r26, 0x03	; 3
    250e:	9c 93       	st	X, r25
    2510:	8e 93       	st	-X, r24
    2512:	12 97       	sbiw	r26, 0x02	; 2
    2514:	9a 01       	movw	r18, r20
    2516:	ab 01       	movw	r20, r22
    2518:	67 e0       	ldi	r22, 0x07	; 7
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	44 1f       	adc	r20, r20
    2520:	55 1f       	adc	r21, r21
    2522:	6a 95       	dec	r22
    2524:	d1 f7       	brne	.-12     	; 0x251a <__unpack_f+0x54>
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	8c 93       	st	X, r24
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <__unpack_f+0x80>
    252c:	22 0f       	add	r18, r18
    252e:	33 1f       	adc	r19, r19
    2530:	44 1f       	adc	r20, r20
    2532:	55 1f       	adc	r21, r21
    2534:	12 96       	adiw	r26, 0x02	; 2
    2536:	8d 91       	ld	r24, X+
    2538:	9c 91       	ld	r25, X
    253a:	13 97       	sbiw	r26, 0x03	; 3
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	13 96       	adiw	r26, 0x03	; 3
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
    2544:	12 97       	sbiw	r26, 0x02	; 2
    2546:	20 30       	cpi	r18, 0x00	; 0
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	38 07       	cpc	r19, r24
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	48 07       	cpc	r20, r24
    2550:	80 e4       	ldi	r24, 0x40	; 64
    2552:	58 07       	cpc	r21, r24
    2554:	58 f3       	brcs	.-42     	; 0x252c <__unpack_f+0x66>
    2556:	14 96       	adiw	r26, 0x04	; 4
    2558:	2d 93       	st	X+, r18
    255a:	3d 93       	st	X+, r19
    255c:	4d 93       	st	X+, r20
    255e:	5c 93       	st	X, r21
    2560:	17 97       	sbiw	r26, 0x07	; 7
    2562:	08 95       	ret
    2564:	2f 3f       	cpi	r18, 0xFF	; 255
    2566:	31 05       	cpc	r19, r1
    2568:	79 f4       	brne	.+30     	; 0x2588 <__unpack_f+0xc2>
    256a:	41 15       	cp	r20, r1
    256c:	51 05       	cpc	r21, r1
    256e:	61 05       	cpc	r22, r1
    2570:	71 05       	cpc	r23, r1
    2572:	19 f4       	brne	.+6      	; 0x257a <__unpack_f+0xb4>
    2574:	84 e0       	ldi	r24, 0x04	; 4
    2576:	8c 93       	st	X, r24
    2578:	08 95       	ret
    257a:	64 ff       	sbrs	r22, 4
    257c:	03 c0       	rjmp	.+6      	; 0x2584 <__unpack_f+0xbe>
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	8c 93       	st	X, r24
    2582:	12 c0       	rjmp	.+36     	; 0x25a8 <__unpack_f+0xe2>
    2584:	1c 92       	st	X, r1
    2586:	10 c0       	rjmp	.+32     	; 0x25a8 <__unpack_f+0xe2>
    2588:	2f 57       	subi	r18, 0x7F	; 127
    258a:	30 40       	sbci	r19, 0x00	; 0
    258c:	13 96       	adiw	r26, 0x03	; 3
    258e:	3c 93       	st	X, r19
    2590:	2e 93       	st	-X, r18
    2592:	12 97       	sbiw	r26, 0x02	; 2
    2594:	83 e0       	ldi	r24, 0x03	; 3
    2596:	8c 93       	st	X, r24
    2598:	87 e0       	ldi	r24, 0x07	; 7
    259a:	44 0f       	add	r20, r20
    259c:	55 1f       	adc	r21, r21
    259e:	66 1f       	adc	r22, r22
    25a0:	77 1f       	adc	r23, r23
    25a2:	8a 95       	dec	r24
    25a4:	d1 f7       	brne	.-12     	; 0x259a <__unpack_f+0xd4>
    25a6:	70 64       	ori	r23, 0x40	; 64
    25a8:	14 96       	adiw	r26, 0x04	; 4
    25aa:	4d 93       	st	X+, r20
    25ac:	5d 93       	st	X+, r21
    25ae:	6d 93       	st	X+, r22
    25b0:	7c 93       	st	X, r23
    25b2:	17 97       	sbiw	r26, 0x07	; 7
    25b4:	08 95       	ret

000025b6 <__fpcmp_parts_f>:
    25b6:	1f 93       	push	r17
    25b8:	dc 01       	movw	r26, r24
    25ba:	fb 01       	movw	r30, r22
    25bc:	9c 91       	ld	r25, X
    25be:	92 30       	cpi	r25, 0x02	; 2
    25c0:	08 f4       	brcc	.+2      	; 0x25c4 <__fpcmp_parts_f+0xe>
    25c2:	47 c0       	rjmp	.+142    	; 0x2652 <__fpcmp_parts_f+0x9c>
    25c4:	80 81       	ld	r24, Z
    25c6:	82 30       	cpi	r24, 0x02	; 2
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <__fpcmp_parts_f+0x16>
    25ca:	43 c0       	rjmp	.+134    	; 0x2652 <__fpcmp_parts_f+0x9c>
    25cc:	94 30       	cpi	r25, 0x04	; 4
    25ce:	51 f4       	brne	.+20     	; 0x25e4 <__fpcmp_parts_f+0x2e>
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	1c 91       	ld	r17, X
    25d4:	84 30       	cpi	r24, 0x04	; 4
    25d6:	99 f5       	brne	.+102    	; 0x263e <__fpcmp_parts_f+0x88>
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	68 2f       	mov	r22, r24
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	61 1b       	sub	r22, r17
    25e0:	71 09       	sbc	r23, r1
    25e2:	3f c0       	rjmp	.+126    	; 0x2662 <__fpcmp_parts_f+0xac>
    25e4:	84 30       	cpi	r24, 0x04	; 4
    25e6:	21 f0       	breq	.+8      	; 0x25f0 <__fpcmp_parts_f+0x3a>
    25e8:	92 30       	cpi	r25, 0x02	; 2
    25ea:	31 f4       	brne	.+12     	; 0x25f8 <__fpcmp_parts_f+0x42>
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	b9 f1       	breq	.+110    	; 0x265e <__fpcmp_parts_f+0xa8>
    25f0:	81 81       	ldd	r24, Z+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	89 f1       	breq	.+98     	; 0x2658 <__fpcmp_parts_f+0xa2>
    25f6:	2d c0       	rjmp	.+90     	; 0x2652 <__fpcmp_parts_f+0x9c>
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	1c 91       	ld	r17, X
    25fc:	11 97       	sbiw	r26, 0x01	; 1
    25fe:	82 30       	cpi	r24, 0x02	; 2
    2600:	f1 f0       	breq	.+60     	; 0x263e <__fpcmp_parts_f+0x88>
    2602:	81 81       	ldd	r24, Z+1	; 0x01
    2604:	18 17       	cp	r17, r24
    2606:	d9 f4       	brne	.+54     	; 0x263e <__fpcmp_parts_f+0x88>
    2608:	12 96       	adiw	r26, 0x02	; 2
    260a:	2d 91       	ld	r18, X+
    260c:	3c 91       	ld	r19, X
    260e:	13 97       	sbiw	r26, 0x03	; 3
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	82 17       	cp	r24, r18
    2616:	93 07       	cpc	r25, r19
    2618:	94 f0       	brlt	.+36     	; 0x263e <__fpcmp_parts_f+0x88>
    261a:	28 17       	cp	r18, r24
    261c:	39 07       	cpc	r19, r25
    261e:	bc f0       	brlt	.+46     	; 0x264e <__fpcmp_parts_f+0x98>
    2620:	14 96       	adiw	r26, 0x04	; 4
    2622:	8d 91       	ld	r24, X+
    2624:	9d 91       	ld	r25, X+
    2626:	0d 90       	ld	r0, X+
    2628:	bc 91       	ld	r27, X
    262a:	a0 2d       	mov	r26, r0
    262c:	24 81       	ldd	r18, Z+4	; 0x04
    262e:	35 81       	ldd	r19, Z+5	; 0x05
    2630:	46 81       	ldd	r20, Z+6	; 0x06
    2632:	57 81       	ldd	r21, Z+7	; 0x07
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	4a 07       	cpc	r20, r26
    263a:	5b 07       	cpc	r21, r27
    263c:	18 f4       	brcc	.+6      	; 0x2644 <__fpcmp_parts_f+0x8e>
    263e:	11 23       	and	r17, r17
    2640:	41 f0       	breq	.+16     	; 0x2652 <__fpcmp_parts_f+0x9c>
    2642:	0a c0       	rjmp	.+20     	; 0x2658 <__fpcmp_parts_f+0xa2>
    2644:	82 17       	cp	r24, r18
    2646:	93 07       	cpc	r25, r19
    2648:	a4 07       	cpc	r26, r20
    264a:	b5 07       	cpc	r27, r21
    264c:	40 f4       	brcc	.+16     	; 0x265e <__fpcmp_parts_f+0xa8>
    264e:	11 23       	and	r17, r17
    2650:	19 f0       	breq	.+6      	; 0x2658 <__fpcmp_parts_f+0xa2>
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	05 c0       	rjmp	.+10     	; 0x2662 <__fpcmp_parts_f+0xac>
    2658:	6f ef       	ldi	r22, 0xFF	; 255
    265a:	7f ef       	ldi	r23, 0xFF	; 255
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <__fpcmp_parts_f+0xac>
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	cb 01       	movw	r24, r22
    2664:	1f 91       	pop	r17
    2666:	08 95       	ret

00002668 <PWM_Init>:
#include "../Mem_Map32.h"
volatile u16 t1,t2,t3,flag=0;

/**********************************************PWM*********************************************************/
void PWM_Init(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8,OCRA_NON_INVERTING,OCRB_DISCONNECTED);
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	42 e0       	ldi	r20, 0x02	; 2
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	0e 94 76 20 	call	0x40ec	; 0x40ec <Timer1_Init>
	
}
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <PWM_Freq_KHZ>:
void PWM_Freq_KHZ(u16 freq)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <PWM_Freq_KHZ+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <PWM_Freq_KHZ+0x8>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
	if (freq==0);
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	d1 f0       	breq	.+52     	; 0x26ce <PWM_Freq_KHZ+0x4c>
	else
	{
		u16 Ttotal=1000/freq;
    269a:	88 ee       	ldi	r24, 0xE8	; 232
    269c:	93 e0       	ldi	r25, 0x03	; 3
    269e:	2b 81       	ldd	r18, Y+3	; 0x03
    26a0:	3c 81       	ldd	r19, Y+4	; 0x04
    26a2:	b9 01       	movw	r22, r18
    26a4:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    26a8:	cb 01       	movw	r24, r22
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	41 f0       	breq	.+16     	; 0x26c6 <PWM_Freq_KHZ+0x44>
		{
			ICR1=Ttotal-1;
    26b6:	e6 e4       	ldi	r30, 0x46	; 70
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <PWM_Freq_KHZ+0x4c>
		}
		else ICR1=0;
    26c6:	e6 e4       	ldi	r30, 0x46	; 70
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	11 82       	std	Z+1, r1	; 0x01
    26cc:	10 82       	st	Z, r1
		
	}
}
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <PWM_Freq_HZ>:
void PWM_Freq_HZ(u16 freq)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <PWM_Freq_HZ+0x6>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <PWM_Freq_HZ+0x8>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9c 83       	std	Y+4, r25	; 0x04
    26ea:	8b 83       	std	Y+3, r24	; 0x03
	if (freq==0);
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	09 f1       	breq	.+66     	; 0x2736 <PWM_Freq_HZ+0x5a>
	else
	{
		u16 Ttotal=(u32)1000000/freq;
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	9c 01       	movw	r18, r24
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	50 e0       	ldi	r21, 0x00	; 0
    26fe:	80 e4       	ldi	r24, 0x40	; 64
    2700:	92 e4       	ldi	r25, 0x42	; 66
    2702:	af e0       	ldi	r26, 0x0F	; 15
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    270e:	da 01       	movw	r26, r20
    2710:	c9 01       	movw	r24, r18
    2712:	9a 83       	std	Y+2, r25	; 0x02
    2714:	89 83       	std	Y+1, r24	; 0x01
		if (Ttotal>=1)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	00 97       	sbiw	r24, 0x00	; 0
    271c:	41 f0       	breq	.+16     	; 0x272e <PWM_Freq_HZ+0x52>
		{
			ICR1=Ttotal-1;
    271e:	e6 e4       	ldi	r30, 0x46	; 70
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
    272c:	04 c0       	rjmp	.+8      	; 0x2736 <PWM_Freq_HZ+0x5a>
		}
		else ICR1=0;
    272e:	e6 e4       	ldi	r30, 0x46	; 70
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	11 82       	std	Z+1, r1	; 0x01
    2734:	10 82       	st	Z, r1
	}



}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	0f 90       	pop	r0
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <PWM_Duty>:
void PWM_Duty(u16 duty)
{
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <PWM_Duty+0xe>
    2752:	00 d0       	rcall	.+0      	; 0x2754 <PWM_Duty+0x10>
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
    2758:	9c 83       	std	Y+4, r25	; 0x04
    275a:	8b 83       	std	Y+3, r24	; 0x03
	 if (duty<=100)
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	85 36       	cpi	r24, 0x65	; 101
    2762:	91 05       	cpc	r25, r1
    2764:	80 f5       	brcc	.+96     	; 0x27c6 <PWM_Duty+0x82>
	{
		u16 Ton=((u32)duty*(ICR1+1))/100;
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	7c 01       	movw	r14, r24
    276c:	00 e0       	ldi	r16, 0x00	; 0
    276e:	10 e0       	ldi	r17, 0x00	; 0
    2770:	e6 e4       	ldi	r30, 0x46	; 70
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	01 96       	adiw	r24, 0x01	; 1
    277a:	9c 01       	movw	r18, r24
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	c8 01       	movw	r24, r16
    2782:	b7 01       	movw	r22, r14
    2784:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	24 e6       	ldi	r18, 0x64	; 100
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    279c:	da 01       	movw	r26, r20
    279e:	c9 01       	movw	r24, r18
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
		if (Ton>1)
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	82 30       	cpi	r24, 0x02	; 2
    27aa:	91 05       	cpc	r25, r1
    27ac:	40 f0       	brcs	.+16     	; 0x27be <PWM_Duty+0x7a>
		{
			OCR1A=Ton-1;	
    27ae:	ea e4       	ldi	r30, 0x4A	; 74
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <PWM_Duty+0x82>
		}
		else
		OCR1A=0;	
    27be:	ea e4       	ldi	r30, 0x4A	; 74
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	11 82       	std	Z+1, r1	; 0x01
    27c4:	10 82       	st	Z, r1
	}
}
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	08 95       	ret

000027dc <Timer1_SetInterruptTime_ms>:
/******************************************Set Interrupt Time******************************************************/

void Timer1_SetInterruptTime_ms (u16 time,void(*LocalFptr)(void))
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <Timer1_SetInterruptTime_ms+0x6>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <Timer1_SetInterruptTime_ms+0x8>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	7c 83       	std	Y+4, r23	; 0x04
    27ee:	6b 83       	std	Y+3, r22	; 0x03
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_DISCONNECTED);
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	62 e0       	ldi	r22, 0x02	; 2
    27f4:	40 e0       	ldi	r20, 0x00	; 0
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	0e 94 76 20 	call	0x40ec	; 0x40ec <Timer1_Init>
	OCR1A=(time*1000)-1;
    27fc:	ea e4       	ldi	r30, 0x4A	; 74
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	29 81       	ldd	r18, Y+1	; 0x01
    2802:	3a 81       	ldd	r19, Y+2	; 0x02
    2804:	88 ee       	ldi	r24, 0xE8	; 232
    2806:	93 e0       	ldi	r25, 0x03	; 3
    2808:	ac 01       	movw	r20, r24
    280a:	24 9f       	mul	r18, r20
    280c:	c0 01       	movw	r24, r0
    280e:	25 9f       	mul	r18, r21
    2810:	90 0d       	add	r25, r0
    2812:	34 9f       	mul	r19, r20
    2814:	90 0d       	add	r25, r0
    2816:	11 24       	eor	r1, r1
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
	Timer1_OCA_SetCallBack(LocalFptr);
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	0e 94 a8 22 	call	0x4550	; 0x4550 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();	
    2826:	0e 94 5e 22 	call	0x44bc	; 0x44bc <Timer1_OCA_InterruptEnable>
}
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <Timer1_SetInterruptTime_us>:
void Timer1_SetInterruptTime_us (u16 time,void(*LocalFptr)(void))
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <Timer1_SetInterruptTime_us+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <Timer1_SetInterruptTime_us+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	7c 83       	std	Y+4, r23	; 0x04
    284a:	6b 83       	std	Y+3, r22	; 0x03
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_DISCONNECTED);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	0e 94 76 20 	call	0x40ec	; 0x40ec <Timer1_Init>
	OCR1A=(time)-1;
    2858:	ea e4       	ldi	r30, 0x4A	; 74
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
	Timer1_OCA_SetCallBack(LocalFptr);
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	0e 94 a8 22 	call	0x4550	; 0x4550 <Timer1_OCA_SetCallBack>
	Timer1_OCA_InterruptEnable();
    286e:	0e 94 5e 22 	call	0x44bc	; 0x44bc <Timer1_OCA_InterruptEnable>
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <PWM_Measure2>:

/**********************************************Measure PWM*********************************************************/
void PWM_Measure2(u32* Pfreq,u8* Pduty)
{
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	28 97       	sbiw	r28, 0x08	; 8
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	78 87       	std	Y+8, r23	; 0x08
    28a2:	6f 83       	std	Y+7, r22	; 0x07
	u16 Ton,Toff;
	flag=0;
    28a4:	10 92 db 01 	sts	0x01DB, r1
    28a8:	10 92 da 01 	sts	0x01DA, r1
	TCNT1=0;
    28ac:	ec e4       	ldi	r30, 0x4C	; 76
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	11 82       	std	Z+1, r1	; 0x01
    28b2:	10 82       	st	Z, r1
	while (DIO_ReadPin(PIND6));
    28b4:	8e e1       	ldi	r24, 0x1E	; 30
    28b6:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    28ba:	88 23       	and	r24, r24
    28bc:	d9 f7       	brne	.-10     	; 0x28b4 <PWM_Measure2+0x34>
	while (!DIO_ReadPin(PIND6));
    28be:	8e e1       	ldi	r24, 0x1E	; 30
    28c0:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    28c4:	88 23       	and	r24, r24
    28c6:	d9 f3       	breq	.-10     	; 0x28be <PWM_Measure2+0x3e>
	TCNT1=0;
    28c8:	ec e4       	ldi	r30, 0x4C	; 76
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	11 82       	std	Z+1, r1	; 0x01
    28ce:	10 82       	st	Z, r1
	while (DIO_ReadPin(PIND6));
    28d0:	8e e1       	ldi	r24, 0x1E	; 30
    28d2:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    28d6:	88 23       	and	r24, r24
    28d8:	d9 f7       	brne	.-10     	; 0x28d0 <PWM_Measure2+0x50>
	Ton=TCNT1;
    28da:	ec e4       	ldi	r30, 0x4C	; 76
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
	TCNT1=0;
    28e6:	ec e4       	ldi	r30, 0x4C	; 76
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	11 82       	std	Z+1, r1	; 0x01
    28ec:	10 82       	st	Z, r1
	while (!DIO_ReadPin(PIND6));
    28ee:	8e e1       	ldi	r24, 0x1E	; 30
    28f0:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    28f4:	88 23       	and	r24, r24
    28f6:	d9 f3       	breq	.-10     	; 0x28ee <PWM_Measure2+0x6e>
	Toff=TCNT1;
    28f8:	ec e4       	ldi	r30, 0x4C	; 76
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
	*Pduty=((u32)Ton*100)/(Ton+Toff);
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	cc 01       	movw	r24, r24
    290a:	a0 e0       	ldi	r26, 0x00	; 0
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	24 e6       	ldi	r18, 0x64	; 100
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    291e:	7b 01       	movw	r14, r22
    2920:	8c 01       	movw	r16, r24
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	82 0f       	add	r24, r18
    292c:	93 1f       	adc	r25, r19
    292e:	9c 01       	movw	r18, r24
    2930:	40 e0       	ldi	r20, 0x00	; 0
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	c8 01       	movw	r24, r16
    2936:	b7 01       	movw	r22, r14
    2938:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    293c:	da 01       	movw	r26, r20
    293e:	c9 01       	movw	r24, r18
    2940:	ef 81       	ldd	r30, Y+7	; 0x07
    2942:	f8 85       	ldd	r31, Y+8	; 0x08
    2944:	80 83       	st	Z, r24
	*Pfreq=(u32)1000000/((u32)Toff+Ton);
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	9c 01       	movw	r18, r24
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	50 e0       	ldi	r21, 0x00	; 0
    2950:	8b 81       	ldd	r24, Y+3	; 0x03
    2952:	9c 81       	ldd	r25, Y+4	; 0x04
    2954:	cc 01       	movw	r24, r24
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	28 0f       	add	r18, r24
    295c:	39 1f       	adc	r19, r25
    295e:	4a 1f       	adc	r20, r26
    2960:	5b 1f       	adc	r21, r27
    2962:	80 e4       	ldi	r24, 0x40	; 64
    2964:	92 e4       	ldi	r25, 0x42	; 66
    2966:	af e0       	ldi	r26, 0x0F	; 15
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    2972:	da 01       	movw	r26, r20
    2974:	c9 01       	movw	r24, r18
    2976:	ed 81       	ldd	r30, Y+5	; 0x05
    2978:	fe 81       	ldd	r31, Y+6	; 0x06
    297a:	80 83       	st	Z, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	a2 83       	std	Z+2, r26	; 0x02
    2980:	b3 83       	std	Z+3, r27	; 0x03
}
    2982:	28 96       	adiw	r28, 0x08	; 8
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	ff 90       	pop	r15
    2998:	ef 90       	pop	r14
    299a:	08 95       	ret

0000299c <PWM_Measure>:


void PWM_Measure(u32* Pfreq,u8* Pduty)
{
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	28 97       	sbiw	r28, 0x08	; 8
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	78 87       	std	Y+8, r23	; 0x08
    29be:	6f 83       	std	Y+7, r22	; 0x07
	u16 Ton,Toff;
	
	TCNT1=0;
    29c0:	ec e4       	ldi	r30, 0x4C	; 76
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	11 82       	std	Z+1, r1	; 0x01
    29c6:	10 82       	st	Z, r1
	Timer1_ICU_SetCallBack(Func_ICU);
    29c8:	85 e6       	ldi	r24, 0x65	; 101
    29ca:	95 e1       	ldi	r25, 0x15	; 21
    29cc:	0e 94 cc 22 	call	0x4598	; 0x4598 <Timer1_ICU_SetCallBack>
	Timer1_InputCaptureEdge(RISING);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
    29d6:	0e 94 26 22 	call	0x444c	; 0x444c <Timer1_ICU_InterruptEnable>
	flag=0;
    29da:	10 92 db 01 	sts	0x01DB, r1
    29de:	10 92 da 01 	sts	0x01DA, r1
	while(flag<3);
    29e2:	80 91 da 01 	lds	r24, 0x01DA
    29e6:	90 91 db 01 	lds	r25, 0x01DB
    29ea:	83 30       	cpi	r24, 0x03	; 3
    29ec:	91 05       	cpc	r25, r1
    29ee:	c8 f3       	brcs	.-14     	; 0x29e2 <PWM_Measure+0x46>
	Ton=t2-t1;
    29f0:	20 91 09 02 	lds	r18, 0x0209
    29f4:	30 91 0a 02 	lds	r19, 0x020A
    29f8:	80 91 0b 02 	lds	r24, 0x020B
    29fc:	90 91 0c 02 	lds	r25, 0x020C
    2a00:	a9 01       	movw	r20, r18
    2a02:	48 1b       	sub	r20, r24
    2a04:	59 0b       	sbc	r21, r25
    2a06:	ca 01       	movw	r24, r20
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
	Toff=t3-t2;
    2a0c:	20 91 07 02 	lds	r18, 0x0207
    2a10:	30 91 08 02 	lds	r19, 0x0208
    2a14:	80 91 09 02 	lds	r24, 0x0209
    2a18:	90 91 0a 02 	lds	r25, 0x020A
    2a1c:	a9 01       	movw	r20, r18
    2a1e:	48 1b       	sub	r20, r24
    2a20:	59 0b       	sbc	r21, r25
    2a22:	ca 01       	movw	r24, r20
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01

	*Pduty=((u32)Ton*100)/((u32)Ton+Toff);
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2c:	cc 01       	movw	r24, r24
    2a2e:	a0 e0       	ldi	r26, 0x00	; 0
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	24 e6       	ldi	r18, 0x64	; 100
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    2a42:	7b 01       	movw	r14, r22
    2a44:	8c 01       	movw	r16, r24
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	cc 01       	movw	r24, r24
    2a56:	a0 e0       	ldi	r26, 0x00	; 0
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	28 0f       	add	r18, r24
    2a5c:	39 1f       	adc	r19, r25
    2a5e:	4a 1f       	adc	r20, r26
    2a60:	5b 1f       	adc	r21, r27
    2a62:	c8 01       	movw	r24, r16
    2a64:	b7 01       	movw	r22, r14
    2a66:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    2a6a:	da 01       	movw	r26, r20
    2a6c:	c9 01       	movw	r24, r18
    2a6e:	ef 81       	ldd	r30, Y+7	; 0x07
    2a70:	f8 85       	ldd	r31, Y+8	; 0x08
    2a72:	80 83       	st	Z, r24
	*Pfreq=(u32)1000000/((u32)Toff+Ton);
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	9c 01       	movw	r18, r24
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	50 e0       	ldi	r21, 0x00	; 0
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	9c 81       	ldd	r25, Y+4	; 0x04
    2a82:	cc 01       	movw	r24, r24
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	28 0f       	add	r18, r24
    2a8a:	39 1f       	adc	r19, r25
    2a8c:	4a 1f       	adc	r20, r26
    2a8e:	5b 1f       	adc	r21, r27
    2a90:	80 e4       	ldi	r24, 0x40	; 64
    2a92:	92 e4       	ldi	r25, 0x42	; 66
    2a94:	af e0       	ldi	r26, 0x0F	; 15
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    2aa0:	da 01       	movw	r26, r20
    2aa2:	c9 01       	movw	r24, r18
    2aa4:	ed 81       	ldd	r30, Y+5	; 0x05
    2aa6:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa8:	80 83       	st	Z, r24
    2aaa:	91 83       	std	Z+1, r25	; 0x01
    2aac:	a2 83       	std	Z+2, r26	; 0x02
    2aae:	b3 83       	std	Z+3, r27	; 0x03

}
    2ab0:	28 96       	adiw	r28, 0x08	; 8
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	08 95       	ret

00002aca <Func_ICU>:

static void Func_ICU(void)
{
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
	if (flag==0)
    2ad2:	80 91 da 01 	lds	r24, 0x01DA
    2ad6:	90 91 db 01 	lds	r25, 0x01DB
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	91 f4       	brne	.+36     	; 0x2b02 <Func_ICU+0x38>
	{
		t1=ICR1;
    2ade:	e6 e4       	ldi	r30, 0x46	; 70
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	90 93 0c 02 	sts	0x020C, r25
    2aea:	80 93 0b 02 	sts	0x020B, r24
		Timer1_InputCaptureEdge(FALLING);
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
		flag=1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	90 93 db 01 	sts	0x01DB, r25
    2afc:	80 93 da 01 	sts	0x01DA, r24
    2b00:	30 c0       	rjmp	.+96     	; 0x2b62 <Func_ICU+0x98>
	}
	else if (flag==1)
    2b02:	80 91 da 01 	lds	r24, 0x01DA
    2b06:	90 91 db 01 	lds	r25, 0x01DB
    2b0a:	81 30       	cpi	r24, 0x01	; 1
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	91 f4       	brne	.+36     	; 0x2b34 <Func_ICU+0x6a>
	{
		t2=ICR1;
    2b10:	e6 e4       	ldi	r30, 0x46	; 70
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	91 81       	ldd	r25, Z+1	; 0x01
    2b18:	90 93 0a 02 	sts	0x020A, r25
    2b1c:	80 93 09 02 	sts	0x0209, r24
		Timer1_InputCaptureEdge(RISING);
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
		flag=2;		
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	90 93 db 01 	sts	0x01DB, r25
    2b2e:	80 93 da 01 	sts	0x01DA, r24
    2b32:	17 c0       	rjmp	.+46     	; 0x2b62 <Func_ICU+0x98>
	}
	else if (flag==2)
    2b34:	80 91 da 01 	lds	r24, 0x01DA
    2b38:	90 91 db 01 	lds	r25, 0x01DB
    2b3c:	82 30       	cpi	r24, 0x02	; 2
    2b3e:	91 05       	cpc	r25, r1
    2b40:	81 f4       	brne	.+32     	; 0x2b62 <Func_ICU+0x98>
	{
		t3=ICR1;
    2b42:	e6 e4       	ldi	r30, 0x46	; 70
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	90 93 08 02 	sts	0x0208, r25
    2b4e:	80 93 07 02 	sts	0x0207, r24
		Timer1_ICU_InterruptDisable();
    2b52:	0e 94 34 22 	call	0x4468	; 0x4468 <Timer1_ICU_InterruptDisable>
		flag=3;
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	90 93 db 01 	sts	0x01DB, r25
    2b5e:	80 93 da 01 	sts	0x01DA, r24
	}	
	
	
	
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <UART_SendString>:
static u8  *Asynch_receive_str;

/*******************************************Send Functions*****************************************************/

void UART_SendString(const u8 *Str)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	00 d0       	rcall	.+0      	; 0x2b6e <UART_SendString+0x6>
    2b6e:	0f 92       	push	r0
    2b70:	cd b7       	in	r28, 0x3d	; 61
    2b72:	de b7       	in	r29, 0x3e	; 62
    2b74:	9b 83       	std	Y+3, r25	; 0x03
    2b76:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2b78:	19 82       	std	Y+1, r1	; 0x01
    2b7a:	0e c0       	rjmp	.+28     	; 0x2b98 <UART_SendString+0x30>
	while(Str[i] != '\0')
	{
		UART_SendByte(Str[i]);
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	9b 81       	ldd	r25, Y+3	; 0x03
    2b86:	fc 01       	movw	r30, r24
    2b88:	e2 0f       	add	r30, r18
    2b8a:	f3 1f       	adc	r31, r19
    2b8c:	80 81       	ld	r24, Z
    2b8e:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>
		i++;
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	8f 5f       	subi	r24, 0xFF	; 255
    2b96:	89 83       	std	Y+1, r24	; 0x01
/*******************************************Send Functions*****************************************************/

void UART_SendString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	e2 0f       	add	r30, r18
    2ba6:	f3 1f       	adc	r31, r19
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 23       	and	r24, r24
    2bac:	39 f7       	brne	.-50     	; 0x2b7c <UART_SendString+0x14>
	{
		UART_SendByte(Str[i]);
		i++;
	}
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <UART_SendString_Asynch>:
								////////////////////////////////////

void UART_SendString_Asynch(u8 *Str)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <UART_SendString_Asynch+0x6>
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	9a 83       	std	Y+2, r25	; 0x02
    2bc6:	89 83       	std	Y+1, r24	; 0x01
	Asynch_Send_Str=Str;
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	90 93 df 01 	sts	0x01DF, r25
    2bd0:	80 93 de 01 	sts	0x01DE, r24
	UART_SendByte(Str[0]);
    2bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd8:	80 81       	ld	r24, Z
    2bda:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>

	UART_TX_SetCallBack(Func_TX);
    2bde:	8a ef       	ldi	r24, 0xFA	; 250
    2be0:	95 e1       	ldi	r25, 0x15	; 21
    2be2:	0e 94 49 24 	call	0x4892	; 0x4892 <UART_TX_SetCallBack>
	UART_TX_InterruptEnable();
    2be6:	0e 94 1b 24 	call	0x4836	; 0x4836 <UART_TX_InterruptEnable>

}
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <Func_TX>:

static void Func_TX(void)
{
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	cd b7       	in	r28, 0x3d	; 61
    2bfa:	de b7       	in	r29, 0x3e	; 62
static u8 i=1;
	if(Asynch_Send_Str[i] !='\0')
    2bfc:	20 91 de 01 	lds	r18, 0x01DE
    2c00:	30 91 df 01 	lds	r19, 0x01DF
    2c04:	80 91 70 01 	lds	r24, 0x0170
    2c08:	88 2f       	mov	r24, r24
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	f9 01       	movw	r30, r18
    2c0e:	e8 0f       	add	r30, r24
    2c10:	f9 1f       	adc	r31, r25
    2c12:	80 81       	ld	r24, Z
    2c14:	88 23       	and	r24, r24
    2c16:	a1 f0       	breq	.+40     	; 0x2c40 <Func_TX+0x4c>
	{
		UART_SendByteNoBlock(Asynch_Send_Str[i]);
    2c18:	20 91 de 01 	lds	r18, 0x01DE
    2c1c:	30 91 df 01 	lds	r19, 0x01DF
    2c20:	80 91 70 01 	lds	r24, 0x0170
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	f9 01       	movw	r30, r18
    2c2a:	e8 0f       	add	r30, r24
    2c2c:	f9 1f       	adc	r31, r25
    2c2e:	80 81       	ld	r24, Z
    2c30:	0e 94 c1 24 	call	0x4982	; 0x4982 <UART_SendByteNoBlock>
		i++;
    2c34:	80 91 70 01 	lds	r24, 0x0170
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	80 93 70 01 	sts	0x0170, r24
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <Func_TX+0x56>
	}
	else
		{
		i=1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	80 93 70 01 	sts	0x0170, r24
		UART_TX_InterruptDisable();
    2c46:	0e 94 29 24 	call	0x4852	; 0x4852 <UART_TX_InterruptDisable>
		}
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <UART_SendString_Asynch_NocodeInInt>:
								////////////////////////////////////
								
void UART_SendString_Asynch_NocodeInInt(u8 *Str)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <UART_SendString_Asynch_NocodeInInt+0x6>
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_SetCallBack(Send_Int_Function2);
    2c5e:	80 e6       	ldi	r24, 0x60	; 96
    2c60:	96 e1       	ldi	r25, 0x16	; 22
    2c62:	0e 94 49 24 	call	0x4892	; 0x4892 <UART_TX_SetCallBack>
		UART_TX_InterruptEnable();
    2c66:	0e 94 1b 24 	call	0x4836	; 0x4836 <UART_TX_InterruptEnable>
	static	u8 i=0;
	if(flag)
    2c6a:	80 91 6f 01 	lds	r24, 0x016F
    2c6e:	88 23       	and	r24, r24
    2c70:	11 f1       	breq	.+68     	; 0x2cb6 <UART_SendString_Asynch_NocodeInInt+0x66>
		{
		if(Str[i])
    2c72:	80 91 dc 01 	lds	r24, 0x01DC
    2c76:	28 2f       	mov	r18, r24
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7e:	fc 01       	movw	r30, r24
    2c80:	e2 0f       	add	r30, r18
    2c82:	f3 1f       	adc	r31, r19
    2c84:	80 81       	ld	r24, Z
    2c86:	88 23       	and	r24, r24
    2c88:	a1 f0       	breq	.+40     	; 0x2cb2 <UART_SendString_Asynch_NocodeInInt+0x62>
			{
			UART_SendByteNoBlock(Str[i]);
    2c8a:	80 91 dc 01 	lds	r24, 0x01DC
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	fc 01       	movw	r30, r24
    2c98:	e2 0f       	add	r30, r18
    2c9a:	f3 1f       	adc	r31, r19
    2c9c:	80 81       	ld	r24, Z
    2c9e:	0e 94 c1 24 	call	0x4982	; 0x4982 <UART_SendByteNoBlock>
			i++;
    2ca2:	80 91 dc 01 	lds	r24, 0x01DC
    2ca6:	8f 5f       	subi	r24, 0xFF	; 255
    2ca8:	80 93 dc 01 	sts	0x01DC, r24
			flag=0;
    2cac:	10 92 6f 01 	sts	0x016F, r1
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <UART_SendString_Asynch_NocodeInInt+0x66>
			}
			else
			i=0;
    2cb2:	10 92 dc 01 	sts	0x01DC, r1

		}

}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <Send_Int_Function2>:
static void Send_Int_Function2(void)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 93 6f 01 	sts	0x016F, r24
}
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <UART_ReceiveString>:


/*****************************************Receive Functions*****************************************************/

void UART_ReceiveString(u8 *Str)       //receive until 'enter'
{
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <UART_ReceiveString+0xa>
    2cde:	0f 92       	push	r0
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	9b 83       	std	Y+3, r25	; 0x03
    2ce6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2ce8:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_ReceiveByte();
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	02 0f       	add	r16, r18
    2cf8:	13 1f       	adc	r17, r19
    2cfa:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2cfe:	f8 01       	movw	r30, r16
    2d00:	80 83       	st	Z, r24
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <UART_ReceiveString+0x4e>
	while(Str[i] != 0x0d)
	{
		i++;
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_ReceiveByte();
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	9b 81       	ldd	r25, Y+3	; 0x03
    2d14:	8c 01       	movw	r16, r24
    2d16:	02 0f       	add	r16, r18
    2d18:	13 1f       	adc	r17, r19
    2d1a:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2d1e:	f8 01       	movw	r30, r16
    2d20:	80 83       	st	Z, r24

void UART_ReceiveString(u8 *Str)       //receive until 'enter'
{
	u8 i = 0;
	Str[i] = UART_ReceiveByte();
	while(Str[i] != 0x0d)
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	e2 0f       	add	r30, r18
    2d30:	f3 1f       	adc	r31, r19
    2d32:	80 81       	ld	r24, Z
    2d34:	8d 30       	cpi	r24, 0x0D	; 13
    2d36:	31 f7       	brne	.-52     	; 0x2d04 <UART_ReceiveString+0x30>
	{
		i++;
		Str[i] = UART_ReceiveByte();
	}
	Str[i] = '\0';
    2d38:	89 81       	ldd	r24, Y+1	; 0x01
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	fc 01       	movw	r30, r24
    2d44:	e2 0f       	add	r30, r18
    2d46:	f3 1f       	adc	r31, r19
    2d48:	10 82       	st	Z, r1
	//UART_RecieveByte();
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	1f 91       	pop	r17
    2d56:	0f 91       	pop	r16
    2d58:	08 95       	ret

00002d5a <UART_ReceiveString_Asynch>:
						

/*********************************** Receive Async ***************************************/
								
void UART_ReceiveString_Asynch(u8 *Str)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <UART_ReceiveString_Asynch+0x6>
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
	Asynch_receive_str=Str;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	90 93 e1 01 	sts	0x01E1, r25
    2d70:	80 93 e0 01 	sts	0x01E0, r24
	UART_RX_InterruptEnable();
    2d74:	0e 94 ff 23 	call	0x47fe	; 0x47fe <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(Receive_Int_Function);
    2d78:	85 ec       	ldi	r24, 0xC5	; 197
    2d7a:	96 e1       	ldi	r25, 0x16	; 22
    2d7c:	0e 94 37 24 	call	0x486e	; 0x486e <UART_RX_SetCallBack>

}
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <Receive_Int_Function>:

static void Receive_Int_Function(void)
{
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
	static u8 i=0;
	Asynch_receive_str[i]=UART_ReceiveByteNoBlock();
    2d96:	20 91 e0 01 	lds	r18, 0x01E0
    2d9a:	30 91 e1 01 	lds	r19, 0x01E1
    2d9e:	80 91 dd 01 	lds	r24, 0x01DD
    2da2:	88 2f       	mov	r24, r24
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	89 01       	movw	r16, r18
    2da8:	08 0f       	add	r16, r24
    2daa:	19 1f       	adc	r17, r25
    2dac:	0e 94 cf 24 	call	0x499e	; 0x499e <UART_ReceiveByteNoBlock>
    2db0:	f8 01       	movw	r30, r16
    2db2:	80 83       	st	Z, r24
	i++;
    2db4:	80 91 dd 01 	lds	r24, 0x01DD
    2db8:	8f 5f       	subi	r24, 0xFF	; 255
    2dba:	80 93 dd 01 	sts	0x01DD, r24

}
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <UART_SendString_MYProtocol>:


/************************************PROTOCOL ABOVE UART ***********************************/

void UART_SendString_MYProtocol(u8*str)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <UART_SendString_MYProtocol+0x6>
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <UART_SendString_MYProtocol+0x8>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <UART_SendString_MYProtocol+0xa>
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
	u8 i=0,lens=0;
    2dda:	1c 82       	std	Y+4, r1	; 0x04
    2ddc:	1b 82       	std	Y+3, r1	; 0x03
	u16 sum=0;
    2dde:	1a 82       	std	Y+2, r1	; 0x02
    2de0:	19 82       	std	Y+1, r1	; 0x01
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <UART_SendString_MYProtocol+0x44>
	while(str[lens])
	{

		sum+=str[lens];
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	28 2f       	mov	r18, r24
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	8d 81       	ldd	r24, Y+5	; 0x05
    2dec:	9e 81       	ldd	r25, Y+6	; 0x06
    2dee:	fc 01       	movw	r30, r24
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	80 81       	ld	r24, Z
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	9a 83       	std	Y+2, r25	; 0x02
    2e04:	89 83       	std	Y+1, r24	; 0x01
		
		lens++;
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	8f 5f       	subi	r24, 0xFF	; 255
    2e0a:	8b 83       	std	Y+3, r24	; 0x03

void UART_SendString_MYProtocol(u8*str)
{
	u8 i=0,lens=0;
	u16 sum=0;
	while(str[lens])
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	8d 81       	ldd	r24, Y+5	; 0x05
    2e14:	9e 81       	ldd	r25, Y+6	; 0x06
    2e16:	fc 01       	movw	r30, r24
    2e18:	e2 0f       	add	r30, r18
    2e1a:	f3 1f       	adc	r31, r19
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 23       	and	r24, r24
    2e20:	09 f7       	brne	.-62     	; 0x2de4 <UART_SendString_MYProtocol+0x1c>

		sum+=str[lens];
		
		lens++;
	}
	UART_SendByte(lens);
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>
	for(i=0;i<lens;i++)
    2e28:	1c 82       	std	Y+4, r1	; 0x04
    2e2a:	0e c0       	rjmp	.+28     	; 0x2e48 <UART_SendString_MYProtocol+0x80>
	{
		UART_SendByte(str[i]);
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	fc 01       	movw	r30, r24
    2e38:	e2 0f       	add	r30, r18
    2e3a:	f3 1f       	adc	r31, r19
    2e3c:	80 81       	ld	r24, Z
    2e3e:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>
		sum+=str[lens];
		
		lens++;
	}
	UART_SendByte(lens);
	for(i=0;i<lens;i++)
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
    2e44:	8f 5f       	subi	r24, 0xFF	; 255
    2e46:	8c 83       	std	Y+4, r24	; 0x04
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	98 17       	cp	r25, r24
    2e4e:	70 f3       	brcs	.-36     	; 0x2e2c <UART_SendString_MYProtocol+0x64>
	{
		UART_SendByte(str[i]);
	}
	UART_SendByte((u8)sum);
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>
	UART_SendByte((u8)(sum>>8));
    2e56:	89 81       	ldd	r24, Y+1	; 0x01
    2e58:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5a:	89 2f       	mov	r24, r25
    2e5c:	99 27       	eor	r25, r25
    2e5e:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <UART_SendByte>


}
    2e62:	26 96       	adiw	r28, 0x06	; 6
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <UART_ReceiveString_MyProtocol>:
u8 UART_ReceiveString_MyProtocol(u8*str)
{
    2e74:	0f 93       	push	r16
    2e76:	1f 93       	push	r17
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	2b 97       	sbiw	r28, 0x0b	; 11
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	9a 87       	std	Y+10, r25	; 0x0a
    2e8e:	89 87       	std	Y+9, r24	; 0x09
	u8 i=0,lens=0,firstbyte=0,secondbyte=0;
    2e90:	18 86       	std	Y+8, r1	; 0x08
    2e92:	1f 82       	std	Y+7, r1	; 0x07
    2e94:	1e 82       	std	Y+6, r1	; 0x06
    2e96:	1d 82       	std	Y+5, r1	; 0x05
	u16 sum_send=0,sum_calc=0;
    2e98:	1c 82       	std	Y+4, r1	; 0x04
    2e9a:	1b 82       	std	Y+3, r1	; 0x03
    2e9c:	1a 82       	std	Y+2, r1	; 0x02
    2e9e:	19 82       	std	Y+1, r1	; 0x01
	lens=UART_ReceiveByte();
    2ea0:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2ea4:	8f 83       	std	Y+7, r24	; 0x07
	for(i=0;i<lens;i++)
    2ea6:	18 86       	std	Y+8, r1	; 0x08
    2ea8:	20 c0       	rjmp	.+64     	; 0x2eea <UART_ReceiveString_MyProtocol+0x76>
	{
		str[i]=UART_ReceiveByte();
    2eaa:	88 85       	ldd	r24, Y+8	; 0x08
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	8c 01       	movw	r16, r24
    2eb6:	02 0f       	add	r16, r18
    2eb8:	13 1f       	adc	r17, r19
    2eba:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2ebe:	f8 01       	movw	r30, r16
    2ec0:	80 83       	st	Z, r24
		sum_calc+=str[i];
    2ec2:	88 85       	ldd	r24, Y+8	; 0x08
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	89 85       	ldd	r24, Y+9	; 0x09
    2eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ecc:	fc 01       	movw	r30, r24
    2ece:	e2 0f       	add	r30, r18
    2ed0:	f3 1f       	adc	r31, r19
    2ed2:	80 81       	ld	r24, Z
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	82 0f       	add	r24, r18
    2ede:	93 1f       	adc	r25, r19
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
u8 UART_ReceiveString_MyProtocol(u8*str)
{
	u8 i=0,lens=0,firstbyte=0,secondbyte=0;
	u16 sum_send=0,sum_calc=0;
	lens=UART_ReceiveByte();
	for(i=0;i<lens;i++)
    2ee4:	88 85       	ldd	r24, Y+8	; 0x08
    2ee6:	8f 5f       	subi	r24, 0xFF	; 255
    2ee8:	88 87       	std	Y+8, r24	; 0x08
    2eea:	98 85       	ldd	r25, Y+8	; 0x08
    2eec:	8f 81       	ldd	r24, Y+7	; 0x07
    2eee:	98 17       	cp	r25, r24
    2ef0:	e0 f2       	brcs	.-72     	; 0x2eaa <UART_ReceiveString_MyProtocol+0x36>
	{
		str[i]=UART_ReceiveByte();
		sum_calc+=str[i];
	}
	firstbyte=UART_ReceiveByte();
    2ef2:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2ef6:	8e 83       	std	Y+6, r24	; 0x06
	secondbyte=UART_ReceiveByte();
    2ef8:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UART_ReceiveByte>
    2efc:	8d 83       	std	Y+5, r24	; 0x05
	sum_send=firstbyte|(secondbyte<<8);
    2efe:	8e 81       	ldd	r24, Y+6	; 0x06
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	98 2f       	mov	r25, r24
    2f0c:	88 27       	eor	r24, r24
    2f0e:	82 2b       	or	r24, r18
    2f10:	93 2b       	or	r25, r19
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03

	if(sum_calc==sum_send)
    2f16:	29 81       	ldd	r18, Y+1	; 0x01
    2f18:	3a 81       	ldd	r19, Y+2	; 0x02
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	28 17       	cp	r18, r24
    2f20:	39 07       	cpc	r19, r25
    2f22:	19 f4       	brne	.+6      	; 0x2f2a <UART_ReceiveString_MyProtocol+0xb6>
		return 1;
    2f24:	f1 e0       	ldi	r31, 0x01	; 1
    2f26:	fb 87       	std	Y+11, r31	; 0x0b
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <UART_ReceiveString_MyProtocol+0xb8>
	else
		return 0;
    2f2a:	1b 86       	std	Y+11, r1	; 0x0b
    2f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2f2e:	2b 96       	adiw	r28, 0x0b	; 11
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	1f 91       	pop	r17
    2f40:	0f 91       	pop	r16
    2f42:	08 95       	ret

00002f44 <Push>:

static u8 Stack[STACK_SIZE];
static u8 SP=0;

Stack_Status_Type Push(u8 data)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <Push+0x6>
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	8a 83       	std	Y+2, r24	; 0x02
	Stack_Status_Type Status;
	if(SP==STACK_SIZE)
    2f50:	80 91 e2 01 	lds	r24, 0x01E2
    2f54:	8a 30       	cpi	r24, 0x0A	; 10
    2f56:	19 f4       	brne	.+6      	; 0x2f5e <Push+0x1a>
	{
		Status= STACK_FULL;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	10 c0       	rjmp	.+32     	; 0x2f7e <Push+0x3a>
	}
	else
	{
		Stack[SP]=data;
    2f5e:	80 91 e2 01 	lds	r24, 0x01E2
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	fc 01       	movw	r30, r24
    2f68:	ed 51       	subi	r30, 0x1D	; 29
    2f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	80 83       	st	Z, r24
		SP++;
    2f70:	80 91 e2 01 	lds	r24, 0x01E2
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	80 93 e2 01 	sts	0x01E2, r24
		Status= DONE;
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Status;
    2f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <Pop>:

Stack_Status_Type Pop(u8 *Pdata)
{
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <Pop+0x6>
    2f90:	0f 92       	push	r0
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62
    2f96:	9b 83       	std	Y+3, r25	; 0x03
    2f98:	8a 83       	std	Y+2, r24	; 0x02
		Stack_Status_Type Status;
		if(SP==0)
    2f9a:	80 91 e2 01 	lds	r24, 0x01E2
    2f9e:	88 23       	and	r24, r24
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <Pop+0x1c>
		{
			Status= STACK_EMPTY;
    2fa2:	19 82       	std	Y+1, r1	; 0x01
    2fa4:	12 c0       	rjmp	.+36     	; 0x2fca <Pop+0x40>
		}
		else
		{
			SP--;
    2fa6:	80 91 e2 01 	lds	r24, 0x01E2
    2faa:	81 50       	subi	r24, 0x01	; 1
    2fac:	80 93 e2 01 	sts	0x01E2, r24
			*Pdata=Stack[SP];
    2fb0:	80 91 e2 01 	lds	r24, 0x01E2
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	fc 01       	movw	r30, r24
    2fba:	ed 51       	subi	r30, 0x1D	; 29
    2fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbe:	80 81       	ld	r24, Z
    2fc0:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc2:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc4:	80 83       	st	Z, r24
			Status= DONE;
    2fc6:	82 e0       	ldi	r24, 0x02	; 2
    2fc8:	89 83       	std	Y+1, r24	; 0x01
		}
		return Status;
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <DIO_Init>:
#include "DIO_Interface.h"

void DIO_Init(void)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	2c 97       	sbiw	r28, 0x0c	; 12
    2fe2:	0f b6       	in	r0, 0x3f	; 63
    2fe4:	f8 94       	cli
    2fe6:	de bf       	out	0x3e, r29	; 62
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	cd bf       	out	0x3d, r28	; 61
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
    2fec:	19 82       	std	Y+1, r1	; 0x01
    2fee:	17 c2       	rjmp	.+1070   	; 0x341e <DIO_Init+0x446>
	{
		Status=PinsStatus[LocalIterator];
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	ef 58       	subi	r30, 0x8F	; 143
    2ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8a 83       	std	Y+2, r24	; 0x02
		Port=LocalIterator/8;
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	86 95       	lsr	r24
    3004:	86 95       	lsr	r24
    3006:	86 95       	lsr	r24
    3008:	8b 83       	std	Y+3, r24	; 0x03
		PinNum_InPort=LocalIterator%8;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	87 70       	andi	r24, 0x07	; 7
    300e:	8c 83       	std	Y+4, r24	; 0x04
		
		switch (Status)
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	3c 87       	std	Y+12, r19	; 0x0c
    3018:	2b 87       	std	Y+11, r18	; 0x0b
    301a:	8b 85       	ldd	r24, Y+11	; 0x0b
    301c:	9c 85       	ldd	r25, Y+12	; 0x0c
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	91 05       	cpc	r25, r1
    3022:	09 f4       	brne	.+2      	; 0x3026 <DIO_Init+0x4e>
    3024:	7a c0       	rjmp	.+244    	; 0x311a <DIO_Init+0x142>
    3026:	2b 85       	ldd	r18, Y+11	; 0x0b
    3028:	3c 85       	ldd	r19, Y+12	; 0x0c
    302a:	22 30       	cpi	r18, 0x02	; 2
    302c:	31 05       	cpc	r19, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <DIO_Init+0x5a>
    3030:	32 c1       	rjmp	.+612    	; 0x3296 <DIO_Init+0x2be>
    3032:	8b 85       	ldd	r24, Y+11	; 0x0b
    3034:	9c 85       	ldd	r25, Y+12	; 0x0c
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	09 f0       	breq	.+2      	; 0x303c <DIO_Init+0x64>
    303a:	ee c1       	rjmp	.+988    	; 0x3418 <DIO_Init+0x440>
		{
			case OUTPUT:
			switch (Port)
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	28 2f       	mov	r18, r24
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	3a 87       	std	Y+10, r19	; 0x0a
    3044:	29 87       	std	Y+9, r18	; 0x09
    3046:	89 85       	ldd	r24, Y+9	; 0x09
    3048:	9a 85       	ldd	r25, Y+10	; 0x0a
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	91 05       	cpc	r25, r1
    304e:	49 f1       	breq	.+82     	; 0x30a2 <DIO_Init+0xca>
    3050:	29 85       	ldd	r18, Y+9	; 0x09
    3052:	3a 85       	ldd	r19, Y+10	; 0x0a
    3054:	22 30       	cpi	r18, 0x02	; 2
    3056:	31 05       	cpc	r19, r1
    3058:	2c f4       	brge	.+10     	; 0x3064 <DIO_Init+0x8c>
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	00 97       	sbiw	r24, 0x00	; 0
    3060:	61 f0       	breq	.+24     	; 0x307a <DIO_Init+0xa2>
    3062:	da c1       	rjmp	.+948    	; 0x3418 <DIO_Init+0x440>
    3064:	29 85       	ldd	r18, Y+9	; 0x09
    3066:	3a 85       	ldd	r19, Y+10	; 0x0a
    3068:	22 30       	cpi	r18, 0x02	; 2
    306a:	31 05       	cpc	r19, r1
    306c:	71 f1       	breq	.+92     	; 0x30ca <DIO_Init+0xf2>
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	83 30       	cpi	r24, 0x03	; 3
    3074:	91 05       	cpc	r25, r1
    3076:	e9 f1       	breq	.+122    	; 0x30f2 <DIO_Init+0x11a>
    3078:	cf c1       	rjmp	.+926    	; 0x3418 <DIO_Init+0x440>
			{
				case PA:
				SET_BIT(DDRA,PinNum_InPort);
    307a:	aa e3       	ldi	r26, 0x3A	; 58
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ea e3       	ldi	r30, 0x3A	; 58
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	48 2f       	mov	r20, r24
    3086:	8c 81       	ldd	r24, Y+4	; 0x04
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	02 2e       	mov	r0, r18
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <DIO_Init+0xc0>
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <DIO_Init+0xbc>
    309c:	84 2b       	or	r24, r20
    309e:	8c 93       	st	X, r24
    30a0:	bb c1       	rjmp	.+886    	; 0x3418 <DIO_Init+0x440>
				break;
				case PB:
				SET_BIT(DDRB,PinNum_InPort);
    30a2:	a7 e3       	ldi	r26, 0x37	; 55
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e7 e3       	ldi	r30, 0x37	; 55
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	48 2f       	mov	r20, r24
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	02 2e       	mov	r0, r18
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <DIO_Init+0xe8>
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	0a 94       	dec	r0
    30c2:	e2 f7       	brpl	.-8      	; 0x30bc <DIO_Init+0xe4>
    30c4:	84 2b       	or	r24, r20
    30c6:	8c 93       	st	X, r24
    30c8:	a7 c1       	rjmp	.+846    	; 0x3418 <DIO_Init+0x440>
				break;
				case PC:
				SET_BIT(DDRC,PinNum_InPort);
    30ca:	a4 e3       	ldi	r26, 0x34	; 52
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e4 e3       	ldi	r30, 0x34	; 52
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	48 2f       	mov	r20, r24
    30d6:	8c 81       	ldd	r24, Y+4	; 0x04
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	02 2e       	mov	r0, r18
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <DIO_Init+0x110>
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	0a 94       	dec	r0
    30ea:	e2 f7       	brpl	.-8      	; 0x30e4 <DIO_Init+0x10c>
    30ec:	84 2b       	or	r24, r20
    30ee:	8c 93       	st	X, r24
    30f0:	93 c1       	rjmp	.+806    	; 0x3418 <DIO_Init+0x440>
				break;
				case PD:
				SET_BIT(DDRD,PinNum_InPort);
    30f2:	a1 e3       	ldi	r26, 0x31	; 49
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e1 e3       	ldi	r30, 0x31	; 49
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	48 2f       	mov	r20, r24
    30fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3100:	28 2f       	mov	r18, r24
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	02 2e       	mov	r0, r18
    310a:	02 c0       	rjmp	.+4      	; 0x3110 <DIO_Init+0x138>
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	0a 94       	dec	r0
    3112:	e2 f7       	brpl	.-8      	; 0x310c <DIO_Init+0x134>
    3114:	84 2b       	or	r24, r20
    3116:	8c 93       	st	X, r24
    3118:	7f c1       	rjmp	.+766    	; 0x3418 <DIO_Init+0x440>
				break;
			}
			break;
			case INPULLUP:
			switch (Port)
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	28 2f       	mov	r18, r24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	38 87       	std	Y+8, r19	; 0x08
    3122:	2f 83       	std	Y+7, r18	; 0x07
    3124:	8f 81       	ldd	r24, Y+7	; 0x07
    3126:	98 85       	ldd	r25, Y+8	; 0x08
    3128:	81 30       	cpi	r24, 0x01	; 1
    312a:	91 05       	cpc	r25, r1
    312c:	09 f4       	brne	.+2      	; 0x3130 <DIO_Init+0x158>
    312e:	3e c0       	rjmp	.+124    	; 0x31ac <DIO_Init+0x1d4>
    3130:	2f 81       	ldd	r18, Y+7	; 0x07
    3132:	38 85       	ldd	r19, Y+8	; 0x08
    3134:	22 30       	cpi	r18, 0x02	; 2
    3136:	31 05       	cpc	r19, r1
    3138:	2c f4       	brge	.+10     	; 0x3144 <DIO_Init+0x16c>
    313a:	8f 81       	ldd	r24, Y+7	; 0x07
    313c:	98 85       	ldd	r25, Y+8	; 0x08
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	71 f0       	breq	.+28     	; 0x315e <DIO_Init+0x186>
    3142:	6a c1       	rjmp	.+724    	; 0x3418 <DIO_Init+0x440>
    3144:	2f 81       	ldd	r18, Y+7	; 0x07
    3146:	38 85       	ldd	r19, Y+8	; 0x08
    3148:	22 30       	cpi	r18, 0x02	; 2
    314a:	31 05       	cpc	r19, r1
    314c:	09 f4       	brne	.+2      	; 0x3150 <DIO_Init+0x178>
    314e:	55 c0       	rjmp	.+170    	; 0x31fa <DIO_Init+0x222>
    3150:	8f 81       	ldd	r24, Y+7	; 0x07
    3152:	98 85       	ldd	r25, Y+8	; 0x08
    3154:	83 30       	cpi	r24, 0x03	; 3
    3156:	91 05       	cpc	r25, r1
    3158:	09 f4       	brne	.+2      	; 0x315c <DIO_Init+0x184>
    315a:	76 c0       	rjmp	.+236    	; 0x3248 <DIO_Init+0x270>
    315c:	5d c1       	rjmp	.+698    	; 0x3418 <DIO_Init+0x440>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
    315e:	aa e3       	ldi	r26, 0x3A	; 58
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	ea e3       	ldi	r30, 0x3A	; 58
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	48 2f       	mov	r20, r24
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	02 c0       	rjmp	.+4      	; 0x317a <DIO_Init+0x1a2>
    3176:	88 0f       	add	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	2a 95       	dec	r18
    317c:	e2 f7       	brpl	.-8      	; 0x3176 <DIO_Init+0x19e>
    317e:	80 95       	com	r24
    3180:	84 23       	and	r24, r20
    3182:	8c 93       	st	X, r24
				SET_BIT(PORTA,PinNum_InPort);
    3184:	ab e3       	ldi	r26, 0x3B	; 59
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	eb e3       	ldi	r30, 0x3B	; 59
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	48 2f       	mov	r20, r24
    3190:	8c 81       	ldd	r24, Y+4	; 0x04
    3192:	28 2f       	mov	r18, r24
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	02 2e       	mov	r0, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <DIO_Init+0x1ca>
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	0a 94       	dec	r0
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <DIO_Init+0x1c6>
    31a6:	84 2b       	or	r24, r20
    31a8:	8c 93       	st	X, r24
    31aa:	36 c1       	rjmp	.+620    	; 0x3418 <DIO_Init+0x440>
				break;
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
    31ac:	a7 e3       	ldi	r26, 0x37	; 55
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	e7 e3       	ldi	r30, 0x37	; 55
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	48 2f       	mov	r20, r24
    31b8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <DIO_Init+0x1f0>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	2a 95       	dec	r18
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <DIO_Init+0x1ec>
    31cc:	80 95       	com	r24
    31ce:	84 23       	and	r24, r20
    31d0:	8c 93       	st	X, r24
				SET_BIT(PORTB,PinNum_InPort);
    31d2:	a8 e3       	ldi	r26, 0x38	; 56
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e8 e3       	ldi	r30, 0x38	; 56
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	48 2f       	mov	r20, r24
    31de:	8c 81       	ldd	r24, Y+4	; 0x04
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	02 2e       	mov	r0, r18
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <DIO_Init+0x218>
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <DIO_Init+0x214>
    31f4:	84 2b       	or	r24, r20
    31f6:	8c 93       	st	X, r24
    31f8:	0f c1       	rjmp	.+542    	; 0x3418 <DIO_Init+0x440>
				break;
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
    31fa:	a4 e3       	ldi	r26, 0x34	; 52
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e4 e3       	ldi	r30, 0x34	; 52
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	48 2f       	mov	r20, r24
    3206:	8c 81       	ldd	r24, Y+4	; 0x04
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <DIO_Init+0x23e>
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	2a 95       	dec	r18
    3218:	e2 f7       	brpl	.-8      	; 0x3212 <DIO_Init+0x23a>
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	8c 93       	st	X, r24
				SET_BIT(PORTC,PinNum_InPort);
    3220:	a5 e3       	ldi	r26, 0x35	; 53
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e5 e3       	ldi	r30, 0x35	; 53
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	48 2f       	mov	r20, r24
    322c:	8c 81       	ldd	r24, Y+4	; 0x04
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	02 2e       	mov	r0, r18
    3238:	02 c0       	rjmp	.+4      	; 0x323e <DIO_Init+0x266>
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	0a 94       	dec	r0
    3240:	e2 f7       	brpl	.-8      	; 0x323a <DIO_Init+0x262>
    3242:	84 2b       	or	r24, r20
    3244:	8c 93       	st	X, r24
    3246:	e8 c0       	rjmp	.+464    	; 0x3418 <DIO_Init+0x440>
				break;
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
    3248:	a1 e3       	ldi	r26, 0x31	; 49
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e1 e3       	ldi	r30, 0x31	; 49
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	48 2f       	mov	r20, r24
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <DIO_Init+0x28c>
    3260:	88 0f       	add	r24, r24
    3262:	99 1f       	adc	r25, r25
    3264:	2a 95       	dec	r18
    3266:	e2 f7       	brpl	.-8      	; 0x3260 <DIO_Init+0x288>
    3268:	80 95       	com	r24
    326a:	84 23       	and	r24, r20
    326c:	8c 93       	st	X, r24
				SET_BIT(PORTD,PinNum_InPort);
    326e:	a2 e3       	ldi	r26, 0x32	; 50
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	e2 e3       	ldi	r30, 0x32	; 50
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	48 2f       	mov	r20, r24
    327a:	8c 81       	ldd	r24, Y+4	; 0x04
    327c:	28 2f       	mov	r18, r24
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	02 2e       	mov	r0, r18
    3286:	02 c0       	rjmp	.+4      	; 0x328c <DIO_Init+0x2b4>
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	0a 94       	dec	r0
    328e:	e2 f7       	brpl	.-8      	; 0x3288 <DIO_Init+0x2b0>
    3290:	84 2b       	or	r24, r20
    3292:	8c 93       	st	X, r24
    3294:	c1 c0       	rjmp	.+386    	; 0x3418 <DIO_Init+0x440>
				break;
			}
			break;
			case INFREE:
			switch (Port)
    3296:	8b 81       	ldd	r24, Y+3	; 0x03
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	3e 83       	std	Y+6, r19	; 0x06
    329e:	2d 83       	std	Y+5, r18	; 0x05
    32a0:	8d 81       	ldd	r24, Y+5	; 0x05
    32a2:	9e 81       	ldd	r25, Y+6	; 0x06
    32a4:	81 30       	cpi	r24, 0x01	; 1
    32a6:	91 05       	cpc	r25, r1
    32a8:	09 f4       	brne	.+2      	; 0x32ac <DIO_Init+0x2d4>
    32aa:	3f c0       	rjmp	.+126    	; 0x332a <DIO_Init+0x352>
    32ac:	2d 81       	ldd	r18, Y+5	; 0x05
    32ae:	3e 81       	ldd	r19, Y+6	; 0x06
    32b0:	22 30       	cpi	r18, 0x02	; 2
    32b2:	31 05       	cpc	r19, r1
    32b4:	2c f4       	brge	.+10     	; 0x32c0 <DIO_Init+0x2e8>
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	71 f0       	breq	.+28     	; 0x32da <DIO_Init+0x302>
    32be:	ac c0       	rjmp	.+344    	; 0x3418 <DIO_Init+0x440>
    32c0:	2d 81       	ldd	r18, Y+5	; 0x05
    32c2:	3e 81       	ldd	r19, Y+6	; 0x06
    32c4:	22 30       	cpi	r18, 0x02	; 2
    32c6:	31 05       	cpc	r19, r1
    32c8:	09 f4       	brne	.+2      	; 0x32cc <DIO_Init+0x2f4>
    32ca:	57 c0       	rjmp	.+174    	; 0x337a <DIO_Init+0x3a2>
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	83 30       	cpi	r24, 0x03	; 3
    32d2:	91 05       	cpc	r25, r1
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <DIO_Init+0x300>
    32d6:	79 c0       	rjmp	.+242    	; 0x33ca <DIO_Init+0x3f2>
    32d8:	9f c0       	rjmp	.+318    	; 0x3418 <DIO_Init+0x440>
			{
				case PA:
				CLEAR_BIT(DDRA,PinNum_InPort);
    32da:	aa e3       	ldi	r26, 0x3A	; 58
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	ea e3       	ldi	r30, 0x3A	; 58
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	48 2f       	mov	r20, r24
    32e6:	8c 81       	ldd	r24, Y+4	; 0x04
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <DIO_Init+0x31e>
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	2a 95       	dec	r18
    32f8:	e2 f7       	brpl	.-8      	; 0x32f2 <DIO_Init+0x31a>
    32fa:	80 95       	com	r24
    32fc:	84 23       	and	r24, r20
    32fe:	8c 93       	st	X, r24
				CLEAR_BIT(PORTA,PinNum_InPort);
    3300:	ab e3       	ldi	r26, 0x3B	; 59
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	eb e3       	ldi	r30, 0x3B	; 59
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	48 2f       	mov	r20, r24
    330c:	8c 81       	ldd	r24, Y+4	; 0x04
    330e:	28 2f       	mov	r18, r24
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	02 2e       	mov	r0, r18
    3318:	02 c0       	rjmp	.+4      	; 0x331e <DIO_Init+0x346>
    331a:	88 0f       	add	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	0a 94       	dec	r0
    3320:	e2 f7       	brpl	.-8      	; 0x331a <DIO_Init+0x342>
    3322:	80 95       	com	r24
    3324:	84 23       	and	r24, r20
    3326:	8c 93       	st	X, r24
    3328:	77 c0       	rjmp	.+238    	; 0x3418 <DIO_Init+0x440>
				break;
				case PB:
				CLEAR_BIT(DDRB,PinNum_InPort);
    332a:	a7 e3       	ldi	r26, 0x37	; 55
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e7 e3       	ldi	r30, 0x37	; 55
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	48 2f       	mov	r20, r24
    3336:	8c 81       	ldd	r24, Y+4	; 0x04
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <DIO_Init+0x36e>
    3342:	88 0f       	add	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	2a 95       	dec	r18
    3348:	e2 f7       	brpl	.-8      	; 0x3342 <DIO_Init+0x36a>
    334a:	80 95       	com	r24
    334c:	84 23       	and	r24, r20
    334e:	8c 93       	st	X, r24
				CLEAR_BIT(PORTB,PinNum_InPort);
    3350:	a8 e3       	ldi	r26, 0x38	; 56
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e8 e3       	ldi	r30, 0x38	; 56
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	48 2f       	mov	r20, r24
    335c:	8c 81       	ldd	r24, Y+4	; 0x04
    335e:	28 2f       	mov	r18, r24
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	02 2e       	mov	r0, r18
    3368:	02 c0       	rjmp	.+4      	; 0x336e <DIO_Init+0x396>
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	0a 94       	dec	r0
    3370:	e2 f7       	brpl	.-8      	; 0x336a <DIO_Init+0x392>
    3372:	80 95       	com	r24
    3374:	84 23       	and	r24, r20
    3376:	8c 93       	st	X, r24
    3378:	4f c0       	rjmp	.+158    	; 0x3418 <DIO_Init+0x440>
				break;
				case PC:
				CLEAR_BIT(DDRC,PinNum_InPort);
    337a:	a4 e3       	ldi	r26, 0x34	; 52
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e4 e3       	ldi	r30, 0x34	; 52
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	48 2f       	mov	r20, r24
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	28 2f       	mov	r18, r24
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <DIO_Init+0x3be>
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	2a 95       	dec	r18
    3398:	e2 f7       	brpl	.-8      	; 0x3392 <DIO_Init+0x3ba>
    339a:	80 95       	com	r24
    339c:	84 23       	and	r24, r20
    339e:	8c 93       	st	X, r24
				CLEAR_BIT(PORTC,PinNum_InPort);
    33a0:	a5 e3       	ldi	r26, 0x35	; 53
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	e5 e3       	ldi	r30, 0x35	; 53
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	48 2f       	mov	r20, r24
    33ac:	8c 81       	ldd	r24, Y+4	; 0x04
    33ae:	28 2f       	mov	r18, r24
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	02 2e       	mov	r0, r18
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <DIO_Init+0x3e6>
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	0a 94       	dec	r0
    33c0:	e2 f7       	brpl	.-8      	; 0x33ba <DIO_Init+0x3e2>
    33c2:	80 95       	com	r24
    33c4:	84 23       	and	r24, r20
    33c6:	8c 93       	st	X, r24
    33c8:	27 c0       	rjmp	.+78     	; 0x3418 <DIO_Init+0x440>
				break;
				case PD:
				CLEAR_BIT(DDRD,PinNum_InPort);
    33ca:	a1 e3       	ldi	r26, 0x31	; 49
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e1 e3       	ldi	r30, 0x31	; 49
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	48 2f       	mov	r20, r24
    33d6:	8c 81       	ldd	r24, Y+4	; 0x04
    33d8:	28 2f       	mov	r18, r24
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <DIO_Init+0x40e>
    33e2:	88 0f       	add	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	2a 95       	dec	r18
    33e8:	e2 f7       	brpl	.-8      	; 0x33e2 <DIO_Init+0x40a>
    33ea:	80 95       	com	r24
    33ec:	84 23       	and	r24, r20
    33ee:	8c 93       	st	X, r24
				CLEAR_BIT(PORTD,PinNum_InPort);
    33f0:	a2 e3       	ldi	r26, 0x32	; 50
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	e2 e3       	ldi	r30, 0x32	; 50
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	80 81       	ld	r24, Z
    33fa:	48 2f       	mov	r20, r24
    33fc:	8c 81       	ldd	r24, Y+4	; 0x04
    33fe:	28 2f       	mov	r18, r24
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	02 2e       	mov	r0, r18
    3408:	02 c0       	rjmp	.+4      	; 0x340e <DIO_Init+0x436>
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	0a 94       	dec	r0
    3410:	e2 f7       	brpl	.-8      	; 0x340a <DIO_Init+0x432>
    3412:	80 95       	com	r24
    3414:	84 23       	and	r24, r20
    3416:	8c 93       	st	X, r24
	u8 PinNum_InPort;
	Port_type Port;
	PinStatus_type Status;
	u8 LocalIterator;
	
	for (LocalIterator=0;LocalIterator<TOTAL_PINS;LocalIterator++)
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	8f 5f       	subi	r24, 0xFF	; 255
    341c:	89 83       	std	Y+1, r24	; 0x01
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	80 32       	cpi	r24, 0x20	; 32
    3422:	08 f4       	brcc	.+2      	; 0x3426 <DIO_Init+0x44e>
    3424:	e5 cd       	rjmp	.-1078   	; 0x2ff0 <DIO_Init+0x18>
			}
			break;
		}
		
	}
}
    3426:	2c 96       	adiw	r28, 0x0c	; 12
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <DIO_WritePort>:

void DIO_WritePort(Port_type Port,u8 Value)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	00 d0       	rcall	.+0      	; 0x343e <DIO_WritePort+0x6>
    343e:	00 d0       	rcall	.+0      	; 0x3440 <DIO_WritePort+0x8>
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port)
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	3c 83       	std	Y+4, r19	; 0x04
    3450:	2b 83       	std	Y+3, r18	; 0x03
    3452:	8b 81       	ldd	r24, Y+3	; 0x03
    3454:	9c 81       	ldd	r25, Y+4	; 0x04
    3456:	81 30       	cpi	r24, 0x01	; 1
    3458:	91 05       	cpc	r25, r1
    345a:	d1 f0       	breq	.+52     	; 0x3490 <DIO_WritePort+0x58>
    345c:	2b 81       	ldd	r18, Y+3	; 0x03
    345e:	3c 81       	ldd	r19, Y+4	; 0x04
    3460:	22 30       	cpi	r18, 0x02	; 2
    3462:	31 05       	cpc	r19, r1
    3464:	2c f4       	brge	.+10     	; 0x3470 <DIO_WritePort+0x38>
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	61 f0       	breq	.+24     	; 0x3486 <DIO_WritePort+0x4e>
    346e:	1e c0       	rjmp	.+60     	; 0x34ac <DIO_WritePort+0x74>
    3470:	2b 81       	ldd	r18, Y+3	; 0x03
    3472:	3c 81       	ldd	r19, Y+4	; 0x04
    3474:	22 30       	cpi	r18, 0x02	; 2
    3476:	31 05       	cpc	r19, r1
    3478:	81 f0       	breq	.+32     	; 0x349a <DIO_WritePort+0x62>
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	9c 81       	ldd	r25, Y+4	; 0x04
    347e:	83 30       	cpi	r24, 0x03	; 3
    3480:	91 05       	cpc	r25, r1
    3482:	81 f0       	breq	.+32     	; 0x34a4 <DIO_WritePort+0x6c>
    3484:	13 c0       	rjmp	.+38     	; 0x34ac <DIO_WritePort+0x74>
	{
		case PA:
		ASSIGN_REG(PORTA,Value);
    3486:	eb e3       	ldi	r30, 0x3B	; 59
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	80 83       	st	Z, r24
    348e:	0e c0       	rjmp	.+28     	; 0x34ac <DIO_WritePort+0x74>
		break;
		case PB:
		ASSIGN_REG(PORTB,Value);
    3490:	e8 e3       	ldi	r30, 0x38	; 56
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	80 83       	st	Z, r24
    3498:	09 c0       	rjmp	.+18     	; 0x34ac <DIO_WritePort+0x74>
		break;
		case PC:
		ASSIGN_REG(PORTC,Value);
    349a:	e5 e3       	ldi	r30, 0x35	; 53
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	8a 81       	ldd	r24, Y+2	; 0x02
    34a0:	80 83       	st	Z, r24
    34a2:	04 c0       	rjmp	.+8      	; 0x34ac <DIO_WritePort+0x74>
		break;
		case PD:
		ASSIGN_REG(PORTD,Value);
    34a4:	e2 e3       	ldi	r30, 0x32	; 50
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	80 83       	st	Z, r24
		break;
	}
}
    34ac:	0f 90       	pop	r0
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <DIO_WriteBitsInPort>:
void DIO_WriteBitsInPort(Port_type Port,u8 Value,u8 Mask)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <DIO_WriteBitsInPort+0x6>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <DIO_WriteBitsInPort+0x8>
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	6a 83       	std	Y+2, r22	; 0x02
    34cc:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	3d 83       	std	Y+5, r19	; 0x05
    34d6:	2c 83       	std	Y+4, r18	; 0x04
    34d8:	8c 81       	ldd	r24, Y+4	; 0x04
    34da:	9d 81       	ldd	r25, Y+5	; 0x05
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	91 05       	cpc	r25, r1
    34e0:	59 f1       	breq	.+86     	; 0x3538 <DIO_WriteBitsInPort+0x7e>
    34e2:	2c 81       	ldd	r18, Y+4	; 0x04
    34e4:	3d 81       	ldd	r19, Y+5	; 0x05
    34e6:	22 30       	cpi	r18, 0x02	; 2
    34e8:	31 05       	cpc	r19, r1
    34ea:	2c f4       	brge	.+10     	; 0x34f6 <DIO_WriteBitsInPort+0x3c>
    34ec:	8c 81       	ldd	r24, Y+4	; 0x04
    34ee:	9d 81       	ldd	r25, Y+5	; 0x05
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f0       	breq	.+26     	; 0x350e <DIO_WriteBitsInPort+0x54>
    34f4:	5f c0       	rjmp	.+190    	; 0x35b4 <DIO_WriteBitsInPort+0xfa>
    34f6:	2c 81       	ldd	r18, Y+4	; 0x04
    34f8:	3d 81       	ldd	r19, Y+5	; 0x05
    34fa:	22 30       	cpi	r18, 0x02	; 2
    34fc:	31 05       	cpc	r19, r1
    34fe:	89 f1       	breq	.+98     	; 0x3562 <DIO_WriteBitsInPort+0xa8>
    3500:	8c 81       	ldd	r24, Y+4	; 0x04
    3502:	9d 81       	ldd	r25, Y+5	; 0x05
    3504:	83 30       	cpi	r24, 0x03	; 3
    3506:	91 05       	cpc	r25, r1
    3508:	09 f4       	brne	.+2      	; 0x350c <DIO_WriteBitsInPort+0x52>
    350a:	40 c0       	rjmp	.+128    	; 0x358c <DIO_WriteBitsInPort+0xd2>
    350c:	53 c0       	rjmp	.+166    	; 0x35b4 <DIO_WriteBitsInPort+0xfa>
	{
		case PA:
		CLEAR_BITS_REG(PORTA,Mask);
    350e:	ab e3       	ldi	r26, 0x3B	; 59
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	eb e3       	ldi	r30, 0x3B	; 59
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	98 2f       	mov	r25, r24
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	80 95       	com	r24
    351e:	89 23       	and	r24, r25
    3520:	8c 93       	st	X, r24
		SET_BITS_REG(PORTA,Value&Mask);
    3522:	ab e3       	ldi	r26, 0x3B	; 59
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	eb e3       	ldi	r30, 0x3B	; 59
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	20 81       	ld	r18, Z
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	89 23       	and	r24, r25
    3532:	82 2b       	or	r24, r18
    3534:	8c 93       	st	X, r24
    3536:	3e c0       	rjmp	.+124    	; 0x35b4 <DIO_WriteBitsInPort+0xfa>
		break;
		case PB:
		CLEAR_BITS_REG(PORTB,Mask);
    3538:	a8 e3       	ldi	r26, 0x38	; 56
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e8 e3       	ldi	r30, 0x38	; 56
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	80 81       	ld	r24, Z
    3542:	98 2f       	mov	r25, r24
    3544:	8b 81       	ldd	r24, Y+3	; 0x03
    3546:	80 95       	com	r24
    3548:	89 23       	and	r24, r25
    354a:	8c 93       	st	X, r24
		SET_BITS_REG(PORTB,Value&Mask);
    354c:	a8 e3       	ldi	r26, 0x38	; 56
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	e8 e3       	ldi	r30, 0x38	; 56
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	20 81       	ld	r18, Z
    3556:	9a 81       	ldd	r25, Y+2	; 0x02
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	89 23       	and	r24, r25
    355c:	82 2b       	or	r24, r18
    355e:	8c 93       	st	X, r24
    3560:	29 c0       	rjmp	.+82     	; 0x35b4 <DIO_WriteBitsInPort+0xfa>
		break;
		case PC:
		CLEAR_BITS_REG(PORTC,Mask);
    3562:	a5 e3       	ldi	r26, 0x35	; 53
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e5 e3       	ldi	r30, 0x35	; 53
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	98 2f       	mov	r25, r24
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	80 95       	com	r24
    3572:	89 23       	and	r24, r25
    3574:	8c 93       	st	X, r24
		SET_BITS_REG(PORTC,Value&Mask);
    3576:	a5 e3       	ldi	r26, 0x35	; 53
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	e5 e3       	ldi	r30, 0x35	; 53
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	20 81       	ld	r18, Z
    3580:	9a 81       	ldd	r25, Y+2	; 0x02
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	89 23       	and	r24, r25
    3586:	82 2b       	or	r24, r18
    3588:	8c 93       	st	X, r24
    358a:	14 c0       	rjmp	.+40     	; 0x35b4 <DIO_WriteBitsInPort+0xfa>
		break;
		case PD:
		CLEAR_BITS_REG(PORTD,Mask);
    358c:	a2 e3       	ldi	r26, 0x32	; 50
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e2 e3       	ldi	r30, 0x32	; 50
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	98 2f       	mov	r25, r24
    3598:	8b 81       	ldd	r24, Y+3	; 0x03
    359a:	80 95       	com	r24
    359c:	89 23       	and	r24, r25
    359e:	8c 93       	st	X, r24
		SET_BITS_REG(PORTD,Value&Mask);
    35a0:	a2 e3       	ldi	r26, 0x32	; 50
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e2 e3       	ldi	r30, 0x32	; 50
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	20 81       	ld	r18, Z
    35aa:	9a 81       	ldd	r25, Y+2	; 0x02
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	89 23       	and	r24, r25
    35b0:	82 2b       	or	r24, r18
    35b2:	8c 93       	st	X, r24
		break;
	}
}
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <DIO_ReadPort>:
u8 DIO_ReadPort(Port_type Port)
{
    35c4:	df 93       	push	r29
    35c6:	cf 93       	push	r28
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <DIO_ReadPort+0x6>
    35ca:	00 d0       	rcall	.+0      	; 0x35cc <DIO_ReadPort+0x8>
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	89 83       	std	Y+1, r24	; 0x01
	switch (Port)
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	3c 83       	std	Y+4, r19	; 0x04
    35da:	2b 83       	std	Y+3, r18	; 0x03
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	9c 81       	ldd	r25, Y+4	; 0x04
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	91 05       	cpc	r25, r1
    35e4:	d1 f0       	breq	.+52     	; 0x361a <DIO_ReadPort+0x56>
    35e6:	2b 81       	ldd	r18, Y+3	; 0x03
    35e8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ea:	22 30       	cpi	r18, 0x02	; 2
    35ec:	31 05       	cpc	r19, r1
    35ee:	2c f4       	brge	.+10     	; 0x35fa <DIO_ReadPort+0x36>
    35f0:	8b 81       	ldd	r24, Y+3	; 0x03
    35f2:	9c 81       	ldd	r25, Y+4	; 0x04
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	61 f0       	breq	.+24     	; 0x3610 <DIO_ReadPort+0x4c>
    35f8:	1f c0       	rjmp	.+62     	; 0x3638 <DIO_ReadPort+0x74>
    35fa:	2b 81       	ldd	r18, Y+3	; 0x03
    35fc:	3c 81       	ldd	r19, Y+4	; 0x04
    35fe:	22 30       	cpi	r18, 0x02	; 2
    3600:	31 05       	cpc	r19, r1
    3602:	81 f0       	breq	.+32     	; 0x3624 <DIO_ReadPort+0x60>
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	9c 81       	ldd	r25, Y+4	; 0x04
    3608:	83 30       	cpi	r24, 0x03	; 3
    360a:	91 05       	cpc	r25, r1
    360c:	81 f0       	breq	.+32     	; 0x362e <DIO_ReadPort+0x6a>
    360e:	14 c0       	rjmp	.+40     	; 0x3638 <DIO_ReadPort+0x74>
	{
		case PA:
		return PINA;
    3610:	e9 e3       	ldi	r30, 0x39	; 57
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	90 81       	ld	r25, Z
    3616:	9a 83       	std	Y+2, r25	; 0x02
    3618:	10 c0       	rjmp	.+32     	; 0x363a <DIO_ReadPort+0x76>
		break;
		case PB:
		return PINB;
    361a:	e6 e3       	ldi	r30, 0x36	; 54
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	20 81       	ld	r18, Z
    3620:	2a 83       	std	Y+2, r18	; 0x02
    3622:	0b c0       	rjmp	.+22     	; 0x363a <DIO_ReadPort+0x76>
		break;
		case PC:
		return PINC;
    3624:	e3 e3       	ldi	r30, 0x33	; 51
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	30 81       	ld	r19, Z
    362a:	3a 83       	std	Y+2, r19	; 0x02
    362c:	06 c0       	rjmp	.+12     	; 0x363a <DIO_ReadPort+0x76>
		break;
		case PD:
		return PIND;
    362e:	e0 e3       	ldi	r30, 0x30	; 48
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	8a 83       	std	Y+2, r24	; 0x02
    3636:	01 c0       	rjmp	.+2      	; 0x363a <DIO_ReadPort+0x76>
		break;
		default:
		return 0x00;
    3638:	1a 82       	std	Y+2, r1	; 0x02
    363a:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <DIO_WritePin>:
void DIO_WritePin(PinNum_type Pin,VoltageLevel_type Value)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	00 d0       	rcall	.+0      	; 0x3650 <DIO_WritePin+0x6>
    3650:	00 d0       	rcall	.+0      	; 0x3652 <DIO_WritePin+0x8>
    3652:	00 d0       	rcall	.+0      	; 0x3654 <DIO_WritePin+0xa>
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	8b 83       	std	Y+3, r24	; 0x03
    365a:	6c 83       	std	Y+4, r22	; 0x04
	u8 PinNum_InPort=Pin%8;
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	87 70       	andi	r24, 0x07	; 7
    3660:	8a 83       	std	Y+2, r24	; 0x02
	Port_type Port=Pin/8;
    3662:	8b 81       	ldd	r24, Y+3	; 0x03
    3664:	86 95       	lsr	r24
    3666:	86 95       	lsr	r24
    3668:	86 95       	lsr	r24
    366a:	89 83       	std	Y+1, r24	; 0x01
	switch (Port)
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	28 2f       	mov	r18, r24
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	3e 83       	std	Y+6, r19	; 0x06
    3674:	2d 83       	std	Y+5, r18	; 0x05
    3676:	8d 81       	ldd	r24, Y+5	; 0x05
    3678:	9e 81       	ldd	r25, Y+6	; 0x06
    367a:	81 30       	cpi	r24, 0x01	; 1
    367c:	91 05       	cpc	r25, r1
    367e:	09 f4       	brne	.+2      	; 0x3682 <DIO_WritePin+0x38>
    3680:	43 c0       	rjmp	.+134    	; 0x3708 <DIO_WritePin+0xbe>
    3682:	2d 81       	ldd	r18, Y+5	; 0x05
    3684:	3e 81       	ldd	r19, Y+6	; 0x06
    3686:	22 30       	cpi	r18, 0x02	; 2
    3688:	31 05       	cpc	r19, r1
    368a:	2c f4       	brge	.+10     	; 0x3696 <DIO_WritePin+0x4c>
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	71 f0       	breq	.+28     	; 0x36b0 <DIO_WritePin+0x66>
    3694:	bc c0       	rjmp	.+376    	; 0x380e <DIO_WritePin+0x1c4>
    3696:	2d 81       	ldd	r18, Y+5	; 0x05
    3698:	3e 81       	ldd	r19, Y+6	; 0x06
    369a:	22 30       	cpi	r18, 0x02	; 2
    369c:	31 05       	cpc	r19, r1
    369e:	09 f4       	brne	.+2      	; 0x36a2 <DIO_WritePin+0x58>
    36a0:	5f c0       	rjmp	.+190    	; 0x3760 <DIO_WritePin+0x116>
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	83 30       	cpi	r24, 0x03	; 3
    36a8:	91 05       	cpc	r25, r1
    36aa:	09 f4       	brne	.+2      	; 0x36ae <DIO_WritePin+0x64>
    36ac:	85 c0       	rjmp	.+266    	; 0x37b8 <DIO_WritePin+0x16e>
    36ae:	af c0       	rjmp	.+350    	; 0x380e <DIO_WritePin+0x1c4>
	{
		case PA:
		if (HIGH==Value)
    36b0:	8c 81       	ldd	r24, Y+4	; 0x04
    36b2:	81 30       	cpi	r24, 0x01	; 1
    36b4:	a1 f4       	brne	.+40     	; 0x36de <DIO_WritePin+0x94>
		{
			SET_BIT(PORTA,PinNum_InPort);
    36b6:	ab e3       	ldi	r26, 0x3B	; 59
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	eb e3       	ldi	r30, 0x3B	; 59
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	48 2f       	mov	r20, r24
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	02 2e       	mov	r0, r18
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <DIO_WritePin+0x8a>
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	0a 94       	dec	r0
    36d6:	e2 f7       	brpl	.-8      	; 0x36d0 <DIO_WritePin+0x86>
    36d8:	84 2b       	or	r24, r20
    36da:	8c 93       	st	X, r24
    36dc:	98 c0       	rjmp	.+304    	; 0x380e <DIO_WritePin+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTA,PinNum_InPort);
    36de:	ab e3       	ldi	r26, 0x3B	; 59
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	eb e3       	ldi	r30, 0x3B	; 59
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	48 2f       	mov	r20, r24
    36ea:	8a 81       	ldd	r24, Y+2	; 0x02
    36ec:	28 2f       	mov	r18, r24
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	02 2e       	mov	r0, r18
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <DIO_WritePin+0xb2>
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	0a 94       	dec	r0
    36fe:	e2 f7       	brpl	.-8      	; 0x36f8 <DIO_WritePin+0xae>
    3700:	80 95       	com	r24
    3702:	84 23       	and	r24, r20
    3704:	8c 93       	st	X, r24
    3706:	83 c0       	rjmp	.+262    	; 0x380e <DIO_WritePin+0x1c4>
		}
		break;
		case PB:
		if (HIGH==Value)
    3708:	8c 81       	ldd	r24, Y+4	; 0x04
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	a1 f4       	brne	.+40     	; 0x3736 <DIO_WritePin+0xec>
		{
			SET_BIT(PORTB,PinNum_InPort);
    370e:	a8 e3       	ldi	r26, 0x38	; 56
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	e8 e3       	ldi	r30, 0x38	; 56
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	48 2f       	mov	r20, r24
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	28 2f       	mov	r18, r24
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	02 2e       	mov	r0, r18
    3726:	02 c0       	rjmp	.+4      	; 0x372c <DIO_WritePin+0xe2>
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	0a 94       	dec	r0
    372e:	e2 f7       	brpl	.-8      	; 0x3728 <DIO_WritePin+0xde>
    3730:	84 2b       	or	r24, r20
    3732:	8c 93       	st	X, r24
    3734:	6c c0       	rjmp	.+216    	; 0x380e <DIO_WritePin+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTB,PinNum_InPort);
    3736:	a8 e3       	ldi	r26, 0x38	; 56
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	e8 e3       	ldi	r30, 0x38	; 56
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	80 81       	ld	r24, Z
    3740:	48 2f       	mov	r20, r24
    3742:	8a 81       	ldd	r24, Y+2	; 0x02
    3744:	28 2f       	mov	r18, r24
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	02 2e       	mov	r0, r18
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <DIO_WritePin+0x10a>
    3750:	88 0f       	add	r24, r24
    3752:	99 1f       	adc	r25, r25
    3754:	0a 94       	dec	r0
    3756:	e2 f7       	brpl	.-8      	; 0x3750 <DIO_WritePin+0x106>
    3758:	80 95       	com	r24
    375a:	84 23       	and	r24, r20
    375c:	8c 93       	st	X, r24
    375e:	57 c0       	rjmp	.+174    	; 0x380e <DIO_WritePin+0x1c4>
		}
		break;
		case PC:
		if (HIGH==Value)
    3760:	8c 81       	ldd	r24, Y+4	; 0x04
    3762:	81 30       	cpi	r24, 0x01	; 1
    3764:	a1 f4       	brne	.+40     	; 0x378e <DIO_WritePin+0x144>
		{
			SET_BIT(PORTC,PinNum_InPort);
    3766:	a5 e3       	ldi	r26, 0x35	; 53
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	e5 e3       	ldi	r30, 0x35	; 53
    376c:	f0 e0       	ldi	r31, 0x00	; 0
    376e:	80 81       	ld	r24, Z
    3770:	48 2f       	mov	r20, r24
    3772:	8a 81       	ldd	r24, Y+2	; 0x02
    3774:	28 2f       	mov	r18, r24
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	02 2e       	mov	r0, r18
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <DIO_WritePin+0x13a>
    3780:	88 0f       	add	r24, r24
    3782:	99 1f       	adc	r25, r25
    3784:	0a 94       	dec	r0
    3786:	e2 f7       	brpl	.-8      	; 0x3780 <DIO_WritePin+0x136>
    3788:	84 2b       	or	r24, r20
    378a:	8c 93       	st	X, r24
    378c:	40 c0       	rjmp	.+128    	; 0x380e <DIO_WritePin+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTC,PinNum_InPort);
    378e:	a5 e3       	ldi	r26, 0x35	; 53
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	e5 e3       	ldi	r30, 0x35	; 53
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	48 2f       	mov	r20, r24
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	28 2f       	mov	r18, r24
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	02 2e       	mov	r0, r18
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <DIO_WritePin+0x162>
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	0a 94       	dec	r0
    37ae:	e2 f7       	brpl	.-8      	; 0x37a8 <DIO_WritePin+0x15e>
    37b0:	80 95       	com	r24
    37b2:	84 23       	and	r24, r20
    37b4:	8c 93       	st	X, r24
    37b6:	2b c0       	rjmp	.+86     	; 0x380e <DIO_WritePin+0x1c4>
		}
		break;
		case PD:
		if (HIGH==Value)
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	a1 f4       	brne	.+40     	; 0x37e6 <DIO_WritePin+0x19c>
		{
			SET_BIT(PORTD,PinNum_InPort);
    37be:	a2 e3       	ldi	r26, 0x32	; 50
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	e2 e3       	ldi	r30, 0x32	; 50
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	48 2f       	mov	r20, r24
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	28 2f       	mov	r18, r24
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	02 2e       	mov	r0, r18
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <DIO_WritePin+0x192>
    37d8:	88 0f       	add	r24, r24
    37da:	99 1f       	adc	r25, r25
    37dc:	0a 94       	dec	r0
    37de:	e2 f7       	brpl	.-8      	; 0x37d8 <DIO_WritePin+0x18e>
    37e0:	84 2b       	or	r24, r20
    37e2:	8c 93       	st	X, r24
    37e4:	14 c0       	rjmp	.+40     	; 0x380e <DIO_WritePin+0x1c4>
		}
		else
		{
			CLEAR_BIT(PORTD,PinNum_InPort);
    37e6:	a2 e3       	ldi	r26, 0x32	; 50
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e2 e3       	ldi	r30, 0x32	; 50
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	48 2f       	mov	r20, r24
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	02 2e       	mov	r0, r18
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <DIO_WritePin+0x1ba>
    3800:	88 0f       	add	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	0a 94       	dec	r0
    3806:	e2 f7       	brpl	.-8      	; 0x3800 <DIO_WritePin+0x1b6>
    3808:	80 95       	com	r24
    380a:	84 23       	and	r24, r20
    380c:	8c 93       	st	X, r24
		}
		break;
	}
}
    380e:	26 96       	adiw	r28, 0x06	; 6
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	08 95       	ret

00003820 <DIO_TogglePin>:
void DIO_TogglePin(PinNum_type Pin)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <DIO_TogglePin+0x6>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <DIO_TogglePin+0x8>
    3828:	0f 92       	push	r0
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	8b 83       	std	Y+3, r24	; 0x03
	u8 PinNum_InPort=Pin%8;
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	87 70       	andi	r24, 0x07	; 7
    3834:	8a 83       	std	Y+2, r24	; 0x02
	Port_type Port=Pin/8;
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	86 95       	lsr	r24
    383a:	86 95       	lsr	r24
    383c:	86 95       	lsr	r24
    383e:	89 83       	std	Y+1, r24	; 0x01
	switch (Port)
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	3d 83       	std	Y+5, r19	; 0x05
    3848:	2c 83       	std	Y+4, r18	; 0x04
    384a:	8c 81       	ldd	r24, Y+4	; 0x04
    384c:	9d 81       	ldd	r25, Y+5	; 0x05
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	91 05       	cpc	r25, r1
    3852:	49 f1       	breq	.+82     	; 0x38a6 <DIO_TogglePin+0x86>
    3854:	2c 81       	ldd	r18, Y+4	; 0x04
    3856:	3d 81       	ldd	r19, Y+5	; 0x05
    3858:	22 30       	cpi	r18, 0x02	; 2
    385a:	31 05       	cpc	r19, r1
    385c:	2c f4       	brge	.+10     	; 0x3868 <DIO_TogglePin+0x48>
    385e:	8c 81       	ldd	r24, Y+4	; 0x04
    3860:	9d 81       	ldd	r25, Y+5	; 0x05
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	61 f0       	breq	.+24     	; 0x387e <DIO_TogglePin+0x5e>
    3866:	5a c0       	rjmp	.+180    	; 0x391c <DIO_TogglePin+0xfc>
    3868:	2c 81       	ldd	r18, Y+4	; 0x04
    386a:	3d 81       	ldd	r19, Y+5	; 0x05
    386c:	22 30       	cpi	r18, 0x02	; 2
    386e:	31 05       	cpc	r19, r1
    3870:	71 f1       	breq	.+92     	; 0x38ce <DIO_TogglePin+0xae>
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	9d 81       	ldd	r25, Y+5	; 0x05
    3876:	83 30       	cpi	r24, 0x03	; 3
    3878:	91 05       	cpc	r25, r1
    387a:	e9 f1       	breq	.+122    	; 0x38f6 <DIO_TogglePin+0xd6>
    387c:	4f c0       	rjmp	.+158    	; 0x391c <DIO_TogglePin+0xfc>
	{
		case PA:
			TOOGLE_BIT(PORTA,PinNum_InPort);
    387e:	ab e3       	ldi	r26, 0x3B	; 59
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	eb e3       	ldi	r30, 0x3B	; 59
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	48 2f       	mov	r20, r24
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	28 2f       	mov	r18, r24
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	02 2e       	mov	r0, r18
    3896:	02 c0       	rjmp	.+4      	; 0x389c <DIO_TogglePin+0x7c>
    3898:	88 0f       	add	r24, r24
    389a:	99 1f       	adc	r25, r25
    389c:	0a 94       	dec	r0
    389e:	e2 f7       	brpl	.-8      	; 0x3898 <DIO_TogglePin+0x78>
    38a0:	84 27       	eor	r24, r20
    38a2:	8c 93       	st	X, r24
    38a4:	3b c0       	rjmp	.+118    	; 0x391c <DIO_TogglePin+0xfc>
		break;
		case PB:
			TOOGLE_BIT(PORTB,PinNum_InPort);
    38a6:	a8 e3       	ldi	r26, 0x38	; 56
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e8 e3       	ldi	r30, 0x38	; 56
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	48 2f       	mov	r20, r24
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	28 2f       	mov	r18, r24
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	02 2e       	mov	r0, r18
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <DIO_TogglePin+0xa4>
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	0a 94       	dec	r0
    38c6:	e2 f7       	brpl	.-8      	; 0x38c0 <DIO_TogglePin+0xa0>
    38c8:	84 27       	eor	r24, r20
    38ca:	8c 93       	st	X, r24
    38cc:	27 c0       	rjmp	.+78     	; 0x391c <DIO_TogglePin+0xfc>
		break;
		case PC:
			TOOGLE_BIT(PORTC,PinNum_InPort);
    38ce:	a5 e3       	ldi	r26, 0x35	; 53
    38d0:	b0 e0       	ldi	r27, 0x00	; 0
    38d2:	e5 e3       	ldi	r30, 0x35	; 53
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	48 2f       	mov	r20, r24
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	02 2e       	mov	r0, r18
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <DIO_TogglePin+0xcc>
    38e8:	88 0f       	add	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	0a 94       	dec	r0
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <DIO_TogglePin+0xc8>
    38f0:	84 27       	eor	r24, r20
    38f2:	8c 93       	st	X, r24
    38f4:	13 c0       	rjmp	.+38     	; 0x391c <DIO_TogglePin+0xfc>
		break;
		case PD:
			TOOGLE_BIT(PORTD,PinNum_InPort);
    38f6:	a2 e3       	ldi	r26, 0x32	; 50
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	e2 e3       	ldi	r30, 0x32	; 50
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	48 2f       	mov	r20, r24
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	02 2e       	mov	r0, r18
    390e:	02 c0       	rjmp	.+4      	; 0x3914 <DIO_TogglePin+0xf4>
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	0a 94       	dec	r0
    3916:	e2 f7       	brpl	.-8      	; 0x3910 <DIO_TogglePin+0xf0>
    3918:	84 27       	eor	r24, r20
    391a:	8c 93       	st	X, r24
		break;
	}
}
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	cf 91       	pop	r28
    3928:	df 91       	pop	r29
    392a:	08 95       	ret

0000392c <DIO_ReadPin>:
VoltageLevel_type DIO_ReadPin(PinNum_type Pin)
{
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	00 d0       	rcall	.+0      	; 0x3932 <DIO_ReadPin+0x6>
    3932:	00 d0       	rcall	.+0      	; 0x3934 <DIO_ReadPin+0x8>
    3934:	00 d0       	rcall	.+0      	; 0x3936 <DIO_ReadPin+0xa>
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	8b 83       	std	Y+3, r24	; 0x03
	u8 PinNum_InPort=Pin%8;
    393c:	8b 81       	ldd	r24, Y+3	; 0x03
    393e:	87 70       	andi	r24, 0x07	; 7
    3940:	8a 83       	std	Y+2, r24	; 0x02
	Port_type Port=Pin/8;
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	86 95       	lsr	r24
    3946:	86 95       	lsr	r24
    3948:	86 95       	lsr	r24
    394a:	89 83       	std	Y+1, r24	; 0x01
	switch (Port)
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	3e 83       	std	Y+6, r19	; 0x06
    3954:	2d 83       	std	Y+5, r18	; 0x05
    3956:	4d 81       	ldd	r20, Y+5	; 0x05
    3958:	5e 81       	ldd	r21, Y+6	; 0x06
    395a:	41 30       	cpi	r20, 0x01	; 1
    395c:	51 05       	cpc	r21, r1
    395e:	49 f1       	breq	.+82     	; 0x39b2 <DIO_ReadPin+0x86>
    3960:	8d 81       	ldd	r24, Y+5	; 0x05
    3962:	9e 81       	ldd	r25, Y+6	; 0x06
    3964:	82 30       	cpi	r24, 0x02	; 2
    3966:	91 05       	cpc	r25, r1
    3968:	34 f4       	brge	.+12     	; 0x3976 <DIO_ReadPin+0x4a>
    396a:	2d 81       	ldd	r18, Y+5	; 0x05
    396c:	3e 81       	ldd	r19, Y+6	; 0x06
    396e:	21 15       	cp	r18, r1
    3970:	31 05       	cpc	r19, r1
    3972:	61 f0       	breq	.+24     	; 0x398c <DIO_ReadPin+0x60>
    3974:	57 c0       	rjmp	.+174    	; 0x3a24 <DIO_ReadPin+0xf8>
    3976:	4d 81       	ldd	r20, Y+5	; 0x05
    3978:	5e 81       	ldd	r21, Y+6	; 0x06
    397a:	42 30       	cpi	r20, 0x02	; 2
    397c:	51 05       	cpc	r21, r1
    397e:	61 f1       	breq	.+88     	; 0x39d8 <DIO_ReadPin+0xac>
    3980:	8d 81       	ldd	r24, Y+5	; 0x05
    3982:	9e 81       	ldd	r25, Y+6	; 0x06
    3984:	83 30       	cpi	r24, 0x03	; 3
    3986:	91 05       	cpc	r25, r1
    3988:	d1 f1       	breq	.+116    	; 0x39fe <DIO_ReadPin+0xd2>
    398a:	4c c0       	rjmp	.+152    	; 0x3a24 <DIO_ReadPin+0xf8>
	{
		case PA:
		return CHECK_BIT(PINA,PinNum_InPort);
    398c:	e9 e3       	ldi	r30, 0x39	; 57
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a9 01       	movw	r20, r18
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <DIO_ReadPin+0x78>
    39a0:	55 95       	asr	r21
    39a2:	47 95       	ror	r20
    39a4:	8a 95       	dec	r24
    39a6:	e2 f7       	brpl	.-8      	; 0x39a0 <DIO_ReadPin+0x74>
    39a8:	ca 01       	movw	r24, r20
    39aa:	58 2f       	mov	r21, r24
    39ac:	51 70       	andi	r21, 0x01	; 1
    39ae:	5c 83       	std	Y+4, r21	; 0x04
    39b0:	3a c0       	rjmp	.+116    	; 0x3a26 <DIO_ReadPin+0xfa>
		break;
		case PB:
		return CHECK_BIT(PINB,PinNum_InPort);
    39b2:	e6 e3       	ldi	r30, 0x36	; 54
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	28 2f       	mov	r18, r24
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	88 2f       	mov	r24, r24
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	a9 01       	movw	r20, r18
    39c4:	02 c0       	rjmp	.+4      	; 0x39ca <DIO_ReadPin+0x9e>
    39c6:	55 95       	asr	r21
    39c8:	47 95       	ror	r20
    39ca:	8a 95       	dec	r24
    39cc:	e2 f7       	brpl	.-8      	; 0x39c6 <DIO_ReadPin+0x9a>
    39ce:	ca 01       	movw	r24, r20
    39d0:	58 2f       	mov	r21, r24
    39d2:	51 70       	andi	r21, 0x01	; 1
    39d4:	5c 83       	std	Y+4, r21	; 0x04
    39d6:	27 c0       	rjmp	.+78     	; 0x3a26 <DIO_ReadPin+0xfa>
		break;
		case PC:
		return CHECK_BIT(PINC,PinNum_InPort);
    39d8:	e3 e3       	ldi	r30, 0x33	; 51
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	28 2f       	mov	r18, r24
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a9 01       	movw	r20, r18
    39ea:	02 c0       	rjmp	.+4      	; 0x39f0 <DIO_ReadPin+0xc4>
    39ec:	55 95       	asr	r21
    39ee:	47 95       	ror	r20
    39f0:	8a 95       	dec	r24
    39f2:	e2 f7       	brpl	.-8      	; 0x39ec <DIO_ReadPin+0xc0>
    39f4:	ca 01       	movw	r24, r20
    39f6:	58 2f       	mov	r21, r24
    39f8:	51 70       	andi	r21, 0x01	; 1
    39fa:	5c 83       	std	Y+4, r21	; 0x04
    39fc:	14 c0       	rjmp	.+40     	; 0x3a26 <DIO_ReadPin+0xfa>
		break;
		case PD:
		return CHECK_BIT(PIND,PinNum_InPort);
    39fe:	e0 e3       	ldi	r30, 0x30	; 48
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	28 2f       	mov	r18, r24
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a9 01       	movw	r20, r18
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <DIO_ReadPin+0xea>
    3a12:	55 95       	asr	r21
    3a14:	47 95       	ror	r20
    3a16:	8a 95       	dec	r24
    3a18:	e2 f7       	brpl	.-8      	; 0x3a12 <DIO_ReadPin+0xe6>
    3a1a:	ca 01       	movw	r24, r20
    3a1c:	58 2f       	mov	r21, r24
    3a1e:	51 70       	andi	r21, 0x01	; 1
    3a20:	5c 83       	std	Y+4, r21	; 0x04
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <DIO_ReadPin+0xfa>
		break;
		default:
		return 0x00;
    3a24:	1c 82       	std	Y+4, r1	; 0x04
    3a26:	8c 81       	ldd	r24, Y+4	; 0x04
		break;
	}
}
    3a28:	26 96       	adiw	r28, 0x06	; 6
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <EXI_SetCallBack>:
static void (*INT1_Fptr) (void)=NULLPTR;
static void (*INT2_Fptr) (void)=NULLPTR;

/************************************Call back functions*********************************************/
void EXI_SetCallBack(ExInterruptSource_type Interrupt,void(*LocalPtr)(void))
{
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	00 d0       	rcall	.+0      	; 0x3a40 <EXI_SetCallBack+0x6>
    3a40:	00 d0       	rcall	.+0      	; 0x3a42 <EXI_SetCallBack+0x8>
    3a42:	0f 92       	push	r0
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	89 83       	std	Y+1, r24	; 0x01
    3a4a:	7b 83       	std	Y+3, r23	; 0x03
    3a4c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	28 2f       	mov	r18, r24
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	3d 83       	std	Y+5, r19	; 0x05
    3a56:	2c 83       	std	Y+4, r18	; 0x04
    3a58:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3a5c:	81 30       	cpi	r24, 0x01	; 1
    3a5e:	91 05       	cpc	r25, r1
    3a60:	81 f0       	breq	.+32     	; 0x3a82 <EXI_SetCallBack+0x48>
    3a62:	2c 81       	ldd	r18, Y+4	; 0x04
    3a64:	3d 81       	ldd	r19, Y+5	; 0x05
    3a66:	22 30       	cpi	r18, 0x02	; 2
    3a68:	31 05       	cpc	r19, r1
    3a6a:	91 f0       	breq	.+36     	; 0x3a90 <EXI_SetCallBack+0x56>
    3a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	a1 f4       	brne	.+40     	; 0x3a9c <EXI_SetCallBack+0x62>
		case EX_INT0:
		INT0_Fptr=LocalPtr;
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	9b 81       	ldd	r25, Y+3	; 0x03
    3a78:	90 93 ee 01 	sts	0x01EE, r25
    3a7c:	80 93 ed 01 	sts	0x01ED, r24
    3a80:	0d c0       	rjmp	.+26     	; 0x3a9c <EXI_SetCallBack+0x62>
		break;
		case EX_INT1:
		INT1_Fptr=LocalPtr;
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	9b 81       	ldd	r25, Y+3	; 0x03
    3a86:	90 93 f0 01 	sts	0x01F0, r25
    3a8a:	80 93 ef 01 	sts	0x01EF, r24
    3a8e:	06 c0       	rjmp	.+12     	; 0x3a9c <EXI_SetCallBack+0x62>
		break;
		case EX_INT2:
		INT2_Fptr=LocalPtr;
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	9b 81       	ldd	r25, Y+3	; 0x03
    3a94:	90 93 f2 01 	sts	0x01F2, r25
    3a98:	80 93 f1 01 	sts	0x01F1, r24
		break;
	}
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <EXI_Enable>:
/************************************Enable/Disable functions***********************************/
void EXI_Enable(ExInterruptSource_type Interrupt)
{
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	00 d0       	rcall	.+0      	; 0x3ab2 <EXI_Enable+0x6>
    3ab2:	0f 92       	push	r0
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    3aba:	89 81       	ldd	r24, Y+1	; 0x01
    3abc:	28 2f       	mov	r18, r24
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	3b 83       	std	Y+3, r19	; 0x03
    3ac2:	2a 83       	std	Y+2, r18	; 0x02
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	91 05       	cpc	r25, r1
    3acc:	89 f0       	breq	.+34     	; 0x3af0 <EXI_Enable+0x44>
    3ace:	2a 81       	ldd	r18, Y+2	; 0x02
    3ad0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ad2:	22 30       	cpi	r18, 0x02	; 2
    3ad4:	31 05       	cpc	r19, r1
    3ad6:	a1 f0       	breq	.+40     	; 0x3b00 <EXI_Enable+0x54>
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	9b 81       	ldd	r25, Y+3	; 0x03
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	b9 f4       	brne	.+46     	; 0x3b0e <EXI_Enable+0x62>
		case EX_INT0:
		SET_BIT(GICR,INT0);
    3ae0:	ab e5       	ldi	r26, 0x5B	; 91
    3ae2:	b0 e0       	ldi	r27, 0x00	; 0
    3ae4:	eb e5       	ldi	r30, 0x5B	; 91
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	80 81       	ld	r24, Z
    3aea:	80 64       	ori	r24, 0x40	; 64
    3aec:	8c 93       	st	X, r24
    3aee:	0f c0       	rjmp	.+30     	; 0x3b0e <EXI_Enable+0x62>
		break;
		case EX_INT1:
		SET_BIT(GICR,INT1);
    3af0:	ab e5       	ldi	r26, 0x5B	; 91
    3af2:	b0 e0       	ldi	r27, 0x00	; 0
    3af4:	eb e5       	ldi	r30, 0x5B	; 91
    3af6:	f0 e0       	ldi	r31, 0x00	; 0
    3af8:	80 81       	ld	r24, Z
    3afa:	80 68       	ori	r24, 0x80	; 128
    3afc:	8c 93       	st	X, r24
    3afe:	07 c0       	rjmp	.+14     	; 0x3b0e <EXI_Enable+0x62>
		break;
		case EX_INT2:
		SET_BIT(GICR,INT2);
    3b00:	ab e5       	ldi	r26, 0x5B	; 91
    3b02:	b0 e0       	ldi	r27, 0x00	; 0
    3b04:	eb e5       	ldi	r30, 0x5B	; 91
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	80 81       	ld	r24, Z
    3b0a:	80 62       	ori	r24, 0x20	; 32
    3b0c:	8c 93       	st	X, r24
		break;
	}
}
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <EXI_Disable>:

void EXI_Disable(ExInterruptSource_type Interrupt)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <EXI_Disable+0x6>
    3b20:	0f 92       	push	r0
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	89 83       	std	Y+1, r24	; 0x01
	switch(Interrupt){
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	28 2f       	mov	r18, r24
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	3b 83       	std	Y+3, r19	; 0x03
    3b30:	2a 83       	std	Y+2, r18	; 0x02
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	9b 81       	ldd	r25, Y+3	; 0x03
    3b36:	81 30       	cpi	r24, 0x01	; 1
    3b38:	91 05       	cpc	r25, r1
    3b3a:	89 f0       	breq	.+34     	; 0x3b5e <EXI_Disable+0x44>
    3b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    3b3e:	3b 81       	ldd	r19, Y+3	; 0x03
    3b40:	22 30       	cpi	r18, 0x02	; 2
    3b42:	31 05       	cpc	r19, r1
    3b44:	a1 f0       	breq	.+40     	; 0x3b6e <EXI_Disable+0x54>
    3b46:	8a 81       	ldd	r24, Y+2	; 0x02
    3b48:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	b9 f4       	brne	.+46     	; 0x3b7c <EXI_Disable+0x62>
		case EX_INT0:
		CLEAR_BIT(GICR,INT0);
    3b4e:	ab e5       	ldi	r26, 0x5B	; 91
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	eb e5       	ldi	r30, 0x5B	; 91
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	8f 7b       	andi	r24, 0xBF	; 191
    3b5a:	8c 93       	st	X, r24
    3b5c:	0f c0       	rjmp	.+30     	; 0x3b7c <EXI_Disable+0x62>
		break;
		case EX_INT1:
		CLEAR_BIT(GICR,INT1);
    3b5e:	ab e5       	ldi	r26, 0x5B	; 91
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	eb e5       	ldi	r30, 0x5B	; 91
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	8f 77       	andi	r24, 0x7F	; 127
    3b6a:	8c 93       	st	X, r24
    3b6c:	07 c0       	rjmp	.+14     	; 0x3b7c <EXI_Disable+0x62>
		break;
		case EX_INT2:
		CLEAR_BIT(GICR,INT2);
    3b6e:	ab e5       	ldi	r26, 0x5B	; 91
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	eb e5       	ldi	r30, 0x5B	; 91
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	8f 7d       	andi	r24, 0xDF	; 223
    3b7a:	8c 93       	st	X, r24
		break;
	}
}
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <EXI_TriggerEdge>:
/************************************Control function*****************************/
void EXI_TriggerEdge(ExInterruptSource_type Interrupt,TriggerEdge_type Edge)
{
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	cd b7       	in	r28, 0x3d	; 61
    3b8e:	de b7       	in	r29, 0x3e	; 62
    3b90:	2a 97       	sbiw	r28, 0x0a	; 10
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	89 83       	std	Y+1, r24	; 0x01
    3b9e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Interrupt){
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	28 2f       	mov	r18, r24
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	3a 87       	std	Y+10, r19	; 0x0a
    3ba8:	29 87       	std	Y+9, r18	; 0x09
    3baa:	89 85       	ldd	r24, Y+9	; 0x09
    3bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	91 05       	cpc	r25, r1
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <EXI_TriggerEdge+0x2e>
    3bb4:	66 c0       	rjmp	.+204    	; 0x3c82 <EXI_TriggerEdge+0xfa>
    3bb6:	29 85       	ldd	r18, Y+9	; 0x09
    3bb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bba:	22 30       	cpi	r18, 0x02	; 2
    3bbc:	31 05       	cpc	r19, r1
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <EXI_TriggerEdge+0x3a>
    3bc0:	bb c0       	rjmp	.+374    	; 0x3d38 <EXI_TriggerEdge+0x1b0>
    3bc2:	89 85       	ldd	r24, Y+9	; 0x09
    3bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc6:	00 97       	sbiw	r24, 0x00	; 0
    3bc8:	09 f0       	breq	.+2      	; 0x3bcc <EXI_TriggerEdge+0x44>
    3bca:	dd c0       	rjmp	.+442    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
		case EX_INT0:
		switch(Edge){
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	38 87       	std	Y+8, r19	; 0x08
    3bd4:	2f 83       	std	Y+7, r18	; 0x07
    3bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    3bd8:	98 85       	ldd	r25, Y+8	; 0x08
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	91 05       	cpc	r25, r1
    3bde:	21 f1       	breq	.+72     	; 0x3c28 <EXI_TriggerEdge+0xa0>
    3be0:	2f 81       	ldd	r18, Y+7	; 0x07
    3be2:	38 85       	ldd	r19, Y+8	; 0x08
    3be4:	22 30       	cpi	r18, 0x02	; 2
    3be6:	31 05       	cpc	r19, r1
    3be8:	2c f4       	brge	.+10     	; 0x3bf4 <EXI_TriggerEdge+0x6c>
    3bea:	8f 81       	ldd	r24, Y+7	; 0x07
    3bec:	98 85       	ldd	r25, Y+8	; 0x08
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	61 f0       	breq	.+24     	; 0x3c0a <EXI_TriggerEdge+0x82>
    3bf2:	c9 c0       	rjmp	.+402    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
    3bf4:	2f 81       	ldd	r18, Y+7	; 0x07
    3bf6:	38 85       	ldd	r19, Y+8	; 0x08
    3bf8:	22 30       	cpi	r18, 0x02	; 2
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	21 f1       	breq	.+72     	; 0x3c46 <EXI_TriggerEdge+0xbe>
    3bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    3c00:	98 85       	ldd	r25, Y+8	; 0x08
    3c02:	83 30       	cpi	r24, 0x03	; 3
    3c04:	91 05       	cpc	r25, r1
    3c06:	71 f1       	breq	.+92     	; 0x3c64 <EXI_TriggerEdge+0xdc>
    3c08:	be c0       	rjmp	.+380    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
    3c0a:	a5 e5       	ldi	r26, 0x55	; 85
    3c0c:	b0 e0       	ldi	r27, 0x00	; 0
    3c0e:	e5 e5       	ldi	r30, 0x55	; 85
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	8e 7f       	andi	r24, 0xFE	; 254
    3c16:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    3c18:	a5 e5       	ldi	r26, 0x55	; 85
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	e5 e5       	ldi	r30, 0x55	; 85
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	80 81       	ld	r24, Z
    3c22:	8d 7f       	andi	r24, 0xFD	; 253
    3c24:	8c 93       	st	X, r24
    3c26:	af c0       	rjmp	.+350    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC00);
    3c28:	a5 e5       	ldi	r26, 0x55	; 85
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	e5 e5       	ldi	r30, 0x55	; 85
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	81 60       	ori	r24, 0x01	; 1
    3c34:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC01);
    3c36:	a5 e5       	ldi	r26, 0x55	; 85
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e5 e5       	ldi	r30, 0x55	; 85
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	8d 7f       	andi	r24, 0xFD	; 253
    3c42:	8c 93       	st	X, r24
    3c44:	a0 c0       	rjmp	.+320    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC00);
    3c46:	a5 e5       	ldi	r26, 0x55	; 85
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	e5 e5       	ldi	r30, 0x55	; 85
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	8e 7f       	andi	r24, 0xFE	; 254
    3c52:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3c54:	a5 e5       	ldi	r26, 0x55	; 85
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	e5 e5       	ldi	r30, 0x55	; 85
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	82 60       	ori	r24, 0x02	; 2
    3c60:	8c 93       	st	X, r24
    3c62:	91 c0       	rjmp	.+290    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC00);
    3c64:	a5 e5       	ldi	r26, 0x55	; 85
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e5 e5       	ldi	r30, 0x55	; 85
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	81 60       	ori	r24, 0x01	; 1
    3c70:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    3c72:	a5 e5       	ldi	r26, 0x55	; 85
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e5 e5       	ldi	r30, 0x55	; 85
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	82 60       	ori	r24, 0x02	; 2
    3c7e:	8c 93       	st	X, r24
    3c80:	82 c0       	rjmp	.+260    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT1:
		switch(Edge){
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	28 2f       	mov	r18, r24
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	3e 83       	std	Y+6, r19	; 0x06
    3c8a:	2d 83       	std	Y+5, r18	; 0x05
    3c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c90:	81 30       	cpi	r24, 0x01	; 1
    3c92:	91 05       	cpc	r25, r1
    3c94:	21 f1       	breq	.+72     	; 0x3cde <EXI_TriggerEdge+0x156>
    3c96:	2d 81       	ldd	r18, Y+5	; 0x05
    3c98:	3e 81       	ldd	r19, Y+6	; 0x06
    3c9a:	22 30       	cpi	r18, 0x02	; 2
    3c9c:	31 05       	cpc	r19, r1
    3c9e:	2c f4       	brge	.+10     	; 0x3caa <EXI_TriggerEdge+0x122>
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	00 97       	sbiw	r24, 0x00	; 0
    3ca6:	61 f0       	breq	.+24     	; 0x3cc0 <EXI_TriggerEdge+0x138>
    3ca8:	6e c0       	rjmp	.+220    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
    3caa:	2d 81       	ldd	r18, Y+5	; 0x05
    3cac:	3e 81       	ldd	r19, Y+6	; 0x06
    3cae:	22 30       	cpi	r18, 0x02	; 2
    3cb0:	31 05       	cpc	r19, r1
    3cb2:	21 f1       	breq	.+72     	; 0x3cfc <EXI_TriggerEdge+0x174>
    3cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb8:	83 30       	cpi	r24, 0x03	; 3
    3cba:	91 05       	cpc	r25, r1
    3cbc:	71 f1       	breq	.+92     	; 0x3d1a <EXI_TriggerEdge+0x192>
    3cbe:	63 c0       	rjmp	.+198    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC10);
    3cc0:	a5 e5       	ldi	r26, 0x55	; 85
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e5 e5       	ldi	r30, 0x55	; 85
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	8b 7f       	andi	r24, 0xFB	; 251
    3ccc:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    3cce:	a5 e5       	ldi	r26, 0x55	; 85
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	e5 e5       	ldi	r30, 0x55	; 85
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	80 81       	ld	r24, Z
    3cd8:	87 7f       	andi	r24, 0xF7	; 247
    3cda:	8c 93       	st	X, r24
    3cdc:	54 c0       	rjmp	.+168    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case ANY_LOGIC_CHANGE:
			SET_BIT(MCUCR,ISC10);
    3cde:	a5 e5       	ldi	r26, 0x55	; 85
    3ce0:	b0 e0       	ldi	r27, 0x00	; 0
    3ce2:	e5 e5       	ldi	r30, 0x55	; 85
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	80 81       	ld	r24, Z
    3ce8:	84 60       	ori	r24, 0x04	; 4
    3cea:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC11);
    3cec:	a5 e5       	ldi	r26, 0x55	; 85
    3cee:	b0 e0       	ldi	r27, 0x00	; 0
    3cf0:	e5 e5       	ldi	r30, 0x55	; 85
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	80 81       	ld	r24, Z
    3cf6:	87 7f       	andi	r24, 0xF7	; 247
    3cf8:	8c 93       	st	X, r24
    3cfa:	45 c0       	rjmp	.+138    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case FALLING_EDGE:
			CLEAR_BIT(MCUCR,ISC10);
    3cfc:	a5 e5       	ldi	r26, 0x55	; 85
    3cfe:	b0 e0       	ldi	r27, 0x00	; 0
    3d00:	e5 e5       	ldi	r30, 0x55	; 85
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 81       	ld	r24, Z
    3d06:	8b 7f       	andi	r24, 0xFB	; 251
    3d08:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3d0a:	a5 e5       	ldi	r26, 0x55	; 85
    3d0c:	b0 e0       	ldi	r27, 0x00	; 0
    3d0e:	e5 e5       	ldi	r30, 0x55	; 85
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	80 81       	ld	r24, Z
    3d14:	88 60       	ori	r24, 0x08	; 8
    3d16:	8c 93       	st	X, r24
    3d18:	36 c0       	rjmp	.+108    	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCR,ISC10);
    3d1a:	a5 e5       	ldi	r26, 0x55	; 85
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e5 e5       	ldi	r30, 0x55	; 85
    3d20:	f0 e0       	ldi	r31, 0x00	; 0
    3d22:	80 81       	ld	r24, Z
    3d24:	84 60       	ori	r24, 0x04	; 4
    3d26:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    3d28:	a5 e5       	ldi	r26, 0x55	; 85
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	e5 e5       	ldi	r30, 0x55	; 85
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	88 60       	ori	r24, 0x08	; 8
    3d34:	8c 93       	st	X, r24
    3d36:	27 c0       	rjmp	.+78     	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			
		}
		break;
		case EX_INT2:
		switch(Edge){
    3d38:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3a:	28 2f       	mov	r18, r24
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	3c 83       	std	Y+4, r19	; 0x04
    3d40:	2b 83       	std	Y+3, r18	; 0x03
    3d42:	8b 81       	ldd	r24, Y+3	; 0x03
    3d44:	9c 81       	ldd	r25, Y+4	; 0x04
    3d46:	82 30       	cpi	r24, 0x02	; 2
    3d48:	91 05       	cpc	r25, r1
    3d4a:	31 f0       	breq	.+12     	; 0x3d58 <EXI_TriggerEdge+0x1d0>
    3d4c:	2b 81       	ldd	r18, Y+3	; 0x03
    3d4e:	3c 81       	ldd	r19, Y+4	; 0x04
    3d50:	23 30       	cpi	r18, 0x03	; 3
    3d52:	31 05       	cpc	r19, r1
    3d54:	49 f0       	breq	.+18     	; 0x3d68 <EXI_TriggerEdge+0x1e0>
    3d56:	10 c0       	rjmp	.+32     	; 0x3d78 <EXI_TriggerEdge+0x1f0>
			case FALLING_EDGE:
			CLEAR_BIT(MCUCSR,ISC2);
    3d58:	a4 e5       	ldi	r26, 0x54	; 84
    3d5a:	b0 e0       	ldi	r27, 0x00	; 0
    3d5c:	e4 e5       	ldi	r30, 0x54	; 84
    3d5e:	f0 e0       	ldi	r31, 0x00	; 0
    3d60:	80 81       	ld	r24, Z
    3d62:	8f 7b       	andi	r24, 0xBF	; 191
    3d64:	8c 93       	st	X, r24
    3d66:	0f c0       	rjmp	.+30     	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2);
    3d68:	a4 e5       	ldi	r26, 0x54	; 84
    3d6a:	b0 e0       	ldi	r27, 0x00	; 0
    3d6c:	e4 e5       	ldi	r30, 0x54	; 84
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	80 64       	ori	r24, 0x40	; 64
    3d74:	8c 93       	st	X, r24
    3d76:	07 c0       	rjmp	.+14     	; 0x3d86 <EXI_TriggerEdge+0x1fe>
			break;
			default:
			CLEAR_BIT(MCUCSR,ISC2);	
    3d78:	a4 e5       	ldi	r26, 0x54	; 84
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e4 e5       	ldi	r30, 0x54	; 84
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	8f 7b       	andi	r24, 0xBF	; 191
    3d84:	8c 93       	st	X, r24
		}
		break;
	}
}
    3d86:	2a 96       	adiw	r28, 0x0a	; 10
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <__vector_1>:
/*******************************ISR********************************/
ISR(INT0_vect)
{
    3d98:	1f 92       	push	r1
    3d9a:	0f 92       	push	r0
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	0f 92       	push	r0
    3da0:	11 24       	eor	r1, r1
    3da2:	2f 93       	push	r18
    3da4:	3f 93       	push	r19
    3da6:	4f 93       	push	r20
    3da8:	5f 93       	push	r21
    3daa:	6f 93       	push	r22
    3dac:	7f 93       	push	r23
    3dae:	8f 93       	push	r24
    3db0:	9f 93       	push	r25
    3db2:	af 93       	push	r26
    3db4:	bf 93       	push	r27
    3db6:	ef 93       	push	r30
    3db8:	ff 93       	push	r31
    3dba:	df 93       	push	r29
    3dbc:	cf 93       	push	r28
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
	if (INT0_Fptr!=NULLPTR)
    3dc2:	80 91 ed 01 	lds	r24, 0x01ED
    3dc6:	90 91 ee 01 	lds	r25, 0x01EE
    3dca:	00 97       	sbiw	r24, 0x00	; 0
    3dcc:	29 f0       	breq	.+10     	; 0x3dd8 <__vector_1+0x40>
	{
		INT0_Fptr();
    3dce:	e0 91 ed 01 	lds	r30, 0x01ED
    3dd2:	f0 91 ee 01 	lds	r31, 0x01EE
    3dd6:	09 95       	icall
	}
}
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	ff 91       	pop	r31
    3dde:	ef 91       	pop	r30
    3de0:	bf 91       	pop	r27
    3de2:	af 91       	pop	r26
    3de4:	9f 91       	pop	r25
    3de6:	8f 91       	pop	r24
    3de8:	7f 91       	pop	r23
    3dea:	6f 91       	pop	r22
    3dec:	5f 91       	pop	r21
    3dee:	4f 91       	pop	r20
    3df0:	3f 91       	pop	r19
    3df2:	2f 91       	pop	r18
    3df4:	0f 90       	pop	r0
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	0f 90       	pop	r0
    3dfa:	1f 90       	pop	r1
    3dfc:	18 95       	reti

00003dfe <__vector_2>:
ISR(INT1_vect)
{
    3dfe:	1f 92       	push	r1
    3e00:	0f 92       	push	r0
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	0f 92       	push	r0
    3e06:	11 24       	eor	r1, r1
    3e08:	2f 93       	push	r18
    3e0a:	3f 93       	push	r19
    3e0c:	4f 93       	push	r20
    3e0e:	5f 93       	push	r21
    3e10:	6f 93       	push	r22
    3e12:	7f 93       	push	r23
    3e14:	8f 93       	push	r24
    3e16:	9f 93       	push	r25
    3e18:	af 93       	push	r26
    3e1a:	bf 93       	push	r27
    3e1c:	ef 93       	push	r30
    3e1e:	ff 93       	push	r31
    3e20:	df 93       	push	r29
    3e22:	cf 93       	push	r28
    3e24:	cd b7       	in	r28, 0x3d	; 61
    3e26:	de b7       	in	r29, 0x3e	; 62
	if (INT1_Fptr!=NULLPTR)
    3e28:	80 91 ef 01 	lds	r24, 0x01EF
    3e2c:	90 91 f0 01 	lds	r25, 0x01F0
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	29 f0       	breq	.+10     	; 0x3e3e <__vector_2+0x40>
	{
		INT1_Fptr();
    3e34:	e0 91 ef 01 	lds	r30, 0x01EF
    3e38:	f0 91 f0 01 	lds	r31, 0x01F0
    3e3c:	09 95       	icall
	}
}
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	ff 91       	pop	r31
    3e44:	ef 91       	pop	r30
    3e46:	bf 91       	pop	r27
    3e48:	af 91       	pop	r26
    3e4a:	9f 91       	pop	r25
    3e4c:	8f 91       	pop	r24
    3e4e:	7f 91       	pop	r23
    3e50:	6f 91       	pop	r22
    3e52:	5f 91       	pop	r21
    3e54:	4f 91       	pop	r20
    3e56:	3f 91       	pop	r19
    3e58:	2f 91       	pop	r18
    3e5a:	0f 90       	pop	r0
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	0f 90       	pop	r0
    3e60:	1f 90       	pop	r1
    3e62:	18 95       	reti

00003e64 <__vector_3>:
ISR(INT2_vect)
{
    3e64:	1f 92       	push	r1
    3e66:	0f 92       	push	r0
    3e68:	0f b6       	in	r0, 0x3f	; 63
    3e6a:	0f 92       	push	r0
    3e6c:	11 24       	eor	r1, r1
    3e6e:	2f 93       	push	r18
    3e70:	3f 93       	push	r19
    3e72:	4f 93       	push	r20
    3e74:	5f 93       	push	r21
    3e76:	6f 93       	push	r22
    3e78:	7f 93       	push	r23
    3e7a:	8f 93       	push	r24
    3e7c:	9f 93       	push	r25
    3e7e:	af 93       	push	r26
    3e80:	bf 93       	push	r27
    3e82:	ef 93       	push	r30
    3e84:	ff 93       	push	r31
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
	if (INT2_Fptr!=NULLPTR)
    3e8e:	80 91 f1 01 	lds	r24, 0x01F1
    3e92:	90 91 f2 01 	lds	r25, 0x01F2
    3e96:	00 97       	sbiw	r24, 0x00	; 0
    3e98:	29 f0       	breq	.+10     	; 0x3ea4 <__vector_3+0x40>
	{
		INT2_Fptr();
    3e9a:	e0 91 f1 01 	lds	r30, 0x01F1
    3e9e:	f0 91 f2 01 	lds	r31, 0x01F2
    3ea2:	09 95       	icall
	}	
}
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	ff 91       	pop	r31
    3eaa:	ef 91       	pop	r30
    3eac:	bf 91       	pop	r27
    3eae:	af 91       	pop	r26
    3eb0:	9f 91       	pop	r25
    3eb2:	8f 91       	pop	r24
    3eb4:	7f 91       	pop	r23
    3eb6:	6f 91       	pop	r22
    3eb8:	5f 91       	pop	r21
    3eba:	4f 91       	pop	r20
    3ebc:	3f 91       	pop	r19
    3ebe:	2f 91       	pop	r18
    3ec0:	0f 90       	pop	r0
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	0f 90       	pop	r0
    3ec6:	1f 90       	pop	r1
    3ec8:	18 95       	reti

00003eca <Timer0_Init>:
static void (*Timer1_OCB_Fptr) (void)=NULLPTR;
static void (*Timer1_ICU_Fptr) (void)=NULLPTR;
/**********************************Timer 0 ****************************************************/

void Timer0_Init( Timer0Mode_type mode,Timer0Scaler_type scaler ,OC0Mode_type oc_mode)
{
    3eca:	df 93       	push	r29
    3ecc:	cf 93       	push	r28
    3ece:	cd b7       	in	r28, 0x3d	; 61
    3ed0:	de b7       	in	r29, 0x3e	; 62
    3ed2:	27 97       	sbiw	r28, 0x07	; 7
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	89 83       	std	Y+1, r24	; 0x01
    3ee0:	6a 83       	std	Y+2, r22	; 0x02
    3ee2:	4b 83       	std	Y+3, r20	; 0x03
	switch (mode)
    3ee4:	89 81       	ldd	r24, Y+1	; 0x01
    3ee6:	28 2f       	mov	r18, r24
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	3f 83       	std	Y+7, r19	; 0x07
    3eec:	2e 83       	std	Y+6, r18	; 0x06
    3eee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ef2:	81 30       	cpi	r24, 0x01	; 1
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	21 f1       	breq	.+72     	; 0x3f40 <Timer0_Init+0x76>
    3ef8:	2e 81       	ldd	r18, Y+6	; 0x06
    3efa:	3f 81       	ldd	r19, Y+7	; 0x07
    3efc:	22 30       	cpi	r18, 0x02	; 2
    3efe:	31 05       	cpc	r19, r1
    3f00:	2c f4       	brge	.+10     	; 0x3f0c <Timer0_Init+0x42>
    3f02:	8e 81       	ldd	r24, Y+6	; 0x06
    3f04:	9f 81       	ldd	r25, Y+7	; 0x07
    3f06:	00 97       	sbiw	r24, 0x00	; 0
    3f08:	61 f0       	breq	.+24     	; 0x3f22 <Timer0_Init+0x58>
    3f0a:	46 c0       	rjmp	.+140    	; 0x3f98 <Timer0_Init+0xce>
    3f0c:	2e 81       	ldd	r18, Y+6	; 0x06
    3f0e:	3f 81       	ldd	r19, Y+7	; 0x07
    3f10:	22 30       	cpi	r18, 0x02	; 2
    3f12:	31 05       	cpc	r19, r1
    3f14:	21 f1       	breq	.+72     	; 0x3f5e <Timer0_Init+0x94>
    3f16:	8e 81       	ldd	r24, Y+6	; 0x06
    3f18:	9f 81       	ldd	r25, Y+7	; 0x07
    3f1a:	83 30       	cpi	r24, 0x03	; 3
    3f1c:	91 05       	cpc	r25, r1
    3f1e:	71 f1       	breq	.+92     	; 0x3f7c <Timer0_Init+0xb2>
    3f20:	3b c0       	rjmp	.+118    	; 0x3f98 <Timer0_Init+0xce>
	{
		case TIMER0_NORMAL_MODE:
		CLEAR_BIT(TCCR0,WGM00);
    3f22:	a3 e5       	ldi	r26, 0x53	; 83
    3f24:	b0 e0       	ldi	r27, 0x00	; 0
    3f26:	e3 e5       	ldi	r30, 0x53	; 83
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	80 81       	ld	r24, Z
    3f2c:	8f 7b       	andi	r24, 0xBF	; 191
    3f2e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    3f30:	a3 e5       	ldi	r26, 0x53	; 83
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	e3 e5       	ldi	r30, 0x53	; 83
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	87 7f       	andi	r24, 0xF7	; 247
    3f3c:	8c 93       	st	X, r24
    3f3e:	2c c0       	rjmp	.+88     	; 0x3f98 <Timer0_Init+0xce>
		break;
		case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,WGM00);
    3f40:	a3 e5       	ldi	r26, 0x53	; 83
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e3 e5       	ldi	r30, 0x53	; 83
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	80 64       	ori	r24, 0x40	; 64
    3f4c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    3f4e:	a3 e5       	ldi	r26, 0x53	; 83
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	e3 e5       	ldi	r30, 0x53	; 83
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	87 7f       	andi	r24, 0xF7	; 247
    3f5a:	8c 93       	st	X, r24
    3f5c:	1d c0       	rjmp	.+58     	; 0x3f98 <Timer0_Init+0xce>
		break;
		case TIMER0_CTC_MODE:
		CLEAR_BIT(TCCR0,WGM00);
    3f5e:	a3 e5       	ldi	r26, 0x53	; 83
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	e3 e5       	ldi	r30, 0x53	; 83
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	8f 7b       	andi	r24, 0xBF	; 191
    3f6a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    3f6c:	a3 e5       	ldi	r26, 0x53	; 83
    3f6e:	b0 e0       	ldi	r27, 0x00	; 0
    3f70:	e3 e5       	ldi	r30, 0x53	; 83
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	80 81       	ld	r24, Z
    3f76:	88 60       	ori	r24, 0x08	; 8
    3f78:	8c 93       	st	X, r24
    3f7a:	0e c0       	rjmp	.+28     	; 0x3f98 <Timer0_Init+0xce>
		break;
		case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,WGM00);
    3f7c:	a3 e5       	ldi	r26, 0x53	; 83
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	e3 e5       	ldi	r30, 0x53	; 83
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	80 81       	ld	r24, Z
    3f86:	80 64       	ori	r24, 0x40	; 64
    3f88:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    3f8a:	a3 e5       	ldi	r26, 0x53	; 83
    3f8c:	b0 e0       	ldi	r27, 0x00	; 0
    3f8e:	e3 e5       	ldi	r30, 0x53	; 83
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	80 81       	ld	r24, Z
    3f94:	88 60       	ori	r24, 0x08	; 8
    3f96:	8c 93       	st	X, r24
		break;
	}

	TCCR0&=0XF8;
    3f98:	a3 e5       	ldi	r26, 0x53	; 83
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e3 e5       	ldi	r30, 0x53	; 83
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	88 7f       	andi	r24, 0xF8	; 248
    3fa4:	8c 93       	st	X, r24
	TCCR0|=scaler;
    3fa6:	a3 e5       	ldi	r26, 0x53	; 83
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	e3 e5       	ldi	r30, 0x53	; 83
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	90 81       	ld	r25, Z
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	89 2b       	or	r24, r25
    3fb4:	8c 93       	st	X, r24

	switch (oc_mode)
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	28 2f       	mov	r18, r24
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	3d 83       	std	Y+5, r19	; 0x05
    3fbe:	2c 83       	std	Y+4, r18	; 0x04
    3fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc4:	81 30       	cpi	r24, 0x01	; 1
    3fc6:	91 05       	cpc	r25, r1
    3fc8:	21 f1       	breq	.+72     	; 0x4012 <Timer0_Init+0x148>
    3fca:	2c 81       	ldd	r18, Y+4	; 0x04
    3fcc:	3d 81       	ldd	r19, Y+5	; 0x05
    3fce:	22 30       	cpi	r18, 0x02	; 2
    3fd0:	31 05       	cpc	r19, r1
    3fd2:	2c f4       	brge	.+10     	; 0x3fde <Timer0_Init+0x114>
    3fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	61 f0       	breq	.+24     	; 0x3ff4 <Timer0_Init+0x12a>
    3fdc:	46 c0       	rjmp	.+140    	; 0x406a <Timer0_Init+0x1a0>
    3fde:	2c 81       	ldd	r18, Y+4	; 0x04
    3fe0:	3d 81       	ldd	r19, Y+5	; 0x05
    3fe2:	22 30       	cpi	r18, 0x02	; 2
    3fe4:	31 05       	cpc	r19, r1
    3fe6:	21 f1       	breq	.+72     	; 0x4030 <Timer0_Init+0x166>
    3fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    3fea:	9d 81       	ldd	r25, Y+5	; 0x05
    3fec:	83 30       	cpi	r24, 0x03	; 3
    3fee:	91 05       	cpc	r25, r1
    3ff0:	71 f1       	breq	.+92     	; 0x404e <Timer0_Init+0x184>
    3ff2:	3b c0       	rjmp	.+118    	; 0x406a <Timer0_Init+0x1a0>
	{
		case OCO_DISCONNECTED:
		CLEAR_BIT(TCCR0,COM00);
    3ff4:	a3 e5       	ldi	r26, 0x53	; 83
    3ff6:	b0 e0       	ldi	r27, 0x00	; 0
    3ff8:	e3 e5       	ldi	r30, 0x53	; 83
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	80 81       	ld	r24, Z
    3ffe:	8f 7e       	andi	r24, 0xEF	; 239
    4000:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    4002:	a3 e5       	ldi	r26, 0x53	; 83
    4004:	b0 e0       	ldi	r27, 0x00	; 0
    4006:	e3 e5       	ldi	r30, 0x53	; 83
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	80 81       	ld	r24, Z
    400c:	8f 7d       	andi	r24, 0xDF	; 223
    400e:	8c 93       	st	X, r24
    4010:	2c c0       	rjmp	.+88     	; 0x406a <Timer0_Init+0x1a0>
		break;
		case OCO_TOGGLE:
		SET_BIT(TCCR0,COM00);
    4012:	a3 e5       	ldi	r26, 0x53	; 83
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	e3 e5       	ldi	r30, 0x53	; 83
    4018:	f0 e0       	ldi	r31, 0x00	; 0
    401a:	80 81       	ld	r24, Z
    401c:	80 61       	ori	r24, 0x10	; 16
    401e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);
    4020:	a3 e5       	ldi	r26, 0x53	; 83
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	e3 e5       	ldi	r30, 0x53	; 83
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	80 81       	ld	r24, Z
    402a:	8f 7d       	andi	r24, 0xDF	; 223
    402c:	8c 93       	st	X, r24
    402e:	1d c0       	rjmp	.+58     	; 0x406a <Timer0_Init+0x1a0>
		break;
		case OCO_NON_INVERTING:
		CLEAR_BIT(TCCR0,COM00);
    4030:	a3 e5       	ldi	r26, 0x53	; 83
    4032:	b0 e0       	ldi	r27, 0x00	; 0
    4034:	e3 e5       	ldi	r30, 0x53	; 83
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	80 81       	ld	r24, Z
    403a:	8f 7e       	andi	r24, 0xEF	; 239
    403c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    403e:	a3 e5       	ldi	r26, 0x53	; 83
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	e3 e5       	ldi	r30, 0x53	; 83
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	80 81       	ld	r24, Z
    4048:	80 62       	ori	r24, 0x20	; 32
    404a:	8c 93       	st	X, r24
    404c:	0e c0       	rjmp	.+28     	; 0x406a <Timer0_Init+0x1a0>
		break;
		case OCO_INVERTING:
		SET_BIT(TCCR0,COM00);
    404e:	a3 e5       	ldi	r26, 0x53	; 83
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	e3 e5       	ldi	r30, 0x53	; 83
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	80 81       	ld	r24, Z
    4058:	80 61       	ori	r24, 0x10	; 16
    405a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    405c:	a3 e5       	ldi	r26, 0x53	; 83
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	e3 e5       	ldi	r30, 0x53	; 83
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	80 62       	ori	r24, 0x20	; 32
    4068:	8c 93       	st	X, r24
		break;
	}
	

}
    406a:	27 96       	adiw	r28, 0x07	; 7
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
    4076:	cf 91       	pop	r28
    4078:	df 91       	pop	r29
    407a:	08 95       	ret

0000407c <Timer0_OV_InterruptEnable>:
void Timer0_OV_InterruptEnable(void)
{
    407c:	df 93       	push	r29
    407e:	cf 93       	push	r28
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE0);
    4084:	a9 e5       	ldi	r26, 0x59	; 89
    4086:	b0 e0       	ldi	r27, 0x00	; 0
    4088:	e9 e5       	ldi	r30, 0x59	; 89
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	80 81       	ld	r24, Z
    408e:	81 60       	ori	r24, 0x01	; 1
    4090:	8c 93       	st	X, r24
}
    4092:	cf 91       	pop	r28
    4094:	df 91       	pop	r29
    4096:	08 95       	ret

00004098 <Timer0_OV_InterruptDisable>:
void Timer0_OV_InterruptDisable(void)
{
    4098:	df 93       	push	r29
    409a:	cf 93       	push	r28
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE0);
    40a0:	a9 e5       	ldi	r26, 0x59	; 89
    40a2:	b0 e0       	ldi	r27, 0x00	; 0
    40a4:	e9 e5       	ldi	r30, 0x59	; 89
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	80 81       	ld	r24, Z
    40aa:	8e 7f       	andi	r24, 0xFE	; 254
    40ac:	8c 93       	st	X, r24
}
    40ae:	cf 91       	pop	r28
    40b0:	df 91       	pop	r29
    40b2:	08 95       	ret

000040b4 <Timer0_OC_InterruptEnable>:
void Timer0_OC_InterruptEnable(void)
{
    40b4:	df 93       	push	r29
    40b6:	cf 93       	push	r28
    40b8:	cd b7       	in	r28, 0x3d	; 61
    40ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
    40bc:	a9 e5       	ldi	r26, 0x59	; 89
    40be:	b0 e0       	ldi	r27, 0x00	; 0
    40c0:	e9 e5       	ldi	r30, 0x59	; 89
    40c2:	f0 e0       	ldi	r31, 0x00	; 0
    40c4:	80 81       	ld	r24, Z
    40c6:	82 60       	ori	r24, 0x02	; 2
    40c8:	8c 93       	st	X, r24
}
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <Timer0_OC_InterruptDisable>:

void Timer0_OC_InterruptDisable(void)
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE0);
    40d8:	a9 e5       	ldi	r26, 0x59	; 89
    40da:	b0 e0       	ldi	r27, 0x00	; 0
    40dc:	e9 e5       	ldi	r30, 0x59	; 89
    40de:	f0 e0       	ldi	r31, 0x00	; 0
    40e0:	80 81       	ld	r24, Z
    40e2:	8d 7f       	andi	r24, 0xFD	; 253
    40e4:	8c 93       	st	X, r24
}
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	08 95       	ret

000040ec <Timer1_Init>:
/*************************************************TIMER 1 **************************************************/


void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler,OC1A_Mode_type oc1a_mode,OC1B_Mode_type oc1b_mode)

{
    40ec:	df 93       	push	r29
    40ee:	cf 93       	push	r28
    40f0:	cd b7       	in	r28, 0x3d	; 61
    40f2:	de b7       	in	r29, 0x3e	; 62
    40f4:	2a 97       	sbiw	r28, 0x0a	; 10
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	f8 94       	cli
    40fa:	de bf       	out	0x3e, r29	; 62
    40fc:	0f be       	out	0x3f, r0	; 63
    40fe:	cd bf       	out	0x3d, r28	; 61
    4100:	89 83       	std	Y+1, r24	; 0x01
    4102:	6a 83       	std	Y+2, r22	; 0x02
    4104:	4b 83       	std	Y+3, r20	; 0x03
    4106:	2c 83       	std	Y+4, r18	; 0x04
	switch (mode)
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	28 2f       	mov	r18, r24
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	3a 87       	std	Y+10, r19	; 0x0a
    4110:	29 87       	std	Y+9, r18	; 0x09
    4112:	89 85       	ldd	r24, Y+9	; 0x09
    4114:	9a 85       	ldd	r25, Y+10	; 0x0a
    4116:	82 30       	cpi	r24, 0x02	; 2
    4118:	91 05       	cpc	r25, r1
    411a:	09 f4       	brne	.+2      	; 0x411e <Timer1_Init+0x32>
    411c:	56 c0       	rjmp	.+172    	; 0x41ca <Timer1_Init+0xde>
    411e:	29 85       	ldd	r18, Y+9	; 0x09
    4120:	3a 85       	ldd	r19, Y+10	; 0x0a
    4122:	23 30       	cpi	r18, 0x03	; 3
    4124:	31 05       	cpc	r19, r1
    4126:	54 f4       	brge	.+20     	; 0x413c <Timer1_Init+0x50>
    4128:	89 85       	ldd	r24, Y+9	; 0x09
    412a:	9a 85       	ldd	r25, Y+10	; 0x0a
    412c:	00 97       	sbiw	r24, 0x00	; 0
    412e:	99 f0       	breq	.+38     	; 0x4156 <Timer1_Init+0x6a>
    4130:	29 85       	ldd	r18, Y+9	; 0x09
    4132:	3a 85       	ldd	r19, Y+10	; 0x0a
    4134:	21 30       	cpi	r18, 0x01	; 1
    4136:	31 05       	cpc	r19, r1
    4138:	59 f1       	breq	.+86     	; 0x4190 <Timer1_Init+0xa4>
    413a:	9d c0       	rjmp	.+314    	; 0x4276 <Timer1_Init+0x18a>
    413c:	89 85       	ldd	r24, Y+9	; 0x09
    413e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4140:	83 30       	cpi	r24, 0x03	; 3
    4142:	91 05       	cpc	r25, r1
    4144:	09 f4       	brne	.+2      	; 0x4148 <Timer1_Init+0x5c>
    4146:	5e c0       	rjmp	.+188    	; 0x4204 <Timer1_Init+0x118>
    4148:	29 85       	ldd	r18, Y+9	; 0x09
    414a:	3a 85       	ldd	r19, Y+10	; 0x0a
    414c:	24 30       	cpi	r18, 0x04	; 4
    414e:	31 05       	cpc	r19, r1
    4150:	09 f4       	brne	.+2      	; 0x4154 <Timer1_Init+0x68>
    4152:	75 c0       	rjmp	.+234    	; 0x423e <Timer1_Init+0x152>
    4154:	90 c0       	rjmp	.+288    	; 0x4276 <Timer1_Init+0x18a>
	{
		case TIMER1_NORMAL_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    4156:	af e4       	ldi	r26, 0x4F	; 79
    4158:	b0 e0       	ldi	r27, 0x00	; 0
    415a:	ef e4       	ldi	r30, 0x4F	; 79
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 81       	ld	r24, Z
    4160:	8e 7f       	andi	r24, 0xFE	; 254
    4162:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    4164:	af e4       	ldi	r26, 0x4F	; 79
    4166:	b0 e0       	ldi	r27, 0x00	; 0
    4168:	ef e4       	ldi	r30, 0x4F	; 79
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	80 81       	ld	r24, Z
    416e:	8d 7f       	andi	r24, 0xFD	; 253
    4170:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM12);
    4172:	ae e4       	ldi	r26, 0x4E	; 78
    4174:	b0 e0       	ldi	r27, 0x00	; 0
    4176:	ee e4       	ldi	r30, 0x4E	; 78
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	80 81       	ld	r24, Z
    417c:	87 7f       	andi	r24, 0xF7	; 247
    417e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    4180:	ae e4       	ldi	r26, 0x4E	; 78
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	ee e4       	ldi	r30, 0x4E	; 78
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	8f 7e       	andi	r24, 0xEF	; 239
    418c:	8c 93       	st	X, r24
    418e:	73 c0       	rjmp	.+230    	; 0x4276 <Timer1_Init+0x18a>
		break;
		case TIMER1_CTC_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    4190:	af e4       	ldi	r26, 0x4F	; 79
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	ef e4       	ldi	r30, 0x4F	; 79
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	8e 7f       	andi	r24, 0xFE	; 254
    419c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    419e:	af e4       	ldi	r26, 0x4F	; 79
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	ef e4       	ldi	r30, 0x4F	; 79
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	8d 7f       	andi	r24, 0xFD	; 253
    41aa:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    41ac:	ae e4       	ldi	r26, 0x4E	; 78
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	ee e4       	ldi	r30, 0x4E	; 78
    41b2:	f0 e0       	ldi	r31, 0x00	; 0
    41b4:	80 81       	ld	r24, Z
    41b6:	88 60       	ori	r24, 0x08	; 8
    41b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    41ba:	ae e4       	ldi	r26, 0x4E	; 78
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	ee e4       	ldi	r30, 0x4E	; 78
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	80 61       	ori	r24, 0x10	; 16
    41c6:	8c 93       	st	X, r24
    41c8:	56 c0       	rjmp	.+172    	; 0x4276 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_CTC_OCRA_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    41ca:	af e4       	ldi	r26, 0x4F	; 79
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	ef e4       	ldi	r30, 0x4F	; 79
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	8e 7f       	andi	r24, 0xFE	; 254
    41d6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,WGM11);
    41d8:	af e4       	ldi	r26, 0x4F	; 79
    41da:	b0 e0       	ldi	r27, 0x00	; 0
    41dc:	ef e4       	ldi	r30, 0x4F	; 79
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	80 81       	ld	r24, Z
    41e2:	8d 7f       	andi	r24, 0xFD	; 253
    41e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    41e6:	ae e4       	ldi	r26, 0x4E	; 78
    41e8:	b0 e0       	ldi	r27, 0x00	; 0
    41ea:	ee e4       	ldi	r30, 0x4E	; 78
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	80 81       	ld	r24, Z
    41f0:	88 60       	ori	r24, 0x08	; 8
    41f2:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,WGM13);
    41f4:	ae e4       	ldi	r26, 0x4E	; 78
    41f6:	b0 e0       	ldi	r27, 0x00	; 0
    41f8:	ee e4       	ldi	r30, 0x4E	; 78
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	80 81       	ld	r24, Z
    41fe:	8f 7e       	andi	r24, 0xEF	; 239
    4200:	8c 93       	st	X, r24
    4202:	39 c0       	rjmp	.+114    	; 0x4276 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLEAR_BIT(TCCR1A,WGM10);
    4204:	af e4       	ldi	r26, 0x4F	; 79
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	ef e4       	ldi	r30, 0x4F	; 79
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	80 81       	ld	r24, Z
    420e:	8e 7f       	andi	r24, 0xFE	; 254
    4210:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    4212:	af e4       	ldi	r26, 0x4F	; 79
    4214:	b0 e0       	ldi	r27, 0x00	; 0
    4216:	ef e4       	ldi	r30, 0x4F	; 79
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	80 81       	ld	r24, Z
    421c:	82 60       	ori	r24, 0x02	; 2
    421e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    4220:	ae e4       	ldi	r26, 0x4E	; 78
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	ee e4       	ldi	r30, 0x4E	; 78
    4226:	f0 e0       	ldi	r31, 0x00	; 0
    4228:	80 81       	ld	r24, Z
    422a:	88 60       	ori	r24, 0x08	; 8
    422c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    422e:	ae e4       	ldi	r26, 0x4E	; 78
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	ee e4       	ldi	r30, 0x4E	; 78
    4234:	f0 e0       	ldi	r31, 0x00	; 0
    4236:	80 81       	ld	r24, Z
    4238:	80 61       	ori	r24, 0x10	; 16
    423a:	8c 93       	st	X, r24
    423c:	1c c0       	rjmp	.+56     	; 0x4276 <Timer1_Init+0x18a>
		break;
		
		case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A,WGM10);
    423e:	af e4       	ldi	r26, 0x4F	; 79
    4240:	b0 e0       	ldi	r27, 0x00	; 0
    4242:	ef e4       	ldi	r30, 0x4F	; 79
    4244:	f0 e0       	ldi	r31, 0x00	; 0
    4246:	80 81       	ld	r24, Z
    4248:	81 60       	ori	r24, 0x01	; 1
    424a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,WGM11);
    424c:	af e4       	ldi	r26, 0x4F	; 79
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	ef e4       	ldi	r30, 0x4F	; 79
    4252:	f0 e0       	ldi	r31, 0x00	; 0
    4254:	80 81       	ld	r24, Z
    4256:	82 60       	ori	r24, 0x02	; 2
    4258:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM12);
    425a:	ae e4       	ldi	r26, 0x4E	; 78
    425c:	b0 e0       	ldi	r27, 0x00	; 0
    425e:	ee e4       	ldi	r30, 0x4E	; 78
    4260:	f0 e0       	ldi	r31, 0x00	; 0
    4262:	80 81       	ld	r24, Z
    4264:	88 60       	ori	r24, 0x08	; 8
    4266:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,WGM13);
    4268:	ae e4       	ldi	r26, 0x4E	; 78
    426a:	b0 e0       	ldi	r27, 0x00	; 0
    426c:	ee e4       	ldi	r30, 0x4E	; 78
    426e:	f0 e0       	ldi	r31, 0x00	; 0
    4270:	80 81       	ld	r24, Z
    4272:	80 61       	ori	r24, 0x10	; 16
    4274:	8c 93       	st	X, r24
		break;
	}
	switch (oc1a_mode)
    4276:	8b 81       	ldd	r24, Y+3	; 0x03
    4278:	28 2f       	mov	r18, r24
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	38 87       	std	Y+8, r19	; 0x08
    427e:	2f 83       	std	Y+7, r18	; 0x07
    4280:	8f 81       	ldd	r24, Y+7	; 0x07
    4282:	98 85       	ldd	r25, Y+8	; 0x08
    4284:	81 30       	cpi	r24, 0x01	; 1
    4286:	91 05       	cpc	r25, r1
    4288:	21 f1       	breq	.+72     	; 0x42d2 <Timer1_Init+0x1e6>
    428a:	2f 81       	ldd	r18, Y+7	; 0x07
    428c:	38 85       	ldd	r19, Y+8	; 0x08
    428e:	22 30       	cpi	r18, 0x02	; 2
    4290:	31 05       	cpc	r19, r1
    4292:	2c f4       	brge	.+10     	; 0x429e <Timer1_Init+0x1b2>
    4294:	8f 81       	ldd	r24, Y+7	; 0x07
    4296:	98 85       	ldd	r25, Y+8	; 0x08
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	61 f0       	breq	.+24     	; 0x42b4 <Timer1_Init+0x1c8>
    429c:	46 c0       	rjmp	.+140    	; 0x432a <Timer1_Init+0x23e>
    429e:	2f 81       	ldd	r18, Y+7	; 0x07
    42a0:	38 85       	ldd	r19, Y+8	; 0x08
    42a2:	22 30       	cpi	r18, 0x02	; 2
    42a4:	31 05       	cpc	r19, r1
    42a6:	21 f1       	breq	.+72     	; 0x42f0 <Timer1_Init+0x204>
    42a8:	8f 81       	ldd	r24, Y+7	; 0x07
    42aa:	98 85       	ldd	r25, Y+8	; 0x08
    42ac:	83 30       	cpi	r24, 0x03	; 3
    42ae:	91 05       	cpc	r25, r1
    42b0:	71 f1       	breq	.+92     	; 0x430e <Timer1_Init+0x222>
    42b2:	3b c0       	rjmp	.+118    	; 0x432a <Timer1_Init+0x23e>
	{
		case OCRA_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1A0);
    42b4:	af e4       	ldi	r26, 0x4F	; 79
    42b6:	b0 e0       	ldi	r27, 0x00	; 0
    42b8:	ef e4       	ldi	r30, 0x4F	; 79
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	80 81       	ld	r24, Z
    42be:	8f 7b       	andi	r24, 0xBF	; 191
    42c0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    42c2:	af e4       	ldi	r26, 0x4F	; 79
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	ef e4       	ldi	r30, 0x4F	; 79
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	8f 77       	andi	r24, 0x7F	; 127
    42ce:	8c 93       	st	X, r24
    42d0:	2c c0       	rjmp	.+88     	; 0x432a <Timer1_Init+0x23e>
		break;
		case OCRA_TOGGLE:
		SET_BIT(TCCR1A,COM1A0);
    42d2:	af e4       	ldi	r26, 0x4F	; 79
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	ef e4       	ldi	r30, 0x4F	; 79
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	80 81       	ld	r24, Z
    42dc:	80 64       	ori	r24, 0x40	; 64
    42de:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1A1);
    42e0:	af e4       	ldi	r26, 0x4F	; 79
    42e2:	b0 e0       	ldi	r27, 0x00	; 0
    42e4:	ef e4       	ldi	r30, 0x4F	; 79
    42e6:	f0 e0       	ldi	r31, 0x00	; 0
    42e8:	80 81       	ld	r24, Z
    42ea:	8f 77       	andi	r24, 0x7F	; 127
    42ec:	8c 93       	st	X, r24
    42ee:	1d c0       	rjmp	.+58     	; 0x432a <Timer1_Init+0x23e>
		break;
		case OCRA_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1A0);
    42f0:	af e4       	ldi	r26, 0x4F	; 79
    42f2:	b0 e0       	ldi	r27, 0x00	; 0
    42f4:	ef e4       	ldi	r30, 0x4F	; 79
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	80 81       	ld	r24, Z
    42fa:	8f 7b       	andi	r24, 0xBF	; 191
    42fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    42fe:	af e4       	ldi	r26, 0x4F	; 79
    4300:	b0 e0       	ldi	r27, 0x00	; 0
    4302:	ef e4       	ldi	r30, 0x4F	; 79
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	80 81       	ld	r24, Z
    4308:	80 68       	ori	r24, 0x80	; 128
    430a:	8c 93       	st	X, r24
    430c:	0e c0       	rjmp	.+28     	; 0x432a <Timer1_Init+0x23e>
		break;
		case OCRA_INVERTING:
		SET_BIT(TCCR1A,COM1A0);
    430e:	af e4       	ldi	r26, 0x4F	; 79
    4310:	b0 e0       	ldi	r27, 0x00	; 0
    4312:	ef e4       	ldi	r30, 0x4F	; 79
    4314:	f0 e0       	ldi	r31, 0x00	; 0
    4316:	80 81       	ld	r24, Z
    4318:	80 64       	ori	r24, 0x40	; 64
    431a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1A1);
    431c:	af e4       	ldi	r26, 0x4F	; 79
    431e:	b0 e0       	ldi	r27, 0x00	; 0
    4320:	ef e4       	ldi	r30, 0x4F	; 79
    4322:	f0 e0       	ldi	r31, 0x00	; 0
    4324:	80 81       	ld	r24, Z
    4326:	80 68       	ori	r24, 0x80	; 128
    4328:	8c 93       	st	X, r24
		break;
	}
	switch (oc1b_mode)
    432a:	8c 81       	ldd	r24, Y+4	; 0x04
    432c:	28 2f       	mov	r18, r24
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	3e 83       	std	Y+6, r19	; 0x06
    4332:	2d 83       	std	Y+5, r18	; 0x05
    4334:	8d 81       	ldd	r24, Y+5	; 0x05
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
    4338:	81 30       	cpi	r24, 0x01	; 1
    433a:	91 05       	cpc	r25, r1
    433c:	21 f1       	breq	.+72     	; 0x4386 <Timer1_Init+0x29a>
    433e:	2d 81       	ldd	r18, Y+5	; 0x05
    4340:	3e 81       	ldd	r19, Y+6	; 0x06
    4342:	22 30       	cpi	r18, 0x02	; 2
    4344:	31 05       	cpc	r19, r1
    4346:	2c f4       	brge	.+10     	; 0x4352 <Timer1_Init+0x266>
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	61 f0       	breq	.+24     	; 0x4368 <Timer1_Init+0x27c>
    4350:	46 c0       	rjmp	.+140    	; 0x43de <Timer1_Init+0x2f2>
    4352:	2d 81       	ldd	r18, Y+5	; 0x05
    4354:	3e 81       	ldd	r19, Y+6	; 0x06
    4356:	22 30       	cpi	r18, 0x02	; 2
    4358:	31 05       	cpc	r19, r1
    435a:	21 f1       	breq	.+72     	; 0x43a4 <Timer1_Init+0x2b8>
    435c:	8d 81       	ldd	r24, Y+5	; 0x05
    435e:	9e 81       	ldd	r25, Y+6	; 0x06
    4360:	83 30       	cpi	r24, 0x03	; 3
    4362:	91 05       	cpc	r25, r1
    4364:	71 f1       	breq	.+92     	; 0x43c2 <Timer1_Init+0x2d6>
    4366:	3b c0       	rjmp	.+118    	; 0x43de <Timer1_Init+0x2f2>
	{
		case OCRB_DISCONNECTED:
		CLEAR_BIT(TCCR1A,COM1B0);
    4368:	af e4       	ldi	r26, 0x4F	; 79
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	ef e4       	ldi	r30, 0x4F	; 79
    436e:	f0 e0       	ldi	r31, 0x00	; 0
    4370:	80 81       	ld	r24, Z
    4372:	8f 7e       	andi	r24, 0xEF	; 239
    4374:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    4376:	af e4       	ldi	r26, 0x4F	; 79
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	ef e4       	ldi	r30, 0x4F	; 79
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	8f 7d       	andi	r24, 0xDF	; 223
    4382:	8c 93       	st	X, r24
    4384:	2c c0       	rjmp	.+88     	; 0x43de <Timer1_Init+0x2f2>
		break;
		case OCRB_TOGGLE:
		SET_BIT(TCCR1A,COM1B0);
    4386:	af e4       	ldi	r26, 0x4F	; 79
    4388:	b0 e0       	ldi	r27, 0x00	; 0
    438a:	ef e4       	ldi	r30, 0x4F	; 79
    438c:	f0 e0       	ldi	r31, 0x00	; 0
    438e:	80 81       	ld	r24, Z
    4390:	80 61       	ori	r24, 0x10	; 16
    4392:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,COM1B1);
    4394:	af e4       	ldi	r26, 0x4F	; 79
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	ef e4       	ldi	r30, 0x4F	; 79
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	80 81       	ld	r24, Z
    439e:	8f 7d       	andi	r24, 0xDF	; 223
    43a0:	8c 93       	st	X, r24
    43a2:	1d c0       	rjmp	.+58     	; 0x43de <Timer1_Init+0x2f2>
		break;
		case OCRB_NON_INVERTING:
		CLEAR_BIT(TCCR1A,COM1B0);
    43a4:	af e4       	ldi	r26, 0x4F	; 79
    43a6:	b0 e0       	ldi	r27, 0x00	; 0
    43a8:	ef e4       	ldi	r30, 0x4F	; 79
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	80 81       	ld	r24, Z
    43ae:	8f 7e       	andi	r24, 0xEF	; 239
    43b0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    43b2:	af e4       	ldi	r26, 0x4F	; 79
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	ef e4       	ldi	r30, 0x4F	; 79
    43b8:	f0 e0       	ldi	r31, 0x00	; 0
    43ba:	80 81       	ld	r24, Z
    43bc:	80 62       	ori	r24, 0x20	; 32
    43be:	8c 93       	st	X, r24
    43c0:	0e c0       	rjmp	.+28     	; 0x43de <Timer1_Init+0x2f2>
		break;
		case OCRB_INVERTING:
		SET_BIT(TCCR1A,COM1B0);
    43c2:	af e4       	ldi	r26, 0x4F	; 79
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	ef e4       	ldi	r30, 0x4F	; 79
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	80 61       	ori	r24, 0x10	; 16
    43ce:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,COM1B1);
    43d0:	af e4       	ldi	r26, 0x4F	; 79
    43d2:	b0 e0       	ldi	r27, 0x00	; 0
    43d4:	ef e4       	ldi	r30, 0x4F	; 79
    43d6:	f0 e0       	ldi	r31, 0x00	; 0
    43d8:	80 81       	ld	r24, Z
    43da:	80 62       	ori	r24, 0x20	; 32
    43dc:	8c 93       	st	X, r24
		break;
	}
	
	
	TCCR1B&=0XF8;
    43de:	ae e4       	ldi	r26, 0x4E	; 78
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	ee e4       	ldi	r30, 0x4E	; 78
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	88 7f       	andi	r24, 0xF8	; 248
    43ea:	8c 93       	st	X, r24
	TCCR1B|=scaler;
    43ec:	ae e4       	ldi	r26, 0x4E	; 78
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	ee e4       	ldi	r30, 0x4E	; 78
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	90 81       	ld	r25, Z
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	89 2b       	or	r24, r25
    43fa:	8c 93       	st	X, r24

}
    43fc:	2a 96       	adiw	r28, 0x0a	; 10
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <Timer1_InputCaptureEdge>:

void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	0f 92       	push	r0
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	88 23       	and	r24, r24
    441e:	41 f4       	brne	.+16     	; 0x4430 <Timer1_InputCaptureEdge+0x22>
	SET_BIT(TCCR1B,ICES1);
    4420:	ae e4       	ldi	r26, 0x4E	; 78
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	ee e4       	ldi	r30, 0x4E	; 78
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	80 64       	ori	r24, 0x40	; 64
    442c:	8c 93       	st	X, r24
    442e:	0a c0       	rjmp	.+20     	; 0x4444 <Timer1_InputCaptureEdge+0x36>
	
	else if(edge==FALLING)
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	81 30       	cpi	r24, 0x01	; 1
    4434:	39 f4       	brne	.+14     	; 0x4444 <Timer1_InputCaptureEdge+0x36>
	CLEAR_BIT(TCCR1B,ICES1);
    4436:	ae e4       	ldi	r26, 0x4E	; 78
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	ee e4       	ldi	r30, 0x4E	; 78
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	8f 7b       	andi	r24, 0xBF	; 191
    4442:	8c 93       	st	X, r24

}
    4444:	0f 90       	pop	r0
    4446:	cf 91       	pop	r28
    4448:	df 91       	pop	r29
    444a:	08 95       	ret

0000444c <Timer1_ICU_InterruptEnable>:
/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    444c:	df 93       	push	r29
    444e:	cf 93       	push	r28
    4450:	cd b7       	in	r28, 0x3d	; 61
    4452:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    4454:	a9 e5       	ldi	r26, 0x59	; 89
    4456:	b0 e0       	ldi	r27, 0x00	; 0
    4458:	e9 e5       	ldi	r30, 0x59	; 89
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	80 81       	ld	r24, Z
    445e:	80 62       	ori	r24, 0x20	; 32
    4460:	8c 93       	st	X, r24
}
    4462:	cf 91       	pop	r28
    4464:	df 91       	pop	r29
    4466:	08 95       	ret

00004468 <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    4468:	df 93       	push	r29
    446a:	cf 93       	push	r28
    446c:	cd b7       	in	r28, 0x3d	; 61
    446e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    4470:	a9 e5       	ldi	r26, 0x59	; 89
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	e9 e5       	ldi	r30, 0x59	; 89
    4476:	f0 e0       	ldi	r31, 0x00	; 0
    4478:	80 81       	ld	r24, Z
    447a:	8f 7d       	andi	r24, 0xDF	; 223
    447c:	8c 93       	st	X, r24
}
    447e:	cf 91       	pop	r28
    4480:	df 91       	pop	r29
    4482:	08 95       	ret

00004484 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TOIE1);
    448c:	a9 e5       	ldi	r26, 0x59	; 89
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	e9 e5       	ldi	r30, 0x59	; 89
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	84 60       	ori	r24, 0x04	; 4
    4498:	8c 93       	st	X, r24
}
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	08 95       	ret

000044a0 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    44a0:	df 93       	push	r29
    44a2:	cf 93       	push	r28
    44a4:	cd b7       	in	r28, 0x3d	; 61
    44a6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TOIE1);
    44a8:	a9 e5       	ldi	r26, 0x59	; 89
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	e9 e5       	ldi	r30, 0x59	; 89
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	8b 7f       	andi	r24, 0xFB	; 251
    44b4:	8c 93       	st	X, r24
}
    44b6:	cf 91       	pop	r28
    44b8:	df 91       	pop	r29
    44ba:	08 95       	ret

000044bc <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    44bc:	df 93       	push	r29
    44be:	cf 93       	push	r28
    44c0:	cd b7       	in	r28, 0x3d	; 61
    44c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1A);
    44c4:	a9 e5       	ldi	r26, 0x59	; 89
    44c6:	b0 e0       	ldi	r27, 0x00	; 0
    44c8:	e9 e5       	ldi	r30, 0x59	; 89
    44ca:	f0 e0       	ldi	r31, 0x00	; 0
    44cc:	80 81       	ld	r24, Z
    44ce:	80 61       	ori	r24, 0x10	; 16
    44d0:	8c 93       	st	X, r24
}
    44d2:	cf 91       	pop	r28
    44d4:	df 91       	pop	r29
    44d6:	08 95       	ret

000044d8 <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    44d8:	df 93       	push	r29
    44da:	cf 93       	push	r28
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1A);
    44e0:	a9 e5       	ldi	r26, 0x59	; 89
    44e2:	b0 e0       	ldi	r27, 0x00	; 0
    44e4:	e9 e5       	ldi	r30, 0x59	; 89
    44e6:	f0 e0       	ldi	r31, 0x00	; 0
    44e8:	80 81       	ld	r24, Z
    44ea:	8f 7e       	andi	r24, 0xEF	; 239
    44ec:	8c 93       	st	X, r24
}
    44ee:	cf 91       	pop	r28
    44f0:	df 91       	pop	r29
    44f2:	08 95       	ret

000044f4 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    44f4:	df 93       	push	r29
    44f6:	cf 93       	push	r28
    44f8:	cd b7       	in	r28, 0x3d	; 61
    44fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE1B);
    44fc:	a9 e5       	ldi	r26, 0x59	; 89
    44fe:	b0 e0       	ldi	r27, 0x00	; 0
    4500:	e9 e5       	ldi	r30, 0x59	; 89
    4502:	f0 e0       	ldi	r31, 0x00	; 0
    4504:	80 81       	ld	r24, Z
    4506:	88 60       	ori	r24, 0x08	; 8
    4508:	8c 93       	st	X, r24
}
    450a:	cf 91       	pop	r28
    450c:	df 91       	pop	r29
    450e:	08 95       	ret

00004510 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    4510:	df 93       	push	r29
    4512:	cf 93       	push	r28
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,OCIE1B);
    4518:	a9 e5       	ldi	r26, 0x59	; 89
    451a:	b0 e0       	ldi	r27, 0x00	; 0
    451c:	e9 e5       	ldi	r30, 0x59	; 89
    451e:	f0 e0       	ldi	r31, 0x00	; 0
    4520:	80 81       	ld	r24, Z
    4522:	87 7f       	andi	r24, 0xF7	; 247
    4524:	8c 93       	st	X, r24
}
    4526:	cf 91       	pop	r28
    4528:	df 91       	pop	r29
    452a:	08 95       	ret

0000452c <Timer1_OVF_SetCallBack>:

/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    452c:	df 93       	push	r29
    452e:	cf 93       	push	r28
    4530:	00 d0       	rcall	.+0      	; 0x4532 <Timer1_OVF_SetCallBack+0x6>
    4532:	cd b7       	in	r28, 0x3d	; 61
    4534:	de b7       	in	r29, 0x3e	; 62
    4536:	9a 83       	std	Y+2, r25	; 0x02
    4538:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	9a 81       	ldd	r25, Y+2	; 0x02
    453e:	90 93 f4 01 	sts	0x01F4, r25
    4542:	80 93 f3 01 	sts	0x01F3, r24
}
    4546:	0f 90       	pop	r0
    4548:	0f 90       	pop	r0
    454a:	cf 91       	pop	r28
    454c:	df 91       	pop	r29
    454e:	08 95       	ret

00004550 <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    4550:	df 93       	push	r29
    4552:	cf 93       	push	r28
    4554:	00 d0       	rcall	.+0      	; 0x4556 <Timer1_OCA_SetCallBack+0x6>
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	9a 83       	std	Y+2, r25	; 0x02
    455c:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	9a 81       	ldd	r25, Y+2	; 0x02
    4562:	90 93 f6 01 	sts	0x01F6, r25
    4566:	80 93 f5 01 	sts	0x01F5, r24
}
    456a:	0f 90       	pop	r0
    456c:	0f 90       	pop	r0
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	08 95       	ret

00004574 <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	00 d0       	rcall	.+0      	; 0x457a <Timer1_OCB_SetCallBack+0x6>
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	9a 83       	std	Y+2, r25	; 0x02
    4580:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    4582:	89 81       	ldd	r24, Y+1	; 0x01
    4584:	9a 81       	ldd	r25, Y+2	; 0x02
    4586:	90 93 f8 01 	sts	0x01F8, r25
    458a:	80 93 f7 01 	sts	0x01F7, r24
}
    458e:	0f 90       	pop	r0
    4590:	0f 90       	pop	r0
    4592:	cf 91       	pop	r28
    4594:	df 91       	pop	r29
    4596:	08 95       	ret

00004598 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    4598:	df 93       	push	r29
    459a:	cf 93       	push	r28
    459c:	00 d0       	rcall	.+0      	; 0x459e <Timer1_ICU_SetCallBack+0x6>
    459e:	cd b7       	in	r28, 0x3d	; 61
    45a0:	de b7       	in	r29, 0x3e	; 62
    45a2:	9a 83       	std	Y+2, r25	; 0x02
    45a4:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    45a6:	89 81       	ldd	r24, Y+1	; 0x01
    45a8:	9a 81       	ldd	r25, Y+2	; 0x02
    45aa:	90 93 fa 01 	sts	0x01FA, r25
    45ae:	80 93 f9 01 	sts	0x01F9, r24
}
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    45bc:	1f 92       	push	r1
    45be:	0f 92       	push	r0
    45c0:	0f b6       	in	r0, 0x3f	; 63
    45c2:	0f 92       	push	r0
    45c4:	11 24       	eor	r1, r1
    45c6:	2f 93       	push	r18
    45c8:	3f 93       	push	r19
    45ca:	4f 93       	push	r20
    45cc:	5f 93       	push	r21
    45ce:	6f 93       	push	r22
    45d0:	7f 93       	push	r23
    45d2:	8f 93       	push	r24
    45d4:	9f 93       	push	r25
    45d6:	af 93       	push	r26
    45d8:	bf 93       	push	r27
    45da:	ef 93       	push	r30
    45dc:	ff 93       	push	r31
    45de:	df 93       	push	r29
    45e0:	cf 93       	push	r28
    45e2:	cd b7       	in	r28, 0x3d	; 61
    45e4:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULLPTR)
    45e6:	80 91 f3 01 	lds	r24, 0x01F3
    45ea:	90 91 f4 01 	lds	r25, 0x01F4
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	29 f0       	breq	.+10     	; 0x45fc <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    45f2:	e0 91 f3 01 	lds	r30, 0x01F3
    45f6:	f0 91 f4 01 	lds	r31, 0x01F4
    45fa:	09 95       	icall
	}
}
    45fc:	cf 91       	pop	r28
    45fe:	df 91       	pop	r29
    4600:	ff 91       	pop	r31
    4602:	ef 91       	pop	r30
    4604:	bf 91       	pop	r27
    4606:	af 91       	pop	r26
    4608:	9f 91       	pop	r25
    460a:	8f 91       	pop	r24
    460c:	7f 91       	pop	r23
    460e:	6f 91       	pop	r22
    4610:	5f 91       	pop	r21
    4612:	4f 91       	pop	r20
    4614:	3f 91       	pop	r19
    4616:	2f 91       	pop	r18
    4618:	0f 90       	pop	r0
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	0f 90       	pop	r0
    461e:	1f 90       	pop	r1
    4620:	18 95       	reti

00004622 <TIMER1_OCA_vect>:
ISR(TIMER1_OCA_vect)
{
    4622:	1f 92       	push	r1
    4624:	0f 92       	push	r0
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	0f 92       	push	r0
    462a:	11 24       	eor	r1, r1
    462c:	2f 93       	push	r18
    462e:	3f 93       	push	r19
    4630:	4f 93       	push	r20
    4632:	5f 93       	push	r21
    4634:	6f 93       	push	r22
    4636:	7f 93       	push	r23
    4638:	8f 93       	push	r24
    463a:	9f 93       	push	r25
    463c:	af 93       	push	r26
    463e:	bf 93       	push	r27
    4640:	ef 93       	push	r30
    4642:	ff 93       	push	r31
    4644:	df 93       	push	r29
    4646:	cf 93       	push	r28
    4648:	cd b7       	in	r28, 0x3d	; 61
    464a:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULLPTR)
    464c:	80 91 f5 01 	lds	r24, 0x01F5
    4650:	90 91 f6 01 	lds	r25, 0x01F6
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	29 f0       	breq	.+10     	; 0x4662 <TIMER1_OCA_vect+0x40>
	{
		Timer1_OCA_Fptr();
    4658:	e0 91 f5 01 	lds	r30, 0x01F5
    465c:	f0 91 f6 01 	lds	r31, 0x01F6
    4660:	09 95       	icall
	}
}
    4662:	cf 91       	pop	r28
    4664:	df 91       	pop	r29
    4666:	ff 91       	pop	r31
    4668:	ef 91       	pop	r30
    466a:	bf 91       	pop	r27
    466c:	af 91       	pop	r26
    466e:	9f 91       	pop	r25
    4670:	8f 91       	pop	r24
    4672:	7f 91       	pop	r23
    4674:	6f 91       	pop	r22
    4676:	5f 91       	pop	r21
    4678:	4f 91       	pop	r20
    467a:	3f 91       	pop	r19
    467c:	2f 91       	pop	r18
    467e:	0f 90       	pop	r0
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	0f 90       	pop	r0
    4684:	1f 90       	pop	r1
    4686:	18 95       	reti

00004688 <TIMER1_OCB_vect>:
ISR(TIMER1_OCB_vect)
{
    4688:	1f 92       	push	r1
    468a:	0f 92       	push	r0
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	0f 92       	push	r0
    4690:	11 24       	eor	r1, r1
    4692:	2f 93       	push	r18
    4694:	3f 93       	push	r19
    4696:	4f 93       	push	r20
    4698:	5f 93       	push	r21
    469a:	6f 93       	push	r22
    469c:	7f 93       	push	r23
    469e:	8f 93       	push	r24
    46a0:	9f 93       	push	r25
    46a2:	af 93       	push	r26
    46a4:	bf 93       	push	r27
    46a6:	ef 93       	push	r30
    46a8:	ff 93       	push	r31
    46aa:	df 93       	push	r29
    46ac:	cf 93       	push	r28
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULLPTR)
    46b2:	80 91 f7 01 	lds	r24, 0x01F7
    46b6:	90 91 f8 01 	lds	r25, 0x01F8
    46ba:	00 97       	sbiw	r24, 0x00	; 0
    46bc:	29 f0       	breq	.+10     	; 0x46c8 <TIMER1_OCB_vect+0x40>
	{
		Timer1_OCB_Fptr();
    46be:	e0 91 f7 01 	lds	r30, 0x01F7
    46c2:	f0 91 f8 01 	lds	r31, 0x01F8
    46c6:	09 95       	icall
	}
}
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	ff 91       	pop	r31
    46ce:	ef 91       	pop	r30
    46d0:	bf 91       	pop	r27
    46d2:	af 91       	pop	r26
    46d4:	9f 91       	pop	r25
    46d6:	8f 91       	pop	r24
    46d8:	7f 91       	pop	r23
    46da:	6f 91       	pop	r22
    46dc:	5f 91       	pop	r21
    46de:	4f 91       	pop	r20
    46e0:	3f 91       	pop	r19
    46e2:	2f 91       	pop	r18
    46e4:	0f 90       	pop	r0
    46e6:	0f be       	out	0x3f, r0	; 63
    46e8:	0f 90       	pop	r0
    46ea:	1f 90       	pop	r1
    46ec:	18 95       	reti

000046ee <TIMER1_ICU_vect>:
ISR(TIMER1_ICU_vect)
{
    46ee:	1f 92       	push	r1
    46f0:	0f 92       	push	r0
    46f2:	0f b6       	in	r0, 0x3f	; 63
    46f4:	0f 92       	push	r0
    46f6:	11 24       	eor	r1, r1
    46f8:	2f 93       	push	r18
    46fa:	3f 93       	push	r19
    46fc:	4f 93       	push	r20
    46fe:	5f 93       	push	r21
    4700:	6f 93       	push	r22
    4702:	7f 93       	push	r23
    4704:	8f 93       	push	r24
    4706:	9f 93       	push	r25
    4708:	af 93       	push	r26
    470a:	bf 93       	push	r27
    470c:	ef 93       	push	r30
    470e:	ff 93       	push	r31
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULLPTR)
    4718:	80 91 f9 01 	lds	r24, 0x01F9
    471c:	90 91 fa 01 	lds	r25, 0x01FA
    4720:	00 97       	sbiw	r24, 0x00	; 0
    4722:	29 f0       	breq	.+10     	; 0x472e <TIMER1_ICU_vect+0x40>
	{
		Timer1_ICU_Fptr();
    4724:	e0 91 f9 01 	lds	r30, 0x01F9
    4728:	f0 91 fa 01 	lds	r31, 0x01FA
    472c:	09 95       	icall
	}
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	ff 91       	pop	r31
    4734:	ef 91       	pop	r30
    4736:	bf 91       	pop	r27
    4738:	af 91       	pop	r26
    473a:	9f 91       	pop	r25
    473c:	8f 91       	pop	r24
    473e:	7f 91       	pop	r23
    4740:	6f 91       	pop	r22
    4742:	5f 91       	pop	r21
    4744:	4f 91       	pop	r20
    4746:	3f 91       	pop	r19
    4748:	2f 91       	pop	r18
    474a:	0f 90       	pop	r0
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	0f 90       	pop	r0
    4750:	1f 90       	pop	r1
    4752:	18 95       	reti

00004754 <UART_Init>:
const u16 BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE]=
		 {{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
		  {{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};
									
void UART_Init(void)
{
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	00 d0       	rcall	.+0      	; 0x475a <UART_Init+0x6>
    475a:	0f 92       	push	r0
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
	u8  UCSRC_var=0;
    4760:	1b 82       	std	Y+3, r1	; 0x03
	u16 UBRR_var=0; 
    4762:	1a 82       	std	Y+2, r1	; 0x02
    4764:	19 82       	std	Y+1, r1	; 0x01
/***************************** transmission speed***************************/
	#if (SPEED_MODE==NORMAL_SPEED)
	CLEAR_BIT(UCSRA,U2X);
	#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
    4766:	ab e2       	ldi	r26, 0x2B	; 43
    4768:	b0 e0       	ldi	r27, 0x00	; 0
    476a:	eb e2       	ldi	r30, 0x2B	; 43
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	82 60       	ori	r24, 0x02	; 2
    4772:	8c 93       	st	X, r24
	#endif

//******************set URSEL to write data to UCSRC register***************/ 
   SET_BIT(UCSRC_var,URSEL);
    4774:	8b 81       	ldd	r24, Y+3	; 0x03
    4776:	80 68       	ori	r24, 0x80	; 128
    4778:	8b 83       	std	Y+3, r24	; 0x03
 
//********************************synch***********************************/
	 #if (SYNCH_MODE==SYNCH)
	 SET_BIT(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE==ASYNCH)
 	 CLEAR_BIT(UCSRC_var,UMSEL);
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	8f 7b       	andi	r24, 0xBF	; 191
    477e:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE==EVEN_PARITY)
	CLEAR_BIT(UCSRC_var,UPM0);
	SET_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE==ODD_PARITY)
	SET_BIT(UCSRC_var,UPM0);
    4780:	8b 81       	ldd	r24, Y+3	; 0x03
    4782:	80 61       	ori	r24, 0x10	; 16
    4784:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UPM1);
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	80 62       	ori	r24, 0x20	; 32
    478a:	8b 83       	std	Y+3, r24	; 0x03
    #elif (N_DATA_BITS==_7_DATA_BITS)
    CLEAR_BIT(UCSRC_var,UCSZ0);
    SET_BIT(UCSRC_var,UCSZ1);
    CLEAR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
    478c:	8b 81       	ldd	r24, Y+3	; 0x03
    478e:	82 60       	ori	r24, 0x02	; 2
    4790:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
    4792:	8b 81       	ldd	r24, Y+3	; 0x03
    4794:	84 60       	ori	r24, 0x04	; 4
    4796:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRB,UCSZ2);
    4798:	aa e2       	ldi	r26, 0x2A	; 42
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	ea e2       	ldi	r30, 0x2A	; 42
    479e:	f0 e0       	ldi	r31, 0x00	; 0
    47a0:	80 81       	ld	r24, Z
    47a2:	8b 7f       	andi	r24, 0xFB	; 251
    47a4:	8c 93       	st	X, r24
	#endif
//************************Stop bits*******************************/	
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLEAR_BIT(UCSRC_var,USBS);
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	88 60       	ori	r24, 0x08	; 8
    47aa:	8b 83       	std	Y+3, r24	; 0x03
	#endif
//*****************set UCSRC value   *******************************/	
	UCSRC=UCSRC_var;
    47ac:	e0 e4       	ldi	r30, 0x40	; 64
    47ae:	f0 e0       	ldi	r31, 0x00	; 0
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	80 83       	st	Z, r24

//************************Baud rate *******************************/	

    UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
    47b4:	80 91 c5 01 	lds	r24, 0x01C5
    47b8:	90 91 c6 01 	lds	r25, 0x01C6
    47bc:	9a 83       	std	Y+2, r25	; 0x02
    47be:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(UBRR_var>>8);
    47c0:	e0 e4       	ldi	r30, 0x40	; 64
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	89 2f       	mov	r24, r25
    47ca:	99 27       	eor	r25, r25
    47cc:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR_var;
    47ce:	e9 e2       	ldi	r30, 0x29	; 41
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	89 81       	ldd	r24, Y+1	; 0x01
    47d4:	80 83       	st	Z, r24
	
//************************Enable  *******************************/		
//enable UART  receiver.
SET_BIT(UCSRB,RXEN);
    47d6:	aa e2       	ldi	r26, 0x2A	; 42
    47d8:	b0 e0       	ldi	r27, 0x00	; 0
    47da:	ea e2       	ldi	r30, 0x2A	; 42
    47dc:	f0 e0       	ldi	r31, 0x00	; 0
    47de:	80 81       	ld	r24, Z
    47e0:	80 61       	ori	r24, 0x10	; 16
    47e2:	8c 93       	st	X, r24
//enable UART  transmitter .
SET_BIT(UCSRB,TXEN);
    47e4:	aa e2       	ldi	r26, 0x2A	; 42
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	ea e2       	ldi	r30, 0x2A	; 42
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	80 81       	ld	r24, Z
    47ee:	88 60       	ori	r24, 0x08	; 8
    47f0:	8c 93       	st	X, r24
}
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	cf 91       	pop	r28
    47fa:	df 91       	pop	r29
    47fc:	08 95       	ret

000047fe <UART_RX_InterruptEnable>:

/*****************************************Interrupt functions*********************************************/


 void UART_RX_InterruptEnable(void) 
{
    47fe:	df 93       	push	r29
    4800:	cf 93       	push	r28
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    4806:	aa e2       	ldi	r26, 0x2A	; 42
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	ea e2       	ldi	r30, 0x2A	; 42
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	80 68       	ori	r24, 0x80	; 128
    4812:	8c 93       	st	X, r24
}
    4814:	cf 91       	pop	r28
    4816:	df 91       	pop	r29
    4818:	08 95       	ret

0000481a <UART_RX_InterruptDisable>:

 void UART_RX_InterruptDisable(void)
{
    481a:	df 93       	push	r29
    481c:	cf 93       	push	r28
    481e:	cd b7       	in	r28, 0x3d	; 61
    4820:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    4822:	aa e2       	ldi	r26, 0x2A	; 42
    4824:	b0 e0       	ldi	r27, 0x00	; 0
    4826:	ea e2       	ldi	r30, 0x2A	; 42
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	80 81       	ld	r24, Z
    482c:	8f 77       	andi	r24, 0x7F	; 127
    482e:	8c 93       	st	X, r24
}
    4830:	cf 91       	pop	r28
    4832:	df 91       	pop	r29
    4834:	08 95       	ret

00004836 <UART_TX_InterruptEnable>:

 void UART_TX_InterruptEnable(void)
{
    4836:	df 93       	push	r29
    4838:	cf 93       	push	r28
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    483e:	aa e2       	ldi	r26, 0x2A	; 42
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	ea e2       	ldi	r30, 0x2A	; 42
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	80 81       	ld	r24, Z
    4848:	80 64       	ori	r24, 0x40	; 64
    484a:	8c 93       	st	X, r24
}
    484c:	cf 91       	pop	r28
    484e:	df 91       	pop	r29
    4850:	08 95       	ret

00004852 <UART_TX_InterruptDisable>:

 void UART_TX_InterruptDisable(void)
{
    4852:	df 93       	push	r29
    4854:	cf 93       	push	r28
    4856:	cd b7       	in	r28, 0x3d	; 61
    4858:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    485a:	aa e2       	ldi	r26, 0x2A	; 42
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	ea e2       	ldi	r30, 0x2A	; 42
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	8f 7b       	andi	r24, 0xBF	; 191
    4866:	8c 93       	st	X, r24
}
    4868:	cf 91       	pop	r28
    486a:	df 91       	pop	r29
    486c:	08 95       	ret

0000486e <UART_RX_SetCallBack>:
/*****************************************Set Call Back Functions*********************************************/	
 void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    486e:	df 93       	push	r29
    4870:	cf 93       	push	r28
    4872:	00 d0       	rcall	.+0      	; 0x4874 <UART_RX_SetCallBack+0x6>
    4874:	cd b7       	in	r28, 0x3d	; 61
    4876:	de b7       	in	r29, 0x3e	; 62
    4878:	9a 83       	std	Y+2, r25	; 0x02
    487a:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	9a 81       	ldd	r25, Y+2	; 0x02
    4880:	90 93 fc 01 	sts	0x01FC, r25
    4884:	80 93 fb 01 	sts	0x01FB, r24
}
    4888:	0f 90       	pop	r0
    488a:	0f 90       	pop	r0
    488c:	cf 91       	pop	r28
    488e:	df 91       	pop	r29
    4890:	08 95       	ret

00004892 <UART_TX_SetCallBack>:

 void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    4892:	df 93       	push	r29
    4894:	cf 93       	push	r28
    4896:	00 d0       	rcall	.+0      	; 0x4898 <UART_TX_SetCallBack+0x6>
    4898:	cd b7       	in	r28, 0x3d	; 61
    489a:	de b7       	in	r29, 0x3e	; 62
    489c:	9a 83       	std	Y+2, r25	; 0x02
    489e:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	9a 81       	ldd	r25, Y+2	; 0x02
    48a4:	90 93 fe 01 	sts	0x01FE, r25
    48a8:	80 93 fd 01 	sts	0x01FD, r24
}
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	cf 91       	pop	r28
    48b2:	df 91       	pop	r29
    48b4:	08 95       	ret

000048b6 <__vector_13>:
/***********************************************ISR ************************************************************/
 ISR(USART_RXC_vect)
{
    48b6:	1f 92       	push	r1
    48b8:	0f 92       	push	r0
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	0f 92       	push	r0
    48be:	11 24       	eor	r1, r1
    48c0:	2f 93       	push	r18
    48c2:	3f 93       	push	r19
    48c4:	4f 93       	push	r20
    48c6:	5f 93       	push	r21
    48c8:	6f 93       	push	r22
    48ca:	7f 93       	push	r23
    48cc:	8f 93       	push	r24
    48ce:	9f 93       	push	r25
    48d0:	af 93       	push	r26
    48d2:	bf 93       	push	r27
    48d4:	ef 93       	push	r30
    48d6:	ff 93       	push	r31
    48d8:	df 93       	push	r29
    48da:	cf 93       	push	r28
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=NULLPTR)
    48e0:	80 91 fb 01 	lds	r24, 0x01FB
    48e4:	90 91 fc 01 	lds	r25, 0x01FC
    48e8:	00 97       	sbiw	r24, 0x00	; 0
    48ea:	29 f0       	breq	.+10     	; 0x48f6 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    48ec:	e0 91 fb 01 	lds	r30, 0x01FB
    48f0:	f0 91 fc 01 	lds	r31, 0x01FC
    48f4:	09 95       	icall
	}
}
    48f6:	cf 91       	pop	r28
    48f8:	df 91       	pop	r29
    48fa:	ff 91       	pop	r31
    48fc:	ef 91       	pop	r30
    48fe:	bf 91       	pop	r27
    4900:	af 91       	pop	r26
    4902:	9f 91       	pop	r25
    4904:	8f 91       	pop	r24
    4906:	7f 91       	pop	r23
    4908:	6f 91       	pop	r22
    490a:	5f 91       	pop	r21
    490c:	4f 91       	pop	r20
    490e:	3f 91       	pop	r19
    4910:	2f 91       	pop	r18
    4912:	0f 90       	pop	r0
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	0f 90       	pop	r0
    4918:	1f 90       	pop	r1
    491a:	18 95       	reti

0000491c <__vector_15>:

 ISR(USART_TXC_vect)
{
    491c:	1f 92       	push	r1
    491e:	0f 92       	push	r0
    4920:	0f b6       	in	r0, 0x3f	; 63
    4922:	0f 92       	push	r0
    4924:	11 24       	eor	r1, r1
    4926:	2f 93       	push	r18
    4928:	3f 93       	push	r19
    492a:	4f 93       	push	r20
    492c:	5f 93       	push	r21
    492e:	6f 93       	push	r22
    4930:	7f 93       	push	r23
    4932:	8f 93       	push	r24
    4934:	9f 93       	push	r25
    4936:	af 93       	push	r26
    4938:	bf 93       	push	r27
    493a:	ef 93       	push	r30
    493c:	ff 93       	push	r31
    493e:	df 93       	push	r29
    4940:	cf 93       	push	r28
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr!=NULLPTR)
    4946:	80 91 fd 01 	lds	r24, 0x01FD
    494a:	90 91 fe 01 	lds	r25, 0x01FE
    494e:	00 97       	sbiw	r24, 0x00	; 0
    4950:	29 f0       	breq	.+10     	; 0x495c <__vector_15+0x40>
	{
		UART_TX_Fptr();
    4952:	e0 91 fd 01 	lds	r30, 0x01FD
    4956:	f0 91 fe 01 	lds	r31, 0x01FE
    495a:	09 95       	icall
	}
}
    495c:	cf 91       	pop	r28
    495e:	df 91       	pop	r29
    4960:	ff 91       	pop	r31
    4962:	ef 91       	pop	r30
    4964:	bf 91       	pop	r27
    4966:	af 91       	pop	r26
    4968:	9f 91       	pop	r25
    496a:	8f 91       	pop	r24
    496c:	7f 91       	pop	r23
    496e:	6f 91       	pop	r22
    4970:	5f 91       	pop	r21
    4972:	4f 91       	pop	r20
    4974:	3f 91       	pop	r19
    4976:	2f 91       	pop	r18
    4978:	0f 90       	pop	r0
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	0f 90       	pop	r0
    497e:	1f 90       	pop	r1
    4980:	18 95       	reti

00004982 <UART_SendByteNoBlock>:


/****************************************Send and receive functions with no ckecking********************************/

void UART_SendByteNoBlock(u8 data)
{
    4982:	df 93       	push	r29
    4984:	cf 93       	push	r28
    4986:	0f 92       	push	r0
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    498e:	ec e2       	ldi	r30, 0x2C	; 44
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	89 81       	ldd	r24, Y+1	; 0x01
    4994:	80 83       	st	Z, r24
}
    4996:	0f 90       	pop	r0
    4998:	cf 91       	pop	r28
    499a:	df 91       	pop	r29
    499c:	08 95       	ret

0000499e <UART_ReceiveByteNoBlock>:

u8 UART_ReceiveByteNoBlock(void)
{
    499e:	df 93       	push	r29
    49a0:	cf 93       	push	r28
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    49a6:	ec e2       	ldi	r30, 0x2C	; 44
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
}
    49ac:	cf 91       	pop	r28
    49ae:	df 91       	pop	r29
    49b0:	08 95       	ret

000049b2 <UART_SendByte>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendByte(u8 data)
{
    49b2:	df 93       	push	r29
    49b4:	cf 93       	push	r28
    49b6:	0f 92       	push	r0
    49b8:	cd b7       	in	r28, 0x3d	; 61
    49ba:	de b7       	in	r29, 0x3e	; 62
    49bc:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the buffer is empty and ready
	for transmitting a new byte so wait until this flag is set to one 
	and it will cleared by hardware when u write  new data to puffer.*/
	while(!(CHECK_BIT(UCSRA,UDRE)));  
    49be:	eb e2       	ldi	r30, 0x2B	; 43
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	80 81       	ld	r24, Z
    49c4:	82 95       	swap	r24
    49c6:	86 95       	lsr	r24
    49c8:	87 70       	andi	r24, 0x07	; 7
    49ca:	88 2f       	mov	r24, r24
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	81 70       	andi	r24, 0x01	; 1
    49d0:	90 70       	andi	r25, 0x00	; 0
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	a1 f3       	breq	.-24     	; 0x49be <UART_SendByte+0xc>
	UDR = data;
    49d6:	ec e2       	ldi	r30, 0x2C	; 44
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	89 81       	ldd	r24, Y+1	; 0x01
    49dc:	80 83       	st	Z, r24
}
    49de:	0f 90       	pop	r0
    49e0:	cf 91       	pop	r28
    49e2:	df 91       	pop	r29
    49e4:	08 95       	ret

000049e6 <UART_ReceiveByte>:

u8 UART_ReceiveByte(void)
{
    49e6:	df 93       	push	r29
    49e8:	cf 93       	push	r28
    49ea:	cd b7       	in	r28, 0x3d	; 61
    49ec:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when the UART receive data so  wait until this flag is set to one
	and it will cleared by hardware when u read the data*/
	while(!(CHECK_BIT(UCSRA,RXC)));  
    49ee:	eb e2       	ldi	r30, 0x2B	; 43
    49f0:	f0 e0       	ldi	r31, 0x00	; 0
    49f2:	80 81       	ld	r24, Z
    49f4:	88 23       	and	r24, r24
    49f6:	dc f7       	brge	.-10     	; 0x49ee <UART_ReceiveByte+0x8>
    return UDR;
    49f8:	ec e2       	ldi	r30, 0x2C	; 44
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	80 81       	ld	r24, Z
}
    49fe:	cf 91       	pop	r28
    4a00:	df 91       	pop	r29
    4a02:	08 95       	ret

00004a04 <UART_Receive_NoBlock>:



u8 UART_Receive_NoBlock(u8*pdata)
{
    4a04:	df 93       	push	r29
    4a06:	cf 93       	push	r28
    4a08:	00 d0       	rcall	.+0      	; 0x4a0a <UART_Receive_NoBlock+0x6>
    4a0a:	0f 92       	push	r0
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	9b 83       	std	Y+3, r25	; 0x03
    4a12:	8a 83       	std	Y+2, r24	; 0x02
	u8 status=0;
    4a14:	19 82       	std	Y+1, r1	; 0x01
	if(CHECK_BIT(UCSRA,RXC))
    4a16:	eb e2       	ldi	r30, 0x2B	; 43
    4a18:	f0 e0       	ldi	r31, 0x00	; 0
    4a1a:	80 81       	ld	r24, Z
    4a1c:	88 23       	and	r24, r24
    4a1e:	4c f4       	brge	.+18     	; 0x4a32 <UART_Receive_NoBlock+0x2e>
	{
		*pdata=UDR;
    4a20:	ec e2       	ldi	r30, 0x2C	; 44
    4a22:	f0 e0       	ldi	r31, 0x00	; 0
    4a24:	80 81       	ld	r24, Z
    4a26:	ea 81       	ldd	r30, Y+2	; 0x02
    4a28:	fb 81       	ldd	r31, Y+3	; 0x03
    4a2a:	80 83       	st	Z, r24
		status=1;
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <UART_Receive_NoBlock+0x30>
	}
	else
	{	status=0;
    4a32:	19 82       	std	Y+1, r1	; 0x01
	}
return status;
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	cf 91       	pop	r28
    4a3e:	df 91       	pop	r29
    4a40:	08 95       	ret

00004a42 <LCD_WriteCommand>:
}
/************************************* 4 BIT Mode separated Pins functions********************************************/
#elif (LCD_MODE==M_4BIT_SEPARATED)

static void LCD_WriteCommand(u8 Command)
{
    4a42:	df 93       	push	r29
    4a44:	cf 93       	push	r28
    4a46:	cd b7       	in	r28, 0x3d	; 61
    4a48:	de b7       	in	r29, 0x3e	; 62
    4a4a:	e9 97       	sbiw	r28, 0x39	; 57
    4a4c:	0f b6       	in	r0, 0x3f	; 63
    4a4e:	f8 94       	cli
    4a50:	de bf       	out	0x3e, r29	; 62
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	cd bf       	out	0x3d, r28	; 61
    4a56:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,LOW);
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(RW,LOW);
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	60 e0       	ldi	r22, 0x00	; 0
    4a64:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D4,CHECK_BIT(Command,4));
    4a68:	89 ad       	ldd	r24, Y+57	; 0x39
    4a6a:	82 95       	swap	r24
    4a6c:	8f 70       	andi	r24, 0x0F	; 15
    4a6e:	98 2f       	mov	r25, r24
    4a70:	91 70       	andi	r25, 0x01	; 1
    4a72:	83 e0       	ldi	r24, 0x03	; 3
    4a74:	69 2f       	mov	r22, r25
    4a76:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D5,CHECK_BIT(Command,5));
    4a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    4a7c:	82 95       	swap	r24
    4a7e:	86 95       	lsr	r24
    4a80:	87 70       	andi	r24, 0x07	; 7
    4a82:	98 2f       	mov	r25, r24
    4a84:	91 70       	andi	r25, 0x01	; 1
    4a86:	84 e0       	ldi	r24, 0x04	; 4
    4a88:	69 2f       	mov	r22, r25
    4a8a:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D6,CHECK_BIT(Command,6));
    4a8e:	89 ad       	ldd	r24, Y+57	; 0x39
    4a90:	82 95       	swap	r24
    4a92:	86 95       	lsr	r24
    4a94:	86 95       	lsr	r24
    4a96:	83 70       	andi	r24, 0x03	; 3
    4a98:	98 2f       	mov	r25, r24
    4a9a:	91 70       	andi	r25, 0x01	; 1
    4a9c:	85 e0       	ldi	r24, 0x05	; 5
    4a9e:	69 2f       	mov	r22, r25
    4aa0:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D7,CHECK_BIT(Command,7));
    4aa4:	89 ad       	ldd	r24, Y+57	; 0x39
    4aa6:	98 2f       	mov	r25, r24
    4aa8:	99 1f       	adc	r25, r25
    4aaa:	99 27       	eor	r25, r25
    4aac:	99 1f       	adc	r25, r25
    4aae:	86 e0       	ldi	r24, 0x06	; 6
    4ab0:	69 2f       	mov	r22, r25
    4ab2:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    4ab6:	82 e0       	ldi	r24, 0x02	; 2
    4ab8:	61 e0       	ldi	r22, 0x01	; 1
    4aba:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	a0 e0       	ldi	r26, 0x00	; 0
    4ac4:	b0 e4       	ldi	r27, 0x40	; 64
    4ac6:	8d ab       	std	Y+53, r24	; 0x35
    4ac8:	9e ab       	std	Y+54, r25	; 0x36
    4aca:	af ab       	std	Y+55, r26	; 0x37
    4acc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ace:	6d a9       	ldd	r22, Y+53	; 0x35
    4ad0:	7e a9       	ldd	r23, Y+54	; 0x36
    4ad2:	8f a9       	ldd	r24, Y+55	; 0x37
    4ad4:	98 ad       	ldd	r25, Y+56	; 0x38
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	4a ef       	ldi	r20, 0xFA	; 250
    4adc:	54 e4       	ldi	r21, 0x44	; 68
    4ade:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4ae2:	dc 01       	movw	r26, r24
    4ae4:	cb 01       	movw	r24, r22
    4ae6:	89 ab       	std	Y+49, r24	; 0x31
    4ae8:	9a ab       	std	Y+50, r25	; 0x32
    4aea:	ab ab       	std	Y+51, r26	; 0x33
    4aec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4aee:	69 a9       	ldd	r22, Y+49	; 0x31
    4af0:	7a a9       	ldd	r23, Y+50	; 0x32
    4af2:	8b a9       	ldd	r24, Y+51	; 0x33
    4af4:	9c a9       	ldd	r25, Y+52	; 0x34
    4af6:	20 e0       	ldi	r18, 0x00	; 0
    4af8:	30 e0       	ldi	r19, 0x00	; 0
    4afa:	40 e8       	ldi	r20, 0x80	; 128
    4afc:	5f e3       	ldi	r21, 0x3F	; 63
    4afe:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4b02:	88 23       	and	r24, r24
    4b04:	2c f4       	brge	.+10     	; 0x4b10 <LCD_WriteCommand+0xce>
		__ticks = 1;
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	98 ab       	std	Y+48, r25	; 0x30
    4b0c:	8f a7       	std	Y+47, r24	; 0x2f
    4b0e:	3f c0       	rjmp	.+126    	; 0x4b8e <LCD_WriteCommand+0x14c>
	else if (__tmp > 65535)
    4b10:	69 a9       	ldd	r22, Y+49	; 0x31
    4b12:	7a a9       	ldd	r23, Y+50	; 0x32
    4b14:	8b a9       	ldd	r24, Y+51	; 0x33
    4b16:	9c a9       	ldd	r25, Y+52	; 0x34
    4b18:	20 e0       	ldi	r18, 0x00	; 0
    4b1a:	3f ef       	ldi	r19, 0xFF	; 255
    4b1c:	4f e7       	ldi	r20, 0x7F	; 127
    4b1e:	57 e4       	ldi	r21, 0x47	; 71
    4b20:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4b24:	18 16       	cp	r1, r24
    4b26:	4c f5       	brge	.+82     	; 0x4b7a <LCD_WriteCommand+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b28:	6d a9       	ldd	r22, Y+53	; 0x35
    4b2a:	7e a9       	ldd	r23, Y+54	; 0x36
    4b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    4b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    4b30:	20 e0       	ldi	r18, 0x00	; 0
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	40 e2       	ldi	r20, 0x20	; 32
    4b36:	51 e4       	ldi	r21, 0x41	; 65
    4b38:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4b3c:	dc 01       	movw	r26, r24
    4b3e:	cb 01       	movw	r24, r22
    4b40:	bc 01       	movw	r22, r24
    4b42:	cd 01       	movw	r24, r26
    4b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b48:	dc 01       	movw	r26, r24
    4b4a:	cb 01       	movw	r24, r22
    4b4c:	98 ab       	std	Y+48, r25	; 0x30
    4b4e:	8f a7       	std	Y+47, r24	; 0x2f
    4b50:	0f c0       	rjmp	.+30     	; 0x4b70 <LCD_WriteCommand+0x12e>
    4b52:	88 ec       	ldi	r24, 0xC8	; 200
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	9e a7       	std	Y+46, r25	; 0x2e
    4b58:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4b5a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b5c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b5e:	01 97       	sbiw	r24, 0x01	; 1
    4b60:	f1 f7       	brne	.-4      	; 0x4b5e <LCD_WriteCommand+0x11c>
    4b62:	9e a7       	std	Y+46, r25	; 0x2e
    4b64:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b66:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b68:	98 a9       	ldd	r25, Y+48	; 0x30
    4b6a:	01 97       	sbiw	r24, 0x01	; 1
    4b6c:	98 ab       	std	Y+48, r25	; 0x30
    4b6e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b70:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b72:	98 a9       	ldd	r25, Y+48	; 0x30
    4b74:	00 97       	sbiw	r24, 0x00	; 0
    4b76:	69 f7       	brne	.-38     	; 0x4b52 <LCD_WriteCommand+0x110>
    4b78:	14 c0       	rjmp	.+40     	; 0x4ba2 <LCD_WriteCommand+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    4b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    4b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    4b80:	9c a9       	ldd	r25, Y+52	; 0x34
    4b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b86:	dc 01       	movw	r26, r24
    4b88:	cb 01       	movw	r24, r22
    4b8a:	98 ab       	std	Y+48, r25	; 0x30
    4b8c:	8f a7       	std	Y+47, r24	; 0x2f
    4b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b90:	98 a9       	ldd	r25, Y+48	; 0x30
    4b92:	9c a7       	std	Y+44, r25	; 0x2c
    4b94:	8b a7       	std	Y+43, r24	; 0x2b
    4b96:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b98:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	f1 f7       	brne	.-4      	; 0x4b9a <LCD_WriteCommand+0x158>
    4b9e:	9c a7       	std	Y+44, r25	; 0x2c
    4ba0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_WritePin(EN,LOW);
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	60 e0       	ldi	r22, 0x00	; 0
    4ba6:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    4baa:	80 e0       	ldi	r24, 0x00	; 0
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	a0 e0       	ldi	r26, 0x00	; 0
    4bb0:	b0 e4       	ldi	r27, 0x40	; 64
    4bb2:	8f a3       	std	Y+39, r24	; 0x27
    4bb4:	98 a7       	std	Y+40, r25	; 0x28
    4bb6:	a9 a7       	std	Y+41, r26	; 0x29
    4bb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bba:	6f a1       	ldd	r22, Y+39	; 0x27
    4bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    4bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    4bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	4a ef       	ldi	r20, 0xFA	; 250
    4bc8:	54 e4       	ldi	r21, 0x44	; 68
    4bca:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	8b a3       	std	Y+35, r24	; 0x23
    4bd4:	9c a3       	std	Y+36, r25	; 0x24
    4bd6:	ad a3       	std	Y+37, r26	; 0x25
    4bd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bda:	6b a1       	ldd	r22, Y+35	; 0x23
    4bdc:	7c a1       	ldd	r23, Y+36	; 0x24
    4bde:	8d a1       	ldd	r24, Y+37	; 0x25
    4be0:	9e a1       	ldd	r25, Y+38	; 0x26
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	40 e8       	ldi	r20, 0x80	; 128
    4be8:	5f e3       	ldi	r21, 0x3F	; 63
    4bea:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4bee:	88 23       	and	r24, r24
    4bf0:	2c f4       	brge	.+10     	; 0x4bfc <LCD_WriteCommand+0x1ba>
		__ticks = 1;
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	9a a3       	std	Y+34, r25	; 0x22
    4bf8:	89 a3       	std	Y+33, r24	; 0x21
    4bfa:	3f c0       	rjmp	.+126    	; 0x4c7a <LCD_WriteCommand+0x238>
	else if (__tmp > 65535)
    4bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    4bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    4c00:	8d a1       	ldd	r24, Y+37	; 0x25
    4c02:	9e a1       	ldd	r25, Y+38	; 0x26
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	3f ef       	ldi	r19, 0xFF	; 255
    4c08:	4f e7       	ldi	r20, 0x7F	; 127
    4c0a:	57 e4       	ldi	r21, 0x47	; 71
    4c0c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4c10:	18 16       	cp	r1, r24
    4c12:	4c f5       	brge	.+82     	; 0x4c66 <LCD_WriteCommand+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c14:	6f a1       	ldd	r22, Y+39	; 0x27
    4c16:	78 a5       	ldd	r23, Y+40	; 0x28
    4c18:	89 a5       	ldd	r24, Y+41	; 0x29
    4c1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	40 e2       	ldi	r20, 0x20	; 32
    4c22:	51 e4       	ldi	r21, 0x41	; 65
    4c24:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4c28:	dc 01       	movw	r26, r24
    4c2a:	cb 01       	movw	r24, r22
    4c2c:	bc 01       	movw	r22, r24
    4c2e:	cd 01       	movw	r24, r26
    4c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	9a a3       	std	Y+34, r25	; 0x22
    4c3a:	89 a3       	std	Y+33, r24	; 0x21
    4c3c:	0f c0       	rjmp	.+30     	; 0x4c5c <LCD_WriteCommand+0x21a>
    4c3e:	88 ec       	ldi	r24, 0xC8	; 200
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	98 a3       	std	Y+32, r25	; 0x20
    4c44:	8f 8f       	std	Y+31, r24	; 0x1f
    4c46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c48:	98 a1       	ldd	r25, Y+32	; 0x20
    4c4a:	01 97       	sbiw	r24, 0x01	; 1
    4c4c:	f1 f7       	brne	.-4      	; 0x4c4a <LCD_WriteCommand+0x208>
    4c4e:	98 a3       	std	Y+32, r25	; 0x20
    4c50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c52:	89 a1       	ldd	r24, Y+33	; 0x21
    4c54:	9a a1       	ldd	r25, Y+34	; 0x22
    4c56:	01 97       	sbiw	r24, 0x01	; 1
    4c58:	9a a3       	std	Y+34, r25	; 0x22
    4c5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c60:	00 97       	sbiw	r24, 0x00	; 0
    4c62:	69 f7       	brne	.-38     	; 0x4c3e <LCD_WriteCommand+0x1fc>
    4c64:	14 c0       	rjmp	.+40     	; 0x4c8e <LCD_WriteCommand+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c66:	6b a1       	ldd	r22, Y+35	; 0x23
    4c68:	7c a1       	ldd	r23, Y+36	; 0x24
    4c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    4c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    4c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c72:	dc 01       	movw	r26, r24
    4c74:	cb 01       	movw	r24, r22
    4c76:	9a a3       	std	Y+34, r25	; 0x22
    4c78:	89 a3       	std	Y+33, r24	; 0x21
    4c7a:	89 a1       	ldd	r24, Y+33	; 0x21
    4c7c:	9a a1       	ldd	r25, Y+34	; 0x22
    4c7e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c80:	8d 8f       	std	Y+29, r24	; 0x1d
    4c82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c86:	01 97       	sbiw	r24, 0x01	; 1
    4c88:	f1 f7       	brne	.-4      	; 0x4c86 <LCD_WriteCommand+0x244>
    4c8a:	9e 8f       	std	Y+30, r25	; 0x1e
    4c8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_WritePin(D4,CHECK_BIT(Command,0));
    4c8e:	89 ad       	ldd	r24, Y+57	; 0x39
    4c90:	98 2f       	mov	r25, r24
    4c92:	91 70       	andi	r25, 0x01	; 1
    4c94:	83 e0       	ldi	r24, 0x03	; 3
    4c96:	69 2f       	mov	r22, r25
    4c98:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D5,CHECK_BIT(Command,1));
    4c9c:	89 ad       	ldd	r24, Y+57	; 0x39
    4c9e:	86 95       	lsr	r24
    4ca0:	98 2f       	mov	r25, r24
    4ca2:	91 70       	andi	r25, 0x01	; 1
    4ca4:	84 e0       	ldi	r24, 0x04	; 4
    4ca6:	69 2f       	mov	r22, r25
    4ca8:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D6,CHECK_BIT(Command,2));
    4cac:	89 ad       	ldd	r24, Y+57	; 0x39
    4cae:	86 95       	lsr	r24
    4cb0:	86 95       	lsr	r24
    4cb2:	98 2f       	mov	r25, r24
    4cb4:	91 70       	andi	r25, 0x01	; 1
    4cb6:	85 e0       	ldi	r24, 0x05	; 5
    4cb8:	69 2f       	mov	r22, r25
    4cba:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D7,CHECK_BIT(Command,3));
    4cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    4cc0:	86 95       	lsr	r24
    4cc2:	86 95       	lsr	r24
    4cc4:	86 95       	lsr	r24
    4cc6:	98 2f       	mov	r25, r24
    4cc8:	91 70       	andi	r25, 0x01	; 1
    4cca:	86 e0       	ldi	r24, 0x06	; 6
    4ccc:	69 2f       	mov	r22, r25
    4cce:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    4cd2:	82 e0       	ldi	r24, 0x02	; 2
    4cd4:	61 e0       	ldi	r22, 0x01	; 1
    4cd6:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    4cda:	80 e0       	ldi	r24, 0x00	; 0
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	a0 e0       	ldi	r26, 0x00	; 0
    4ce0:	b0 e4       	ldi	r27, 0x40	; 64
    4ce2:	89 8f       	std	Y+25, r24	; 0x19
    4ce4:	9a 8f       	std	Y+26, r25	; 0x1a
    4ce6:	ab 8f       	std	Y+27, r26	; 0x1b
    4ce8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cea:	69 8d       	ldd	r22, Y+25	; 0x19
    4cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	4a ef       	ldi	r20, 0xFA	; 250
    4cf8:	54 e4       	ldi	r21, 0x44	; 68
    4cfa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	8d 8b       	std	Y+21, r24	; 0x15
    4d04:	9e 8b       	std	Y+22, r25	; 0x16
    4d06:	af 8b       	std	Y+23, r26	; 0x17
    4d08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d10:	98 8d       	ldd	r25, Y+24	; 0x18
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	40 e8       	ldi	r20, 0x80	; 128
    4d18:	5f e3       	ldi	r21, 0x3F	; 63
    4d1a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4d1e:	88 23       	and	r24, r24
    4d20:	2c f4       	brge	.+10     	; 0x4d2c <LCD_WriteCommand+0x2ea>
		__ticks = 1;
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	9c 8b       	std	Y+20, r25	; 0x14
    4d28:	8b 8b       	std	Y+19, r24	; 0x13
    4d2a:	3f c0       	rjmp	.+126    	; 0x4daa <LCD_WriteCommand+0x368>
	else if (__tmp > 65535)
    4d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d30:	8f 89       	ldd	r24, Y+23	; 0x17
    4d32:	98 8d       	ldd	r25, Y+24	; 0x18
    4d34:	20 e0       	ldi	r18, 0x00	; 0
    4d36:	3f ef       	ldi	r19, 0xFF	; 255
    4d38:	4f e7       	ldi	r20, 0x7F	; 127
    4d3a:	57 e4       	ldi	r21, 0x47	; 71
    4d3c:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4d40:	18 16       	cp	r1, r24
    4d42:	4c f5       	brge	.+82     	; 0x4d96 <LCD_WriteCommand+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d44:	69 8d       	ldd	r22, Y+25	; 0x19
    4d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	bc 01       	movw	r22, r24
    4d5e:	cd 01       	movw	r24, r26
    4d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d64:	dc 01       	movw	r26, r24
    4d66:	cb 01       	movw	r24, r22
    4d68:	9c 8b       	std	Y+20, r25	; 0x14
    4d6a:	8b 8b       	std	Y+19, r24	; 0x13
    4d6c:	0f c0       	rjmp	.+30     	; 0x4d8c <LCD_WriteCommand+0x34a>
    4d6e:	88 ec       	ldi	r24, 0xC8	; 200
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	9a 8b       	std	Y+18, r25	; 0x12
    4d74:	89 8b       	std	Y+17, r24	; 0x11
    4d76:	89 89       	ldd	r24, Y+17	; 0x11
    4d78:	9a 89       	ldd	r25, Y+18	; 0x12
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	f1 f7       	brne	.-4      	; 0x4d7a <LCD_WriteCommand+0x338>
    4d7e:	9a 8b       	std	Y+18, r25	; 0x12
    4d80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d82:	8b 89       	ldd	r24, Y+19	; 0x13
    4d84:	9c 89       	ldd	r25, Y+20	; 0x14
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	9c 8b       	std	Y+20, r25	; 0x14
    4d8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	69 f7       	brne	.-38     	; 0x4d6e <LCD_WriteCommand+0x32c>
    4d94:	14 c0       	rjmp	.+40     	; 0x4dbe <LCD_WriteCommand+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d96:	6d 89       	ldd	r22, Y+21	; 0x15
    4d98:	7e 89       	ldd	r23, Y+22	; 0x16
    4d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9c 8b       	std	Y+20, r25	; 0x14
    4da8:	8b 8b       	std	Y+19, r24	; 0x13
    4daa:	8b 89       	ldd	r24, Y+19	; 0x13
    4dac:	9c 89       	ldd	r25, Y+20	; 0x14
    4dae:	98 8b       	std	Y+16, r25	; 0x10
    4db0:	8f 87       	std	Y+15, r24	; 0x0f
    4db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4db4:	98 89       	ldd	r25, Y+16	; 0x10
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	f1 f7       	brne	.-4      	; 0x4db6 <LCD_WriteCommand+0x374>
    4dba:	98 8b       	std	Y+16, r25	; 0x10
    4dbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_WritePin(EN,LOW);
    4dbe:	82 e0       	ldi	r24, 0x02	; 2
    4dc0:	60 e0       	ldi	r22, 0x00	; 0
    4dc2:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	a0 e0       	ldi	r26, 0x00	; 0
    4dcc:	b0 e4       	ldi	r27, 0x40	; 64
    4dce:	8b 87       	std	Y+11, r24	; 0x0b
    4dd0:	9c 87       	std	Y+12, r25	; 0x0c
    4dd2:	ad 87       	std	Y+13, r26	; 0x0d
    4dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dde:	20 e0       	ldi	r18, 0x00	; 0
    4de0:	30 e0       	ldi	r19, 0x00	; 0
    4de2:	4a ef       	ldi	r20, 0xFA	; 250
    4de4:	54 e4       	ldi	r21, 0x44	; 68
    4de6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4dea:	dc 01       	movw	r26, r24
    4dec:	cb 01       	movw	r24, r22
    4dee:	8f 83       	std	Y+7, r24	; 0x07
    4df0:	98 87       	std	Y+8, r25	; 0x08
    4df2:	a9 87       	std	Y+9, r26	; 0x09
    4df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4df6:	6f 81       	ldd	r22, Y+7	; 0x07
    4df8:	78 85       	ldd	r23, Y+8	; 0x08
    4dfa:	89 85       	ldd	r24, Y+9	; 0x09
    4dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dfe:	20 e0       	ldi	r18, 0x00	; 0
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	40 e8       	ldi	r20, 0x80	; 128
    4e04:	5f e3       	ldi	r21, 0x3F	; 63
    4e06:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4e0a:	88 23       	and	r24, r24
    4e0c:	2c f4       	brge	.+10     	; 0x4e18 <LCD_WriteCommand+0x3d6>
		__ticks = 1;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	9e 83       	std	Y+6, r25	; 0x06
    4e14:	8d 83       	std	Y+5, r24	; 0x05
    4e16:	3f c0       	rjmp	.+126    	; 0x4e96 <LCD_WriteCommand+0x454>
	else if (__tmp > 65535)
    4e18:	6f 81       	ldd	r22, Y+7	; 0x07
    4e1a:	78 85       	ldd	r23, Y+8	; 0x08
    4e1c:	89 85       	ldd	r24, Y+9	; 0x09
    4e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	3f ef       	ldi	r19, 0xFF	; 255
    4e24:	4f e7       	ldi	r20, 0x7F	; 127
    4e26:	57 e4       	ldi	r21, 0x47	; 71
    4e28:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4e2c:	18 16       	cp	r1, r24
    4e2e:	4c f5       	brge	.+82     	; 0x4e82 <LCD_WriteCommand+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	40 e2       	ldi	r20, 0x20	; 32
    4e3e:	51 e4       	ldi	r21, 0x41	; 65
    4e40:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4e44:	dc 01       	movw	r26, r24
    4e46:	cb 01       	movw	r24, r22
    4e48:	bc 01       	movw	r22, r24
    4e4a:	cd 01       	movw	r24, r26
    4e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
    4e58:	0f c0       	rjmp	.+30     	; 0x4e78 <LCD_WriteCommand+0x436>
    4e5a:	88 ec       	ldi	r24, 0xC8	; 200
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	9c 83       	std	Y+4, r25	; 0x04
    4e60:	8b 83       	std	Y+3, r24	; 0x03
    4e62:	8b 81       	ldd	r24, Y+3	; 0x03
    4e64:	9c 81       	ldd	r25, Y+4	; 0x04
    4e66:	01 97       	sbiw	r24, 0x01	; 1
    4e68:	f1 f7       	brne	.-4      	; 0x4e66 <LCD_WriteCommand+0x424>
    4e6a:	9c 83       	std	Y+4, r25	; 0x04
    4e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e70:	9e 81       	ldd	r25, Y+6	; 0x06
    4e72:	01 97       	sbiw	r24, 0x01	; 1
    4e74:	9e 83       	std	Y+6, r25	; 0x06
    4e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e78:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e7c:	00 97       	sbiw	r24, 0x00	; 0
    4e7e:	69 f7       	brne	.-38     	; 0x4e5a <LCD_WriteCommand+0x418>
    4e80:	14 c0       	rjmp	.+40     	; 0x4eaa <LCD_WriteCommand+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e82:	6f 81       	ldd	r22, Y+7	; 0x07
    4e84:	78 85       	ldd	r23, Y+8	; 0x08
    4e86:	89 85       	ldd	r24, Y+9	; 0x09
    4e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e8e:	dc 01       	movw	r26, r24
    4e90:	cb 01       	movw	r24, r22
    4e92:	9e 83       	std	Y+6, r25	; 0x06
    4e94:	8d 83       	std	Y+5, r24	; 0x05
    4e96:	8d 81       	ldd	r24, Y+5	; 0x05
    4e98:	9e 81       	ldd	r25, Y+6	; 0x06
    4e9a:	9a 83       	std	Y+2, r25	; 0x02
    4e9c:	89 83       	std	Y+1, r24	; 0x01
    4e9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea2:	01 97       	sbiw	r24, 0x01	; 1
    4ea4:	f1 f7       	brne	.-4      	; 0x4ea2 <LCD_WriteCommand+0x460>
    4ea6:	9a 83       	std	Y+2, r25	; 0x02
    4ea8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4eaa:	e9 96       	adiw	r28, 0x39	; 57
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	f8 94       	cli
    4eb0:	de bf       	out	0x3e, r29	; 62
    4eb2:	0f be       	out	0x3f, r0	; 63
    4eb4:	cd bf       	out	0x3d, r28	; 61
    4eb6:	cf 91       	pop	r28
    4eb8:	df 91       	pop	r29
    4eba:	08 95       	ret

00004ebc <LCD_WriteData>:

static void LCD_WriteData(u8 Data)
{
    4ebc:	df 93       	push	r29
    4ebe:	cf 93       	push	r28
    4ec0:	cd b7       	in	r28, 0x3d	; 61
    4ec2:	de b7       	in	r29, 0x3e	; 62
    4ec4:	e9 97       	sbiw	r28, 0x39	; 57
    4ec6:	0f b6       	in	r0, 0x3f	; 63
    4ec8:	f8 94       	cli
    4eca:	de bf       	out	0x3e, r29	; 62
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	cd bf       	out	0x3d, r28	; 61
    4ed0:	89 af       	std	Y+57, r24	; 0x39
	DIO_WritePin(RS,HIGH);
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	61 e0       	ldi	r22, 0x01	; 1
    4ed6:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(RW,LOW);
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	60 e0       	ldi	r22, 0x00	; 0
    4ede:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D4,CHECK_BIT(Data,4));
    4ee2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ee4:	82 95       	swap	r24
    4ee6:	8f 70       	andi	r24, 0x0F	; 15
    4ee8:	98 2f       	mov	r25, r24
    4eea:	91 70       	andi	r25, 0x01	; 1
    4eec:	83 e0       	ldi	r24, 0x03	; 3
    4eee:	69 2f       	mov	r22, r25
    4ef0:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D5,CHECK_BIT(Data,5));
    4ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    4ef6:	82 95       	swap	r24
    4ef8:	86 95       	lsr	r24
    4efa:	87 70       	andi	r24, 0x07	; 7
    4efc:	98 2f       	mov	r25, r24
    4efe:	91 70       	andi	r25, 0x01	; 1
    4f00:	84 e0       	ldi	r24, 0x04	; 4
    4f02:	69 2f       	mov	r22, r25
    4f04:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D6,CHECK_BIT(Data,6));
    4f08:	89 ad       	ldd	r24, Y+57	; 0x39
    4f0a:	82 95       	swap	r24
    4f0c:	86 95       	lsr	r24
    4f0e:	86 95       	lsr	r24
    4f10:	83 70       	andi	r24, 0x03	; 3
    4f12:	98 2f       	mov	r25, r24
    4f14:	91 70       	andi	r25, 0x01	; 1
    4f16:	85 e0       	ldi	r24, 0x05	; 5
    4f18:	69 2f       	mov	r22, r25
    4f1a:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D7,CHECK_BIT(Data,7));
    4f1e:	89 ad       	ldd	r24, Y+57	; 0x39
    4f20:	98 2f       	mov	r25, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	99 27       	eor	r25, r25
    4f26:	99 1f       	adc	r25, r25
    4f28:	86 e0       	ldi	r24, 0x06	; 6
    4f2a:	69 2f       	mov	r22, r25
    4f2c:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    4f30:	82 e0       	ldi	r24, 0x02	; 2
    4f32:	61 e0       	ldi	r22, 0x01	; 1
    4f34:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	a0 e0       	ldi	r26, 0x00	; 0
    4f3e:	b0 e4       	ldi	r27, 0x40	; 64
    4f40:	8d ab       	std	Y+53, r24	; 0x35
    4f42:	9e ab       	std	Y+54, r25	; 0x36
    4f44:	af ab       	std	Y+55, r26	; 0x37
    4f46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f48:	6d a9       	ldd	r22, Y+53	; 0x35
    4f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    4f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    4f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	30 e0       	ldi	r19, 0x00	; 0
    4f54:	4a ef       	ldi	r20, 0xFA	; 250
    4f56:	54 e4       	ldi	r21, 0x44	; 68
    4f58:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	89 ab       	std	Y+49, r24	; 0x31
    4f62:	9a ab       	std	Y+50, r25	; 0x32
    4f64:	ab ab       	std	Y+51, r26	; 0x33
    4f66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f68:	69 a9       	ldd	r22, Y+49	; 0x31
    4f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    4f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    4f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	40 e8       	ldi	r20, 0x80	; 128
    4f76:	5f e3       	ldi	r21, 0x3F	; 63
    4f78:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    4f7c:	88 23       	and	r24, r24
    4f7e:	2c f4       	brge	.+10     	; 0x4f8a <LCD_WriteData+0xce>
		__ticks = 1;
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	90 e0       	ldi	r25, 0x00	; 0
    4f84:	98 ab       	std	Y+48, r25	; 0x30
    4f86:	8f a7       	std	Y+47, r24	; 0x2f
    4f88:	3f c0       	rjmp	.+126    	; 0x5008 <LCD_WriteData+0x14c>
	else if (__tmp > 65535)
    4f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4f90:	9c a9       	ldd	r25, Y+52	; 0x34
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	3f ef       	ldi	r19, 0xFF	; 255
    4f96:	4f e7       	ldi	r20, 0x7F	; 127
    4f98:	57 e4       	ldi	r21, 0x47	; 71
    4f9a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    4f9e:	18 16       	cp	r1, r24
    4fa0:	4c f5       	brge	.+82     	; 0x4ff4 <LCD_WriteData+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa2:	6d a9       	ldd	r22, Y+53	; 0x35
    4fa4:	7e a9       	ldd	r23, Y+54	; 0x36
    4fa6:	8f a9       	ldd	r24, Y+55	; 0x37
    4fa8:	98 ad       	ldd	r25, Y+56	; 0x38
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	40 e2       	ldi	r20, 0x20	; 32
    4fb0:	51 e4       	ldi	r21, 0x41	; 65
    4fb2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	bc 01       	movw	r22, r24
    4fbc:	cd 01       	movw	r24, r26
    4fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	98 ab       	std	Y+48, r25	; 0x30
    4fc8:	8f a7       	std	Y+47, r24	; 0x2f
    4fca:	0f c0       	rjmp	.+30     	; 0x4fea <LCD_WriteData+0x12e>
    4fcc:	88 ec       	ldi	r24, 0xC8	; 200
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	9e a7       	std	Y+46, r25	; 0x2e
    4fd2:	8d a7       	std	Y+45, r24	; 0x2d
    4fd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	f1 f7       	brne	.-4      	; 0x4fd8 <LCD_WriteData+0x11c>
    4fdc:	9e a7       	std	Y+46, r25	; 0x2e
    4fde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	98 ab       	std	Y+48, r25	; 0x30
    4fe8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    4fec:	98 a9       	ldd	r25, Y+48	; 0x30
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	69 f7       	brne	.-38     	; 0x4fcc <LCD_WriteData+0x110>
    4ff2:	14 c0       	rjmp	.+40     	; 0x501c <LCD_WriteData+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ff6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    4ffa:	9c a9       	ldd	r25, Y+52	; 0x34
    4ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5000:	dc 01       	movw	r26, r24
    5002:	cb 01       	movw	r24, r22
    5004:	98 ab       	std	Y+48, r25	; 0x30
    5006:	8f a7       	std	Y+47, r24	; 0x2f
    5008:	8f a5       	ldd	r24, Y+47	; 0x2f
    500a:	98 a9       	ldd	r25, Y+48	; 0x30
    500c:	9c a7       	std	Y+44, r25	; 0x2c
    500e:	8b a7       	std	Y+43, r24	; 0x2b
    5010:	8b a5       	ldd	r24, Y+43	; 0x2b
    5012:	9c a5       	ldd	r25, Y+44	; 0x2c
    5014:	01 97       	sbiw	r24, 0x01	; 1
    5016:	f1 f7       	brne	.-4      	; 0x5014 <LCD_WriteData+0x158>
    5018:	9c a7       	std	Y+44, r25	; 0x2c
    501a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_WritePin(EN,LOW);
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	60 e0       	ldi	r22, 0x00	; 0
    5020:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    5024:	80 e0       	ldi	r24, 0x00	; 0
    5026:	90 e0       	ldi	r25, 0x00	; 0
    5028:	a0 e0       	ldi	r26, 0x00	; 0
    502a:	b0 e4       	ldi	r27, 0x40	; 64
    502c:	8f a3       	std	Y+39, r24	; 0x27
    502e:	98 a7       	std	Y+40, r25	; 0x28
    5030:	a9 a7       	std	Y+41, r26	; 0x29
    5032:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5034:	6f a1       	ldd	r22, Y+39	; 0x27
    5036:	78 a5       	ldd	r23, Y+40	; 0x28
    5038:	89 a5       	ldd	r24, Y+41	; 0x29
    503a:	9a a5       	ldd	r25, Y+42	; 0x2a
    503c:	20 e0       	ldi	r18, 0x00	; 0
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	4a ef       	ldi	r20, 0xFA	; 250
    5042:	54 e4       	ldi	r21, 0x44	; 68
    5044:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5048:	dc 01       	movw	r26, r24
    504a:	cb 01       	movw	r24, r22
    504c:	8b a3       	std	Y+35, r24	; 0x23
    504e:	9c a3       	std	Y+36, r25	; 0x24
    5050:	ad a3       	std	Y+37, r26	; 0x25
    5052:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5054:	6b a1       	ldd	r22, Y+35	; 0x23
    5056:	7c a1       	ldd	r23, Y+36	; 0x24
    5058:	8d a1       	ldd	r24, Y+37	; 0x25
    505a:	9e a1       	ldd	r25, Y+38	; 0x26
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	40 e8       	ldi	r20, 0x80	; 128
    5062:	5f e3       	ldi	r21, 0x3F	; 63
    5064:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5068:	88 23       	and	r24, r24
    506a:	2c f4       	brge	.+10     	; 0x5076 <LCD_WriteData+0x1ba>
		__ticks = 1;
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	9a a3       	std	Y+34, r25	; 0x22
    5072:	89 a3       	std	Y+33, r24	; 0x21
    5074:	3f c0       	rjmp	.+126    	; 0x50f4 <LCD_WriteData+0x238>
	else if (__tmp > 65535)
    5076:	6b a1       	ldd	r22, Y+35	; 0x23
    5078:	7c a1       	ldd	r23, Y+36	; 0x24
    507a:	8d a1       	ldd	r24, Y+37	; 0x25
    507c:	9e a1       	ldd	r25, Y+38	; 0x26
    507e:	20 e0       	ldi	r18, 0x00	; 0
    5080:	3f ef       	ldi	r19, 0xFF	; 255
    5082:	4f e7       	ldi	r20, 0x7F	; 127
    5084:	57 e4       	ldi	r21, 0x47	; 71
    5086:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    508a:	18 16       	cp	r1, r24
    508c:	4c f5       	brge	.+82     	; 0x50e0 <LCD_WriteData+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    508e:	6f a1       	ldd	r22, Y+39	; 0x27
    5090:	78 a5       	ldd	r23, Y+40	; 0x28
    5092:	89 a5       	ldd	r24, Y+41	; 0x29
    5094:	9a a5       	ldd	r25, Y+42	; 0x2a
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	40 e2       	ldi	r20, 0x20	; 32
    509c:	51 e4       	ldi	r21, 0x41	; 65
    509e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	bc 01       	movw	r22, r24
    50a8:	cd 01       	movw	r24, r26
    50aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	9a a3       	std	Y+34, r25	; 0x22
    50b4:	89 a3       	std	Y+33, r24	; 0x21
    50b6:	0f c0       	rjmp	.+30     	; 0x50d6 <LCD_WriteData+0x21a>
    50b8:	88 ec       	ldi	r24, 0xC8	; 200
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	98 a3       	std	Y+32, r25	; 0x20
    50be:	8f 8f       	std	Y+31, r24	; 0x1f
    50c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50c2:	98 a1       	ldd	r25, Y+32	; 0x20
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	f1 f7       	brne	.-4      	; 0x50c4 <LCD_WriteData+0x208>
    50c8:	98 a3       	std	Y+32, r25	; 0x20
    50ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50cc:	89 a1       	ldd	r24, Y+33	; 0x21
    50ce:	9a a1       	ldd	r25, Y+34	; 0x22
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	9a a3       	std	Y+34, r25	; 0x22
    50d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d6:	89 a1       	ldd	r24, Y+33	; 0x21
    50d8:	9a a1       	ldd	r25, Y+34	; 0x22
    50da:	00 97       	sbiw	r24, 0x00	; 0
    50dc:	69 f7       	brne	.-38     	; 0x50b8 <LCD_WriteData+0x1fc>
    50de:	14 c0       	rjmp	.+40     	; 0x5108 <LCD_WriteData+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e0:	6b a1       	ldd	r22, Y+35	; 0x23
    50e2:	7c a1       	ldd	r23, Y+36	; 0x24
    50e4:	8d a1       	ldd	r24, Y+37	; 0x25
    50e6:	9e a1       	ldd	r25, Y+38	; 0x26
    50e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ec:	dc 01       	movw	r26, r24
    50ee:	cb 01       	movw	r24, r22
    50f0:	9a a3       	std	Y+34, r25	; 0x22
    50f2:	89 a3       	std	Y+33, r24	; 0x21
    50f4:	89 a1       	ldd	r24, Y+33	; 0x21
    50f6:	9a a1       	ldd	r25, Y+34	; 0x22
    50f8:	9e 8f       	std	Y+30, r25	; 0x1e
    50fa:	8d 8f       	std	Y+29, r24	; 0x1d
    50fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5100:	01 97       	sbiw	r24, 0x01	; 1
    5102:	f1 f7       	brne	.-4      	; 0x5100 <LCD_WriteData+0x244>
    5104:	9e 8f       	std	Y+30, r25	; 0x1e
    5106:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_WritePin(D4,CHECK_BIT(Data,0));
    5108:	89 ad       	ldd	r24, Y+57	; 0x39
    510a:	98 2f       	mov	r25, r24
    510c:	91 70       	andi	r25, 0x01	; 1
    510e:	83 e0       	ldi	r24, 0x03	; 3
    5110:	69 2f       	mov	r22, r25
    5112:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D5,CHECK_BIT(Data,1));
    5116:	89 ad       	ldd	r24, Y+57	; 0x39
    5118:	86 95       	lsr	r24
    511a:	98 2f       	mov	r25, r24
    511c:	91 70       	andi	r25, 0x01	; 1
    511e:	84 e0       	ldi	r24, 0x04	; 4
    5120:	69 2f       	mov	r22, r25
    5122:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D6,CHECK_BIT(Data,2));
    5126:	89 ad       	ldd	r24, Y+57	; 0x39
    5128:	86 95       	lsr	r24
    512a:	86 95       	lsr	r24
    512c:	98 2f       	mov	r25, r24
    512e:	91 70       	andi	r25, 0x01	; 1
    5130:	85 e0       	ldi	r24, 0x05	; 5
    5132:	69 2f       	mov	r22, r25
    5134:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(D7,CHECK_BIT(Data,3));
    5138:	89 ad       	ldd	r24, Y+57	; 0x39
    513a:	86 95       	lsr	r24
    513c:	86 95       	lsr	r24
    513e:	86 95       	lsr	r24
    5140:	98 2f       	mov	r25, r24
    5142:	91 70       	andi	r25, 0x01	; 1
    5144:	86 e0       	ldi	r24, 0x06	; 6
    5146:	69 2f       	mov	r22, r25
    5148:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
    514c:	82 e0       	ldi	r24, 0x02	; 2
    514e:	61 e0       	ldi	r22, 0x01	; 1
    5150:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	a0 e0       	ldi	r26, 0x00	; 0
    515a:	b0 e4       	ldi	r27, 0x40	; 64
    515c:	89 8f       	std	Y+25, r24	; 0x19
    515e:	9a 8f       	std	Y+26, r25	; 0x1a
    5160:	ab 8f       	std	Y+27, r26	; 0x1b
    5162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5164:	69 8d       	ldd	r22, Y+25	; 0x19
    5166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    516a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	4a ef       	ldi	r20, 0xFA	; 250
    5172:	54 e4       	ldi	r21, 0x44	; 68
    5174:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	8d 8b       	std	Y+21, r24	; 0x15
    517e:	9e 8b       	std	Y+22, r25	; 0x16
    5180:	af 8b       	std	Y+23, r26	; 0x17
    5182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5184:	6d 89       	ldd	r22, Y+21	; 0x15
    5186:	7e 89       	ldd	r23, Y+22	; 0x16
    5188:	8f 89       	ldd	r24, Y+23	; 0x17
    518a:	98 8d       	ldd	r25, Y+24	; 0x18
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e8       	ldi	r20, 0x80	; 128
    5192:	5f e3       	ldi	r21, 0x3F	; 63
    5194:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5198:	88 23       	and	r24, r24
    519a:	2c f4       	brge	.+10     	; 0x51a6 <LCD_WriteData+0x2ea>
		__ticks = 1;
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	9c 8b       	std	Y+20, r25	; 0x14
    51a2:	8b 8b       	std	Y+19, r24	; 0x13
    51a4:	3f c0       	rjmp	.+126    	; 0x5224 <LCD_WriteData+0x368>
	else if (__tmp > 65535)
    51a6:	6d 89       	ldd	r22, Y+21	; 0x15
    51a8:	7e 89       	ldd	r23, Y+22	; 0x16
    51aa:	8f 89       	ldd	r24, Y+23	; 0x17
    51ac:	98 8d       	ldd	r25, Y+24	; 0x18
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	3f ef       	ldi	r19, 0xFF	; 255
    51b2:	4f e7       	ldi	r20, 0x7F	; 127
    51b4:	57 e4       	ldi	r21, 0x47	; 71
    51b6:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    51ba:	18 16       	cp	r1, r24
    51bc:	4c f5       	brge	.+82     	; 0x5210 <LCD_WriteData+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51be:	69 8d       	ldd	r22, Y+25	; 0x19
    51c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e2       	ldi	r20, 0x20	; 32
    51cc:	51 e4       	ldi	r21, 0x41	; 65
    51ce:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	9c 8b       	std	Y+20, r25	; 0x14
    51e4:	8b 8b       	std	Y+19, r24	; 0x13
    51e6:	0f c0       	rjmp	.+30     	; 0x5206 <LCD_WriteData+0x34a>
    51e8:	88 ec       	ldi	r24, 0xC8	; 200
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	9a 8b       	std	Y+18, r25	; 0x12
    51ee:	89 8b       	std	Y+17, r24	; 0x11
    51f0:	89 89       	ldd	r24, Y+17	; 0x11
    51f2:	9a 89       	ldd	r25, Y+18	; 0x12
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	f1 f7       	brne	.-4      	; 0x51f4 <LCD_WriteData+0x338>
    51f8:	9a 8b       	std	Y+18, r25	; 0x12
    51fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51fc:	8b 89       	ldd	r24, Y+19	; 0x13
    51fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5200:	01 97       	sbiw	r24, 0x01	; 1
    5202:	9c 8b       	std	Y+20, r25	; 0x14
    5204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5206:	8b 89       	ldd	r24, Y+19	; 0x13
    5208:	9c 89       	ldd	r25, Y+20	; 0x14
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	69 f7       	brne	.-38     	; 0x51e8 <LCD_WriteData+0x32c>
    520e:	14 c0       	rjmp	.+40     	; 0x5238 <LCD_WriteData+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5210:	6d 89       	ldd	r22, Y+21	; 0x15
    5212:	7e 89       	ldd	r23, Y+22	; 0x16
    5214:	8f 89       	ldd	r24, Y+23	; 0x17
    5216:	98 8d       	ldd	r25, Y+24	; 0x18
    5218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	9c 8b       	std	Y+20, r25	; 0x14
    5222:	8b 8b       	std	Y+19, r24	; 0x13
    5224:	8b 89       	ldd	r24, Y+19	; 0x13
    5226:	9c 89       	ldd	r25, Y+20	; 0x14
    5228:	98 8b       	std	Y+16, r25	; 0x10
    522a:	8f 87       	std	Y+15, r24	; 0x0f
    522c:	8f 85       	ldd	r24, Y+15	; 0x0f
    522e:	98 89       	ldd	r25, Y+16	; 0x10
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	f1 f7       	brne	.-4      	; 0x5230 <LCD_WriteData+0x374>
    5234:	98 8b       	std	Y+16, r25	; 0x10
    5236:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_WritePin(EN,LOW);
    5238:	82 e0       	ldi	r24, 0x02	; 2
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	a0 e0       	ldi	r26, 0x00	; 0
    5246:	b0 e4       	ldi	r27, 0x40	; 64
    5248:	8b 87       	std	Y+11, r24	; 0x0b
    524a:	9c 87       	std	Y+12, r25	; 0x0c
    524c:	ad 87       	std	Y+13, r26	; 0x0d
    524e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5250:	6b 85       	ldd	r22, Y+11	; 0x0b
    5252:	7c 85       	ldd	r23, Y+12	; 0x0c
    5254:	8d 85       	ldd	r24, Y+13	; 0x0d
    5256:	9e 85       	ldd	r25, Y+14	; 0x0e
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	4a ef       	ldi	r20, 0xFA	; 250
    525e:	54 e4       	ldi	r21, 0x44	; 68
    5260:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	8f 83       	std	Y+7, r24	; 0x07
    526a:	98 87       	std	Y+8, r25	; 0x08
    526c:	a9 87       	std	Y+9, r26	; 0x09
    526e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5270:	6f 81       	ldd	r22, Y+7	; 0x07
    5272:	78 85       	ldd	r23, Y+8	; 0x08
    5274:	89 85       	ldd	r24, Y+9	; 0x09
    5276:	9a 85       	ldd	r25, Y+10	; 0x0a
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e8       	ldi	r20, 0x80	; 128
    527e:	5f e3       	ldi	r21, 0x3F	; 63
    5280:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5284:	88 23       	and	r24, r24
    5286:	2c f4       	brge	.+10     	; 0x5292 <LCD_WriteData+0x3d6>
		__ticks = 1;
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	9e 83       	std	Y+6, r25	; 0x06
    528e:	8d 83       	std	Y+5, r24	; 0x05
    5290:	3f c0       	rjmp	.+126    	; 0x5310 <LCD_WriteData+0x454>
	else if (__tmp > 65535)
    5292:	6f 81       	ldd	r22, Y+7	; 0x07
    5294:	78 85       	ldd	r23, Y+8	; 0x08
    5296:	89 85       	ldd	r24, Y+9	; 0x09
    5298:	9a 85       	ldd	r25, Y+10	; 0x0a
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	3f ef       	ldi	r19, 0xFF	; 255
    529e:	4f e7       	ldi	r20, 0x7F	; 127
    52a0:	57 e4       	ldi	r21, 0x47	; 71
    52a2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    52a6:	18 16       	cp	r1, r24
    52a8:	4c f5       	brge	.+82     	; 0x52fc <LCD_WriteData+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    52ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    52ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    52b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e2       	ldi	r20, 0x20	; 32
    52b8:	51 e4       	ldi	r21, 0x41	; 65
    52ba:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	9e 83       	std	Y+6, r25	; 0x06
    52d0:	8d 83       	std	Y+5, r24	; 0x05
    52d2:	0f c0       	rjmp	.+30     	; 0x52f2 <LCD_WriteData+0x436>
    52d4:	88 ec       	ldi	r24, 0xC8	; 200
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	9c 83       	std	Y+4, r25	; 0x04
    52da:	8b 83       	std	Y+3, r24	; 0x03
    52dc:	8b 81       	ldd	r24, Y+3	; 0x03
    52de:	9c 81       	ldd	r25, Y+4	; 0x04
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	f1 f7       	brne	.-4      	; 0x52e0 <LCD_WriteData+0x424>
    52e4:	9c 83       	std	Y+4, r25	; 0x04
    52e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52e8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ea:	9e 81       	ldd	r25, Y+6	; 0x06
    52ec:	01 97       	sbiw	r24, 0x01	; 1
    52ee:	9e 83       	std	Y+6, r25	; 0x06
    52f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52f2:	8d 81       	ldd	r24, Y+5	; 0x05
    52f4:	9e 81       	ldd	r25, Y+6	; 0x06
    52f6:	00 97       	sbiw	r24, 0x00	; 0
    52f8:	69 f7       	brne	.-38     	; 0x52d4 <LCD_WriteData+0x418>
    52fa:	14 c0       	rjmp	.+40     	; 0x5324 <LCD_WriteData+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52fc:	6f 81       	ldd	r22, Y+7	; 0x07
    52fe:	78 85       	ldd	r23, Y+8	; 0x08
    5300:	89 85       	ldd	r24, Y+9	; 0x09
    5302:	9a 85       	ldd	r25, Y+10	; 0x0a
    5304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	9e 83       	std	Y+6, r25	; 0x06
    530e:	8d 83       	std	Y+5, r24	; 0x05
    5310:	8d 81       	ldd	r24, Y+5	; 0x05
    5312:	9e 81       	ldd	r25, Y+6	; 0x06
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01
    5318:	89 81       	ldd	r24, Y+1	; 0x01
    531a:	9a 81       	ldd	r25, Y+2	; 0x02
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	f1 f7       	brne	.-4      	; 0x531c <LCD_WriteData+0x460>
    5320:	9a 83       	std	Y+2, r25	; 0x02
    5322:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5324:	e9 96       	adiw	r28, 0x39	; 57
    5326:	0f b6       	in	r0, 0x3f	; 63
    5328:	f8 94       	cli
    532a:	de bf       	out	0x3e, r29	; 62
    532c:	0f be       	out	0x3f, r0	; 63
    532e:	cd bf       	out	0x3d, r28	; 61
    5330:	cf 91       	pop	r28
    5332:	df 91       	pop	r29
    5334:	08 95       	ret

00005336 <LCD_Init>:
void LCD_Init(void)
{
    5336:	0f 93       	push	r16
    5338:	1f 93       	push	r17
    533a:	df 93       	push	r29
    533c:	cf 93       	push	r28
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	c6 54       	subi	r28, 0x46	; 70
    5344:	d0 40       	sbci	r29, 0x00	; 0
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	f8 94       	cli
    534a:	de bf       	out	0x3e, r29	; 62
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	cd bf       	out	0x3d, r28	; 61
    5350:	fe 01       	movw	r30, r28
    5352:	ed 5b       	subi	r30, 0xBD	; 189
    5354:	ff 4f       	sbci	r31, 0xFF	; 255
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	a8 e4       	ldi	r26, 0x48	; 72
    535c:	b2 e4       	ldi	r27, 0x42	; 66
    535e:	80 83       	st	Z, r24
    5360:	91 83       	std	Z+1, r25	; 0x01
    5362:	a2 83       	std	Z+2, r26	; 0x02
    5364:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5366:	8e 01       	movw	r16, r28
    5368:	01 5c       	subi	r16, 0xC1	; 193
    536a:	1f 4f       	sbci	r17, 0xFF	; 255
    536c:	fe 01       	movw	r30, r28
    536e:	ed 5b       	subi	r30, 0xBD	; 189
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	60 81       	ld	r22, Z
    5374:	71 81       	ldd	r23, Z+1	; 0x01
    5376:	82 81       	ldd	r24, Z+2	; 0x02
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	4a ef       	ldi	r20, 0xFA	; 250
    5380:	54 e4       	ldi	r21, 0x44	; 68
    5382:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	f8 01       	movw	r30, r16
    538c:	80 83       	st	Z, r24
    538e:	91 83       	std	Z+1, r25	; 0x01
    5390:	a2 83       	std	Z+2, r26	; 0x02
    5392:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5394:	fe 01       	movw	r30, r28
    5396:	ff 96       	adiw	r30, 0x3f	; 63
    5398:	60 81       	ld	r22, Z
    539a:	71 81       	ldd	r23, Z+1	; 0x01
    539c:	82 81       	ldd	r24, Z+2	; 0x02
    539e:	93 81       	ldd	r25, Z+3	; 0x03
    53a0:	20 e0       	ldi	r18, 0x00	; 0
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	40 e8       	ldi	r20, 0x80	; 128
    53a6:	5f e3       	ldi	r21, 0x3F	; 63
    53a8:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    53ac:	88 23       	and	r24, r24
    53ae:	2c f4       	brge	.+10     	; 0x53ba <LCD_Init+0x84>
		__ticks = 1;
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	9e af       	std	Y+62, r25	; 0x3e
    53b6:	8d af       	std	Y+61, r24	; 0x3d
    53b8:	46 c0       	rjmp	.+140    	; 0x5446 <LCD_Init+0x110>
	else if (__tmp > 65535)
    53ba:	fe 01       	movw	r30, r28
    53bc:	ff 96       	adiw	r30, 0x3f	; 63
    53be:	60 81       	ld	r22, Z
    53c0:	71 81       	ldd	r23, Z+1	; 0x01
    53c2:	82 81       	ldd	r24, Z+2	; 0x02
    53c4:	93 81       	ldd	r25, Z+3	; 0x03
    53c6:	20 e0       	ldi	r18, 0x00	; 0
    53c8:	3f ef       	ldi	r19, 0xFF	; 255
    53ca:	4f e7       	ldi	r20, 0x7F	; 127
    53cc:	57 e4       	ldi	r21, 0x47	; 71
    53ce:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    53d2:	18 16       	cp	r1, r24
    53d4:	64 f5       	brge	.+88     	; 0x542e <LCD_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d6:	fe 01       	movw	r30, r28
    53d8:	ed 5b       	subi	r30, 0xBD	; 189
    53da:	ff 4f       	sbci	r31, 0xFF	; 255
    53dc:	60 81       	ld	r22, Z
    53de:	71 81       	ldd	r23, Z+1	; 0x01
    53e0:	82 81       	ldd	r24, Z+2	; 0x02
    53e2:	93 81       	ldd	r25, Z+3	; 0x03
    53e4:	20 e0       	ldi	r18, 0x00	; 0
    53e6:	30 e0       	ldi	r19, 0x00	; 0
    53e8:	40 e2       	ldi	r20, 0x20	; 32
    53ea:	51 e4       	ldi	r21, 0x41	; 65
    53ec:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    53f0:	dc 01       	movw	r26, r24
    53f2:	cb 01       	movw	r24, r22
    53f4:	bc 01       	movw	r22, r24
    53f6:	cd 01       	movw	r24, r26
    53f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	9e af       	std	Y+62, r25	; 0x3e
    5402:	8d af       	std	Y+61, r24	; 0x3d
    5404:	0f c0       	rjmp	.+30     	; 0x5424 <LCD_Init+0xee>
    5406:	88 ec       	ldi	r24, 0xC8	; 200
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	9c af       	std	Y+60, r25	; 0x3c
    540c:	8b af       	std	Y+59, r24	; 0x3b
    540e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5410:	9c ad       	ldd	r25, Y+60	; 0x3c
    5412:	01 97       	sbiw	r24, 0x01	; 1
    5414:	f1 f7       	brne	.-4      	; 0x5412 <LCD_Init+0xdc>
    5416:	9c af       	std	Y+60, r25	; 0x3c
    5418:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    541a:	8d ad       	ldd	r24, Y+61	; 0x3d
    541c:	9e ad       	ldd	r25, Y+62	; 0x3e
    541e:	01 97       	sbiw	r24, 0x01	; 1
    5420:	9e af       	std	Y+62, r25	; 0x3e
    5422:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5424:	8d ad       	ldd	r24, Y+61	; 0x3d
    5426:	9e ad       	ldd	r25, Y+62	; 0x3e
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	69 f7       	brne	.-38     	; 0x5406 <LCD_Init+0xd0>
    542c:	16 c0       	rjmp	.+44     	; 0x545a <LCD_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    542e:	fe 01       	movw	r30, r28
    5430:	ff 96       	adiw	r30, 0x3f	; 63
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    543e:	dc 01       	movw	r26, r24
    5440:	cb 01       	movw	r24, r22
    5442:	9e af       	std	Y+62, r25	; 0x3e
    5444:	8d af       	std	Y+61, r24	; 0x3d
    5446:	8d ad       	ldd	r24, Y+61	; 0x3d
    5448:	9e ad       	ldd	r25, Y+62	; 0x3e
    544a:	9a af       	std	Y+58, r25	; 0x3a
    544c:	89 af       	std	Y+57, r24	; 0x39
    544e:	89 ad       	ldd	r24, Y+57	; 0x39
    5450:	9a ad       	ldd	r25, Y+58	; 0x3a
    5452:	01 97       	sbiw	r24, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <LCD_Init+0x11c>
    5456:	9a af       	std	Y+58, r25	; 0x3a
    5458:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);          // said in Data sheet to delay after power on for 1st time
	LCD_WriteCommand(0x02);//4 bit mode only
    545a:	82 e0       	ldi	r24, 0x02	; 2
    545c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	a0 e8       	ldi	r26, 0x80	; 128
    5466:	bf e3       	ldi	r27, 0x3F	; 63
    5468:	8d ab       	std	Y+53, r24	; 0x35
    546a:	9e ab       	std	Y+54, r25	; 0x36
    546c:	af ab       	std	Y+55, r26	; 0x37
    546e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5470:	6d a9       	ldd	r22, Y+53	; 0x35
    5472:	7e a9       	ldd	r23, Y+54	; 0x36
    5474:	8f a9       	ldd	r24, Y+55	; 0x37
    5476:	98 ad       	ldd	r25, Y+56	; 0x38
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	4a ef       	ldi	r20, 0xFA	; 250
    547e:	54 e4       	ldi	r21, 0x44	; 68
    5480:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5484:	dc 01       	movw	r26, r24
    5486:	cb 01       	movw	r24, r22
    5488:	89 ab       	std	Y+49, r24	; 0x31
    548a:	9a ab       	std	Y+50, r25	; 0x32
    548c:	ab ab       	std	Y+51, r26	; 0x33
    548e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5490:	69 a9       	ldd	r22, Y+49	; 0x31
    5492:	7a a9       	ldd	r23, Y+50	; 0x32
    5494:	8b a9       	ldd	r24, Y+51	; 0x33
    5496:	9c a9       	ldd	r25, Y+52	; 0x34
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e8       	ldi	r20, 0x80	; 128
    549e:	5f e3       	ldi	r21, 0x3F	; 63
    54a0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    54a4:	88 23       	and	r24, r24
    54a6:	2c f4       	brge	.+10     	; 0x54b2 <LCD_Init+0x17c>
		__ticks = 1;
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	90 e0       	ldi	r25, 0x00	; 0
    54ac:	98 ab       	std	Y+48, r25	; 0x30
    54ae:	8f a7       	std	Y+47, r24	; 0x2f
    54b0:	3f c0       	rjmp	.+126    	; 0x5530 <LCD_Init+0x1fa>
	else if (__tmp > 65535)
    54b2:	69 a9       	ldd	r22, Y+49	; 0x31
    54b4:	7a a9       	ldd	r23, Y+50	; 0x32
    54b6:	8b a9       	ldd	r24, Y+51	; 0x33
    54b8:	9c a9       	ldd	r25, Y+52	; 0x34
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	3f ef       	ldi	r19, 0xFF	; 255
    54be:	4f e7       	ldi	r20, 0x7F	; 127
    54c0:	57 e4       	ldi	r21, 0x47	; 71
    54c2:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    54c6:	18 16       	cp	r1, r24
    54c8:	4c f5       	brge	.+82     	; 0x551c <LCD_Init+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54ca:	6d a9       	ldd	r22, Y+53	; 0x35
    54cc:	7e a9       	ldd	r23, Y+54	; 0x36
    54ce:	8f a9       	ldd	r24, Y+55	; 0x37
    54d0:	98 ad       	ldd	r25, Y+56	; 0x38
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	40 e2       	ldi	r20, 0x20	; 32
    54d8:	51 e4       	ldi	r21, 0x41	; 65
    54da:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	bc 01       	movw	r22, r24
    54e4:	cd 01       	movw	r24, r26
    54e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	98 ab       	std	Y+48, r25	; 0x30
    54f0:	8f a7       	std	Y+47, r24	; 0x2f
    54f2:	0f c0       	rjmp	.+30     	; 0x5512 <LCD_Init+0x1dc>
    54f4:	88 ec       	ldi	r24, 0xC8	; 200
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	9e a7       	std	Y+46, r25	; 0x2e
    54fa:	8d a7       	std	Y+45, r24	; 0x2d
    54fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    54fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    5500:	01 97       	sbiw	r24, 0x01	; 1
    5502:	f1 f7       	brne	.-4      	; 0x5500 <LCD_Init+0x1ca>
    5504:	9e a7       	std	Y+46, r25	; 0x2e
    5506:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5508:	8f a5       	ldd	r24, Y+47	; 0x2f
    550a:	98 a9       	ldd	r25, Y+48	; 0x30
    550c:	01 97       	sbiw	r24, 0x01	; 1
    550e:	98 ab       	std	Y+48, r25	; 0x30
    5510:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5512:	8f a5       	ldd	r24, Y+47	; 0x2f
    5514:	98 a9       	ldd	r25, Y+48	; 0x30
    5516:	00 97       	sbiw	r24, 0x00	; 0
    5518:	69 f7       	brne	.-38     	; 0x54f4 <LCD_Init+0x1be>
    551a:	14 c0       	rjmp	.+40     	; 0x5544 <LCD_Init+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    551c:	69 a9       	ldd	r22, Y+49	; 0x31
    551e:	7a a9       	ldd	r23, Y+50	; 0x32
    5520:	8b a9       	ldd	r24, Y+51	; 0x33
    5522:	9c a9       	ldd	r25, Y+52	; 0x34
    5524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5528:	dc 01       	movw	r26, r24
    552a:	cb 01       	movw	r24, r22
    552c:	98 ab       	std	Y+48, r25	; 0x30
    552e:	8f a7       	std	Y+47, r24	; 0x2f
    5530:	8f a5       	ldd	r24, Y+47	; 0x2f
    5532:	98 a9       	ldd	r25, Y+48	; 0x30
    5534:	9c a7       	std	Y+44, r25	; 0x2c
    5536:	8b a7       	std	Y+43, r24	; 0x2b
    5538:	8b a5       	ldd	r24, Y+43	; 0x2b
    553a:	9c a5       	ldd	r25, Y+44	; 0x2c
    553c:	01 97       	sbiw	r24, 0x01	; 1
    553e:	f1 f7       	brne	.-4      	; 0x553c <LCD_Init+0x206>
    5540:	9c a7       	std	Y+44, r25	; 0x2c
    5542:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_WriteCommand(0x28); //N=1 , F=0
    5544:	88 e2       	ldi	r24, 0x28	; 40
    5546:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	a0 e8       	ldi	r26, 0x80	; 128
    5550:	bf e3       	ldi	r27, 0x3F	; 63
    5552:	8f a3       	std	Y+39, r24	; 0x27
    5554:	98 a7       	std	Y+40, r25	; 0x28
    5556:	a9 a7       	std	Y+41, r26	; 0x29
    5558:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    555a:	6f a1       	ldd	r22, Y+39	; 0x27
    555c:	78 a5       	ldd	r23, Y+40	; 0x28
    555e:	89 a5       	ldd	r24, Y+41	; 0x29
    5560:	9a a5       	ldd	r25, Y+42	; 0x2a
    5562:	20 e0       	ldi	r18, 0x00	; 0
    5564:	30 e0       	ldi	r19, 0x00	; 0
    5566:	4a ef       	ldi	r20, 0xFA	; 250
    5568:	54 e4       	ldi	r21, 0x44	; 68
    556a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    556e:	dc 01       	movw	r26, r24
    5570:	cb 01       	movw	r24, r22
    5572:	8b a3       	std	Y+35, r24	; 0x23
    5574:	9c a3       	std	Y+36, r25	; 0x24
    5576:	ad a3       	std	Y+37, r26	; 0x25
    5578:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    557a:	6b a1       	ldd	r22, Y+35	; 0x23
    557c:	7c a1       	ldd	r23, Y+36	; 0x24
    557e:	8d a1       	ldd	r24, Y+37	; 0x25
    5580:	9e a1       	ldd	r25, Y+38	; 0x26
    5582:	20 e0       	ldi	r18, 0x00	; 0
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e8       	ldi	r20, 0x80	; 128
    5588:	5f e3       	ldi	r21, 0x3F	; 63
    558a:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    558e:	88 23       	and	r24, r24
    5590:	2c f4       	brge	.+10     	; 0x559c <LCD_Init+0x266>
		__ticks = 1;
    5592:	81 e0       	ldi	r24, 0x01	; 1
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	9a a3       	std	Y+34, r25	; 0x22
    5598:	89 a3       	std	Y+33, r24	; 0x21
    559a:	3f c0       	rjmp	.+126    	; 0x561a <LCD_Init+0x2e4>
	else if (__tmp > 65535)
    559c:	6b a1       	ldd	r22, Y+35	; 0x23
    559e:	7c a1       	ldd	r23, Y+36	; 0x24
    55a0:	8d a1       	ldd	r24, Y+37	; 0x25
    55a2:	9e a1       	ldd	r25, Y+38	; 0x26
    55a4:	20 e0       	ldi	r18, 0x00	; 0
    55a6:	3f ef       	ldi	r19, 0xFF	; 255
    55a8:	4f e7       	ldi	r20, 0x7F	; 127
    55aa:	57 e4       	ldi	r21, 0x47	; 71
    55ac:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    55b0:	18 16       	cp	r1, r24
    55b2:	4c f5       	brge	.+82     	; 0x5606 <LCD_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b4:	6f a1       	ldd	r22, Y+39	; 0x27
    55b6:	78 a5       	ldd	r23, Y+40	; 0x28
    55b8:	89 a5       	ldd	r24, Y+41	; 0x29
    55ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    55bc:	20 e0       	ldi	r18, 0x00	; 0
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	40 e2       	ldi	r20, 0x20	; 32
    55c2:	51 e4       	ldi	r21, 0x41	; 65
    55c4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	bc 01       	movw	r22, r24
    55ce:	cd 01       	movw	r24, r26
    55d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	9a a3       	std	Y+34, r25	; 0x22
    55da:	89 a3       	std	Y+33, r24	; 0x21
    55dc:	0f c0       	rjmp	.+30     	; 0x55fc <LCD_Init+0x2c6>
    55de:	88 ec       	ldi	r24, 0xC8	; 200
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	98 a3       	std	Y+32, r25	; 0x20
    55e4:	8f 8f       	std	Y+31, r24	; 0x1f
    55e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55e8:	98 a1       	ldd	r25, Y+32	; 0x20
    55ea:	01 97       	sbiw	r24, 0x01	; 1
    55ec:	f1 f7       	brne	.-4      	; 0x55ea <LCD_Init+0x2b4>
    55ee:	98 a3       	std	Y+32, r25	; 0x20
    55f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f2:	89 a1       	ldd	r24, Y+33	; 0x21
    55f4:	9a a1       	ldd	r25, Y+34	; 0x22
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	9a a3       	std	Y+34, r25	; 0x22
    55fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55fc:	89 a1       	ldd	r24, Y+33	; 0x21
    55fe:	9a a1       	ldd	r25, Y+34	; 0x22
    5600:	00 97       	sbiw	r24, 0x00	; 0
    5602:	69 f7       	brne	.-38     	; 0x55de <LCD_Init+0x2a8>
    5604:	14 c0       	rjmp	.+40     	; 0x562e <LCD_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5606:	6b a1       	ldd	r22, Y+35	; 0x23
    5608:	7c a1       	ldd	r23, Y+36	; 0x24
    560a:	8d a1       	ldd	r24, Y+37	; 0x25
    560c:	9e a1       	ldd	r25, Y+38	; 0x26
    560e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5612:	dc 01       	movw	r26, r24
    5614:	cb 01       	movw	r24, r22
    5616:	9a a3       	std	Y+34, r25	; 0x22
    5618:	89 a3       	std	Y+33, r24	; 0x21
    561a:	89 a1       	ldd	r24, Y+33	; 0x21
    561c:	9a a1       	ldd	r25, Y+34	; 0x22
    561e:	9e 8f       	std	Y+30, r25	; 0x1e
    5620:	8d 8f       	std	Y+29, r24	; 0x1d
    5622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5626:	01 97       	sbiw	r24, 0x01	; 1
    5628:	f1 f7       	brne	.-4      	; 0x5626 <LCD_Init+0x2f0>
    562a:	9e 8f       	std	Y+30, r25	; 0x1e
    562c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);           //delay 1ms a must delay as said in Data sheet
	LCD_WriteCommand(0x0c); //D=1(LCD itself on or off) C=0, B=0
    562e:	8c e0       	ldi	r24, 0x0C	; 12
    5630:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	a0 e8       	ldi	r26, 0x80	; 128
    563a:	bf e3       	ldi	r27, 0x3F	; 63
    563c:	89 8f       	std	Y+25, r24	; 0x19
    563e:	9a 8f       	std	Y+26, r25	; 0x1a
    5640:	ab 8f       	std	Y+27, r26	; 0x1b
    5642:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5644:	69 8d       	ldd	r22, Y+25	; 0x19
    5646:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    564a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    564c:	20 e0       	ldi	r18, 0x00	; 0
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	4a ef       	ldi	r20, 0xFA	; 250
    5652:	54 e4       	ldi	r21, 0x44	; 68
    5654:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	8d 8b       	std	Y+21, r24	; 0x15
    565e:	9e 8b       	std	Y+22, r25	; 0x16
    5660:	af 8b       	std	Y+23, r26	; 0x17
    5662:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5664:	6d 89       	ldd	r22, Y+21	; 0x15
    5666:	7e 89       	ldd	r23, Y+22	; 0x16
    5668:	8f 89       	ldd	r24, Y+23	; 0x17
    566a:	98 8d       	ldd	r25, Y+24	; 0x18
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	40 e8       	ldi	r20, 0x80	; 128
    5672:	5f e3       	ldi	r21, 0x3F	; 63
    5674:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5678:	88 23       	and	r24, r24
    567a:	2c f4       	brge	.+10     	; 0x5686 <LCD_Init+0x350>
		__ticks = 1;
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	9c 8b       	std	Y+20, r25	; 0x14
    5682:	8b 8b       	std	Y+19, r24	; 0x13
    5684:	3f c0       	rjmp	.+126    	; 0x5704 <LCD_Init+0x3ce>
	else if (__tmp > 65535)
    5686:	6d 89       	ldd	r22, Y+21	; 0x15
    5688:	7e 89       	ldd	r23, Y+22	; 0x16
    568a:	8f 89       	ldd	r24, Y+23	; 0x17
    568c:	98 8d       	ldd	r25, Y+24	; 0x18
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	3f ef       	ldi	r19, 0xFF	; 255
    5692:	4f e7       	ldi	r20, 0x7F	; 127
    5694:	57 e4       	ldi	r21, 0x47	; 71
    5696:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    569a:	18 16       	cp	r1, r24
    569c:	4c f5       	brge	.+82     	; 0x56f0 <LCD_Init+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569e:	69 8d       	ldd	r22, Y+25	; 0x19
    56a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	40 e2       	ldi	r20, 0x20	; 32
    56ac:	51 e4       	ldi	r21, 0x41	; 65
    56ae:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    56b2:	dc 01       	movw	r26, r24
    56b4:	cb 01       	movw	r24, r22
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	9c 8b       	std	Y+20, r25	; 0x14
    56c4:	8b 8b       	std	Y+19, r24	; 0x13
    56c6:	0f c0       	rjmp	.+30     	; 0x56e6 <LCD_Init+0x3b0>
    56c8:	88 ec       	ldi	r24, 0xC8	; 200
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	9a 8b       	std	Y+18, r25	; 0x12
    56ce:	89 8b       	std	Y+17, r24	; 0x11
    56d0:	89 89       	ldd	r24, Y+17	; 0x11
    56d2:	9a 89       	ldd	r25, Y+18	; 0x12
    56d4:	01 97       	sbiw	r24, 0x01	; 1
    56d6:	f1 f7       	brne	.-4      	; 0x56d4 <LCD_Init+0x39e>
    56d8:	9a 8b       	std	Y+18, r25	; 0x12
    56da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56dc:	8b 89       	ldd	r24, Y+19	; 0x13
    56de:	9c 89       	ldd	r25, Y+20	; 0x14
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	9c 8b       	std	Y+20, r25	; 0x14
    56e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e6:	8b 89       	ldd	r24, Y+19	; 0x13
    56e8:	9c 89       	ldd	r25, Y+20	; 0x14
    56ea:	00 97       	sbiw	r24, 0x00	; 0
    56ec:	69 f7       	brne	.-38     	; 0x56c8 <LCD_Init+0x392>
    56ee:	14 c0       	rjmp	.+40     	; 0x5718 <LCD_Init+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56f0:	6d 89       	ldd	r22, Y+21	; 0x15
    56f2:	7e 89       	ldd	r23, Y+22	; 0x16
    56f4:	8f 89       	ldd	r24, Y+23	; 0x17
    56f6:	98 8d       	ldd	r25, Y+24	; 0x18
    56f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56fc:	dc 01       	movw	r26, r24
    56fe:	cb 01       	movw	r24, r22
    5700:	9c 8b       	std	Y+20, r25	; 0x14
    5702:	8b 8b       	std	Y+19, r24	; 0x13
    5704:	8b 89       	ldd	r24, Y+19	; 0x13
    5706:	9c 89       	ldd	r25, Y+20	; 0x14
    5708:	98 8b       	std	Y+16, r25	; 0x10
    570a:	8f 87       	std	Y+15, r24	; 0x0f
    570c:	8f 85       	ldd	r24, Y+15	; 0x0f
    570e:	98 89       	ldd	r25, Y+16	; 0x10
    5710:	01 97       	sbiw	r24, 0x01	; 1
    5712:	f1 f7       	brne	.-4      	; 0x5710 <LCD_Init+0x3da>
    5714:	98 8b       	std	Y+16, r25	; 0x10
    5716:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);    //delay 1ms
	LCD_WriteCommand(0x01); //clear LCD
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
    571e:	80 e0       	ldi	r24, 0x00	; 0
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	a0 ea       	ldi	r26, 0xA0	; 160
    5724:	b1 e4       	ldi	r27, 0x41	; 65
    5726:	8b 87       	std	Y+11, r24	; 0x0b
    5728:	9c 87       	std	Y+12, r25	; 0x0c
    572a:	ad 87       	std	Y+13, r26	; 0x0d
    572c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    572e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5730:	7c 85       	ldd	r23, Y+12	; 0x0c
    5732:	8d 85       	ldd	r24, Y+13	; 0x0d
    5734:	9e 85       	ldd	r25, Y+14	; 0x0e
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	4a ef       	ldi	r20, 0xFA	; 250
    573c:	54 e4       	ldi	r21, 0x44	; 68
    573e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	8f 83       	std	Y+7, r24	; 0x07
    5748:	98 87       	std	Y+8, r25	; 0x08
    574a:	a9 87       	std	Y+9, r26	; 0x09
    574c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    574e:	6f 81       	ldd	r22, Y+7	; 0x07
    5750:	78 85       	ldd	r23, Y+8	; 0x08
    5752:	89 85       	ldd	r24, Y+9	; 0x09
    5754:	9a 85       	ldd	r25, Y+10	; 0x0a
    5756:	20 e0       	ldi	r18, 0x00	; 0
    5758:	30 e0       	ldi	r19, 0x00	; 0
    575a:	40 e8       	ldi	r20, 0x80	; 128
    575c:	5f e3       	ldi	r21, 0x3F	; 63
    575e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5762:	88 23       	and	r24, r24
    5764:	2c f4       	brge	.+10     	; 0x5770 <LCD_Init+0x43a>
		__ticks = 1;
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	9e 83       	std	Y+6, r25	; 0x06
    576c:	8d 83       	std	Y+5, r24	; 0x05
    576e:	3f c0       	rjmp	.+126    	; 0x57ee <LCD_Init+0x4b8>
	else if (__tmp > 65535)
    5770:	6f 81       	ldd	r22, Y+7	; 0x07
    5772:	78 85       	ldd	r23, Y+8	; 0x08
    5774:	89 85       	ldd	r24, Y+9	; 0x09
    5776:	9a 85       	ldd	r25, Y+10	; 0x0a
    5778:	20 e0       	ldi	r18, 0x00	; 0
    577a:	3f ef       	ldi	r19, 0xFF	; 255
    577c:	4f e7       	ldi	r20, 0x7F	; 127
    577e:	57 e4       	ldi	r21, 0x47	; 71
    5780:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5784:	18 16       	cp	r1, r24
    5786:	4c f5       	brge	.+82     	; 0x57da <LCD_Init+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5788:	6b 85       	ldd	r22, Y+11	; 0x0b
    578a:	7c 85       	ldd	r23, Y+12	; 0x0c
    578c:	8d 85       	ldd	r24, Y+13	; 0x0d
    578e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5790:	20 e0       	ldi	r18, 0x00	; 0
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	40 e2       	ldi	r20, 0x20	; 32
    5796:	51 e4       	ldi	r21, 0x41	; 65
    5798:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    579c:	dc 01       	movw	r26, r24
    579e:	cb 01       	movw	r24, r22
    57a0:	bc 01       	movw	r22, r24
    57a2:	cd 01       	movw	r24, r26
    57a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57a8:	dc 01       	movw	r26, r24
    57aa:	cb 01       	movw	r24, r22
    57ac:	9e 83       	std	Y+6, r25	; 0x06
    57ae:	8d 83       	std	Y+5, r24	; 0x05
    57b0:	0f c0       	rjmp	.+30     	; 0x57d0 <LCD_Init+0x49a>
    57b2:	88 ec       	ldi	r24, 0xC8	; 200
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	9c 83       	std	Y+4, r25	; 0x04
    57b8:	8b 83       	std	Y+3, r24	; 0x03
    57ba:	8b 81       	ldd	r24, Y+3	; 0x03
    57bc:	9c 81       	ldd	r25, Y+4	; 0x04
    57be:	01 97       	sbiw	r24, 0x01	; 1
    57c0:	f1 f7       	brne	.-4      	; 0x57be <LCD_Init+0x488>
    57c2:	9c 83       	std	Y+4, r25	; 0x04
    57c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ca:	01 97       	sbiw	r24, 0x01	; 1
    57cc:	9e 83       	std	Y+6, r25	; 0x06
    57ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57d0:	8d 81       	ldd	r24, Y+5	; 0x05
    57d2:	9e 81       	ldd	r25, Y+6	; 0x06
    57d4:	00 97       	sbiw	r24, 0x00	; 0
    57d6:	69 f7       	brne	.-38     	; 0x57b2 <LCD_Init+0x47c>
    57d8:	14 c0       	rjmp	.+40     	; 0x5802 <LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57da:	6f 81       	ldd	r22, Y+7	; 0x07
    57dc:	78 85       	ldd	r23, Y+8	; 0x08
    57de:	89 85       	ldd	r24, Y+9	; 0x09
    57e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	9e 83       	std	Y+6, r25	; 0x06
    57ec:	8d 83       	std	Y+5, r24	; 0x05
    57ee:	8d 81       	ldd	r24, Y+5	; 0x05
    57f0:	9e 81       	ldd	r25, Y+6	; 0x06
    57f2:	9a 83       	std	Y+2, r25	; 0x02
    57f4:	89 83       	std	Y+1, r24	; 0x01
    57f6:	89 81       	ldd	r24, Y+1	; 0x01
    57f8:	9a 81       	ldd	r25, Y+2	; 0x02
    57fa:	01 97       	sbiw	r24, 0x01	; 1
    57fc:	f1 f7       	brne	.-4      	; 0x57fa <LCD_Init+0x4c4>
    57fe:	9a 83       	std	Y+2, r25	; 0x02
    5800:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_WriteCommand(0x06);
    5802:	86 e0       	ldi	r24, 0x06	; 6
    5804:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
	LCD_WriteCommand(0x80);
    5808:	80 e8       	ldi	r24, 0x80	; 128
    580a:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
}
    580e:	ca 5b       	subi	r28, 0xBA	; 186
    5810:	df 4f       	sbci	r29, 0xFF	; 255
    5812:	0f b6       	in	r0, 0x3f	; 63
    5814:	f8 94       	cli
    5816:	de bf       	out	0x3e, r29	; 62
    5818:	0f be       	out	0x3f, r0	; 63
    581a:	cd bf       	out	0x3d, r28	; 61
    581c:	cf 91       	pop	r28
    581e:	df 91       	pop	r29
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	08 95       	ret

00005826 <LCD_WriteChar>:
#endif

/*************************** service functions*****************************************************/
void LCD_WriteChar(u8 character)
{
    5826:	df 93       	push	r29
    5828:	cf 93       	push	r28
    582a:	0f 92       	push	r0
    582c:	cd b7       	in	r28, 0x3d	; 61
    582e:	de b7       	in	r29, 0x3e	; 62
    5830:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(character);
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
}
    5838:	0f 90       	pop	r0
    583a:	cf 91       	pop	r28
    583c:	df 91       	pop	r29
    583e:	08 95       	ret

00005840 <LCD_WriteSentence>:



void LCD_WriteSentence(u8 *PtrSentance)
{
    5840:	df 93       	push	r29
    5842:	cf 93       	push	r28
    5844:	00 d0       	rcall	.+0      	; 0x5846 <LCD_WriteSentence+0x6>
    5846:	0f 92       	push	r0
    5848:	cd b7       	in	r28, 0x3d	; 61
    584a:	de b7       	in	r29, 0x3e	; 62
    584c:	9b 83       	std	Y+3, r25	; 0x03
    584e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    5850:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;PtrSentance[i];i++)
    5852:	19 82       	std	Y+1, r1	; 0x01
    5854:	0e c0       	rjmp	.+28     	; 0x5872 <LCD_WriteSentence+0x32>
	{
		LCD_WriteData(PtrSentance[i]);
    5856:	89 81       	ldd	r24, Y+1	; 0x01
    5858:	28 2f       	mov	r18, r24
    585a:	30 e0       	ldi	r19, 0x00	; 0
    585c:	8a 81       	ldd	r24, Y+2	; 0x02
    585e:	9b 81       	ldd	r25, Y+3	; 0x03
    5860:	fc 01       	movw	r30, r24
    5862:	e2 0f       	add	r30, r18
    5864:	f3 1f       	adc	r31, r19
    5866:	80 81       	ld	r24, Z
    5868:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>


void LCD_WriteSentence(u8 *PtrSentance)
{
	u8 i=0;
	for(i=0;PtrSentance[i];i++)
    586c:	89 81       	ldd	r24, Y+1	; 0x01
    586e:	8f 5f       	subi	r24, 0xFF	; 255
    5870:	89 83       	std	Y+1, r24	; 0x01
    5872:	89 81       	ldd	r24, Y+1	; 0x01
    5874:	28 2f       	mov	r18, r24
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	8a 81       	ldd	r24, Y+2	; 0x02
    587a:	9b 81       	ldd	r25, Y+3	; 0x03
    587c:	fc 01       	movw	r30, r24
    587e:	e2 0f       	add	r30, r18
    5880:	f3 1f       	adc	r31, r19
    5882:	80 81       	ld	r24, Z
    5884:	88 23       	and	r24, r24
    5886:	39 f7       	brne	.-50     	; 0x5856 <LCD_WriteSentence+0x16>
		LCD_WriteData(PtrSentance[i]);
	}

	

}
    5888:	0f 90       	pop	r0
    588a:	0f 90       	pop	r0
    588c:	0f 90       	pop	r0
    588e:	cf 91       	pop	r28
    5890:	df 91       	pop	r29
    5892:	08 95       	ret

00005894 <LCD_GoTo>:
void LCD_GoTo(u8 Line, u8 x)
{
    5894:	df 93       	push	r29
    5896:	cf 93       	push	r28
    5898:	00 d0       	rcall	.+0      	; 0x589a <LCD_GoTo+0x6>
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
    589e:	89 83       	std	Y+1, r24	; 0x01
    58a0:	6a 83       	std	Y+2, r22	; 0x02
	if(0 == Line)
    58a2:	89 81       	ldd	r24, Y+1	; 0x01
    58a4:	88 23       	and	r24, r24
    58a6:	41 f4       	brne	.+16     	; 0x58b8 <LCD_GoTo+0x24>
	{
		if ( x <=15)
    58a8:	8a 81       	ldd	r24, Y+2	; 0x02
    58aa:	80 31       	cpi	r24, 0x10	; 16
    58ac:	78 f4       	brcc	.+30     	; 0x58cc <LCD_GoTo+0x38>
		{
			LCD_WriteCommand(0x80 + x);
    58ae:	8a 81       	ldd	r24, Y+2	; 0x02
    58b0:	80 58       	subi	r24, 0x80	; 128
    58b2:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
    58b6:	0a c0       	rjmp	.+20     	; 0x58cc <LCD_GoTo+0x38>
		}
	}
	else if (1 == Line)
    58b8:	89 81       	ldd	r24, Y+1	; 0x01
    58ba:	81 30       	cpi	r24, 0x01	; 1
    58bc:	39 f4       	brne	.+14     	; 0x58cc <LCD_GoTo+0x38>
	{
		if ( x <=15)
    58be:	8a 81       	ldd	r24, Y+2	; 0x02
    58c0:	80 31       	cpi	r24, 0x10	; 16
    58c2:	20 f4       	brcc	.+8      	; 0x58cc <LCD_GoTo+0x38>
		{
			LCD_WriteCommand(0xC0 + x);
    58c4:	8a 81       	ldd	r24, Y+2	; 0x02
    58c6:	80 54       	subi	r24, 0x40	; 64
    58c8:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
		}
	}
}
    58cc:	0f 90       	pop	r0
    58ce:	0f 90       	pop	r0
    58d0:	cf 91       	pop	r28
    58d2:	df 91       	pop	r29
    58d4:	08 95       	ret

000058d6 <LCD_WriteNumber>:



void LCD_WriteNumber(u64 Number)
{
    58d6:	8f 92       	push	r8
    58d8:	9f 92       	push	r9
    58da:	af 92       	push	r10
    58dc:	bf 92       	push	r11
    58de:	cf 92       	push	r12
    58e0:	df 92       	push	r13
    58e2:	ef 92       	push	r14
    58e4:	ff 92       	push	r15
    58e6:	0f 93       	push	r16
    58e8:	1f 93       	push	r17
    58ea:	df 93       	push	r29
    58ec:	cf 93       	push	r28
    58ee:	cd b7       	in	r28, 0x3d	; 61
    58f0:	de b7       	in	r29, 0x3e	; 62
    58f2:	64 97       	sbiw	r28, 0x14	; 20
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	f8 94       	cli
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	0f be       	out	0x3f, r0	; 63
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	2d 87       	std	Y+13, r18	; 0x0d
    5900:	3e 87       	std	Y+14, r19	; 0x0e
    5902:	4f 87       	std	Y+15, r20	; 0x0f
    5904:	58 8b       	std	Y+16, r21	; 0x10
    5906:	69 8b       	std	Y+17, r22	; 0x11
    5908:	7a 8b       	std	Y+18, r23	; 0x12
    590a:	8b 8b       	std	Y+19, r24	; 0x13
    590c:	9c 8b       	std	Y+20, r25	; 0x14
	u8 i=0,arr[10],j;
    590e:	1a 82       	std	Y+2, r1	; 0x02
	if(Number==0)
    5910:	8d 85       	ldd	r24, Y+13	; 0x0d
    5912:	9e 85       	ldd	r25, Y+14	; 0x0e
    5914:	89 2b       	or	r24, r25
    5916:	9f 85       	ldd	r25, Y+15	; 0x0f
    5918:	89 2b       	or	r24, r25
    591a:	98 89       	ldd	r25, Y+16	; 0x10
    591c:	89 2b       	or	r24, r25
    591e:	99 89       	ldd	r25, Y+17	; 0x11
    5920:	89 2b       	or	r24, r25
    5922:	9a 89       	ldd	r25, Y+18	; 0x12
    5924:	89 2b       	or	r24, r25
    5926:	9b 89       	ldd	r25, Y+19	; 0x13
    5928:	89 2b       	or	r24, r25
    592a:	9c 89       	ldd	r25, Y+20	; 0x14
    592c:	89 2b       	or	r24, r25
    592e:	88 23       	and	r24, r24
    5930:	09 f0       	breq	.+2      	; 0x5934 <LCD_WriteNumber+0x5e>
    5932:	6d c0       	rjmp	.+218    	; 0x5a0e <LCD_WriteNumber+0x138>
	LCD_WriteData('0');
    5934:	80 e3       	ldi	r24, 0x30	; 48
    5936:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
    593a:	92 c0       	rjmp	.+292    	; 0x5a60 <LCD_WriteNumber+0x18a>
	else{
			while(Number)
			{
				arr[i]=Number%10+'0';
    593c:	8a 81       	ldd	r24, Y+2	; 0x02
    593e:	88 2e       	mov	r8, r24
    5940:	99 24       	eor	r9, r9
    5942:	ad 84       	ldd	r10, Y+13	; 0x0d
    5944:	be 84       	ldd	r11, Y+14	; 0x0e
    5946:	cf 84       	ldd	r12, Y+15	; 0x0f
    5948:	d8 88       	ldd	r13, Y+16	; 0x10
    594a:	e9 88       	ldd	r14, Y+17	; 0x11
    594c:	fa 88       	ldd	r15, Y+18	; 0x12
    594e:	0b 89       	ldd	r16, Y+19	; 0x13
    5950:	1c 89       	ldd	r17, Y+20	; 0x14
    5952:	2a 2d       	mov	r18, r10
    5954:	3b 2d       	mov	r19, r11
    5956:	4c 2d       	mov	r20, r12
    5958:	5d 2d       	mov	r21, r13
    595a:	6e 2d       	mov	r22, r14
    595c:	7f 2d       	mov	r23, r15
    595e:	80 2f       	mov	r24, r16
    5960:	91 2f       	mov	r25, r17
    5962:	0f 2e       	mov	r0, r31
    5964:	fa e0       	ldi	r31, 0x0A	; 10
    5966:	af 2e       	mov	r10, r31
    5968:	f0 2d       	mov	r31, r0
    596a:	bb 24       	eor	r11, r11
    596c:	cc 24       	eor	r12, r12
    596e:	dd 24       	eor	r13, r13
    5970:	ee 24       	eor	r14, r14
    5972:	ff 24       	eor	r15, r15
    5974:	00 e0       	ldi	r16, 0x00	; 0
    5976:	10 e0       	ldi	r17, 0x00	; 0
    5978:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__umoddi3>
    597c:	a2 2e       	mov	r10, r18
    597e:	b3 2e       	mov	r11, r19
    5980:	c4 2e       	mov	r12, r20
    5982:	d5 2e       	mov	r13, r21
    5984:	e6 2e       	mov	r14, r22
    5986:	f7 2e       	mov	r15, r23
    5988:	08 2f       	mov	r16, r24
    598a:	19 2f       	mov	r17, r25
    598c:	2a 2d       	mov	r18, r10
    598e:	3b 2d       	mov	r19, r11
    5990:	4c 2d       	mov	r20, r12
    5992:	5d 2d       	mov	r21, r13
    5994:	6e 2d       	mov	r22, r14
    5996:	7f 2d       	mov	r23, r15
    5998:	80 2f       	mov	r24, r16
    599a:	91 2f       	mov	r25, r17
    599c:	82 2f       	mov	r24, r18
    599e:	28 2f       	mov	r18, r24
    59a0:	20 5d       	subi	r18, 0xD0	; 208
    59a2:	ce 01       	movw	r24, r28
    59a4:	03 96       	adiw	r24, 0x03	; 3
    59a6:	fc 01       	movw	r30, r24
    59a8:	e8 0d       	add	r30, r8
    59aa:	f9 1d       	adc	r31, r9
    59ac:	20 83       	st	Z, r18
				Number/=10;
    59ae:	ad 84       	ldd	r10, Y+13	; 0x0d
    59b0:	be 84       	ldd	r11, Y+14	; 0x0e
    59b2:	cf 84       	ldd	r12, Y+15	; 0x0f
    59b4:	d8 88       	ldd	r13, Y+16	; 0x10
    59b6:	e9 88       	ldd	r14, Y+17	; 0x11
    59b8:	fa 88       	ldd	r15, Y+18	; 0x12
    59ba:	0b 89       	ldd	r16, Y+19	; 0x13
    59bc:	1c 89       	ldd	r17, Y+20	; 0x14
    59be:	2a 2d       	mov	r18, r10
    59c0:	3b 2d       	mov	r19, r11
    59c2:	4c 2d       	mov	r20, r12
    59c4:	5d 2d       	mov	r21, r13
    59c6:	6e 2d       	mov	r22, r14
    59c8:	7f 2d       	mov	r23, r15
    59ca:	80 2f       	mov	r24, r16
    59cc:	91 2f       	mov	r25, r17
    59ce:	0f 2e       	mov	r0, r31
    59d0:	fa e0       	ldi	r31, 0x0A	; 10
    59d2:	af 2e       	mov	r10, r31
    59d4:	f0 2d       	mov	r31, r0
    59d6:	bb 24       	eor	r11, r11
    59d8:	cc 24       	eor	r12, r12
    59da:	dd 24       	eor	r13, r13
    59dc:	ee 24       	eor	r14, r14
    59de:	ff 24       	eor	r15, r15
    59e0:	00 e0       	ldi	r16, 0x00	; 0
    59e2:	10 e0       	ldi	r17, 0x00	; 0
    59e4:	0e 94 75 00 	call	0xea	; 0xea <__udivdi3>
    59e8:	a2 2e       	mov	r10, r18
    59ea:	b3 2e       	mov	r11, r19
    59ec:	c4 2e       	mov	r12, r20
    59ee:	d5 2e       	mov	r13, r21
    59f0:	e6 2e       	mov	r14, r22
    59f2:	f7 2e       	mov	r15, r23
    59f4:	08 2f       	mov	r16, r24
    59f6:	19 2f       	mov	r17, r25
    59f8:	ad 86       	std	Y+13, r10	; 0x0d
    59fa:	be 86       	std	Y+14, r11	; 0x0e
    59fc:	cf 86       	std	Y+15, r12	; 0x0f
    59fe:	d8 8a       	std	Y+16, r13	; 0x10
    5a00:	e9 8a       	std	Y+17, r14	; 0x11
    5a02:	fa 8a       	std	Y+18, r15	; 0x12
    5a04:	0b 8b       	std	Y+19, r16	; 0x13
    5a06:	1c 8b       	std	Y+20, r17	; 0x14
				i++;
    5a08:	8a 81       	ldd	r24, Y+2	; 0x02
    5a0a:	8f 5f       	subi	r24, 0xFF	; 255
    5a0c:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i=0,arr[10],j;
	if(Number==0)
	LCD_WriteData('0');
	else{
			while(Number)
    5a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a12:	89 2b       	or	r24, r25
    5a14:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a16:	89 2b       	or	r24, r25
    5a18:	98 89       	ldd	r25, Y+16	; 0x10
    5a1a:	89 2b       	or	r24, r25
    5a1c:	99 89       	ldd	r25, Y+17	; 0x11
    5a1e:	89 2b       	or	r24, r25
    5a20:	9a 89       	ldd	r25, Y+18	; 0x12
    5a22:	89 2b       	or	r24, r25
    5a24:	9b 89       	ldd	r25, Y+19	; 0x13
    5a26:	89 2b       	or	r24, r25
    5a28:	9c 89       	ldd	r25, Y+20	; 0x14
    5a2a:	89 2b       	or	r24, r25
    5a2c:	88 23       	and	r24, r24
    5a2e:	09 f0       	breq	.+2      	; 0x5a32 <LCD_WriteNumber+0x15c>
    5a30:	85 cf       	rjmp	.-246    	; 0x593c <LCD_WriteNumber+0x66>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    5a32:	8a 81       	ldd	r24, Y+2	; 0x02
    5a34:	89 83       	std	Y+1, r24	; 0x01
    5a36:	11 c0       	rjmp	.+34     	; 0x5a5a <LCD_WriteNumber+0x184>
			{
				LCD_WriteData(arr[j-1]);
    5a38:	89 81       	ldd	r24, Y+1	; 0x01
    5a3a:	88 2f       	mov	r24, r24
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    5a3e:	9c 01       	movw	r18, r24
    5a40:	21 50       	subi	r18, 0x01	; 1
    5a42:	30 40       	sbci	r19, 0x00	; 0
    5a44:	ce 01       	movw	r24, r28
    5a46:	03 96       	adiw	r24, 0x03	; 3
    5a48:	fc 01       	movw	r30, r24
    5a4a:	e2 0f       	add	r30, r18
    5a4c:	f3 1f       	adc	r31, r19
    5a4e:	80 81       	ld	r24, Z
    5a50:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
			{
				arr[i]=Number%10+'0';
				Number/=10;
				i++;
			}
			for(j=i;j>0;j--)
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	81 50       	subi	r24, 0x01	; 1
    5a58:	89 83       	std	Y+1, r24	; 0x01
    5a5a:	89 81       	ldd	r24, Y+1	; 0x01
    5a5c:	88 23       	and	r24, r24
    5a5e:	61 f7       	brne	.-40     	; 0x5a38 <LCD_WriteNumber+0x162>
			{
				LCD_WriteData(arr[j-1]);
			}
	   }
}
    5a60:	64 96       	adiw	r28, 0x14	; 20
    5a62:	0f b6       	in	r0, 0x3f	; 63
    5a64:	f8 94       	cli
    5a66:	de bf       	out	0x3e, r29	; 62
    5a68:	0f be       	out	0x3f, r0	; 63
    5a6a:	cd bf       	out	0x3d, r28	; 61
    5a6c:	cf 91       	pop	r28
    5a6e:	df 91       	pop	r29
    5a70:	1f 91       	pop	r17
    5a72:	0f 91       	pop	r16
    5a74:	ff 90       	pop	r15
    5a76:	ef 90       	pop	r14
    5a78:	df 90       	pop	r13
    5a7a:	cf 90       	pop	r12
    5a7c:	bf 90       	pop	r11
    5a7e:	af 90       	pop	r10
    5a80:	9f 90       	pop	r9
    5a82:	8f 90       	pop	r8
    5a84:	08 95       	ret

00005a86 <LCD_WriteNumber2>:
void LCD_WriteNumber2(u16 Number)
{
    5a86:	df 93       	push	r29
    5a88:	cf 93       	push	r28
    5a8a:	00 d0       	rcall	.+0      	; 0x5a8c <LCD_WriteNumber2+0x6>
    5a8c:	cd b7       	in	r28, 0x3d	; 61
    5a8e:	de b7       	in	r29, 0x3e	; 62
    5a90:	9a 83       	std	Y+2, r25	; 0x02
    5a92:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteData(Number%10000/1000+'0');
    5a94:	89 81       	ldd	r24, Y+1	; 0x01
    5a96:	9a 81       	ldd	r25, Y+2	; 0x02
    5a98:	20 e1       	ldi	r18, 0x10	; 16
    5a9a:	37 e2       	ldi	r19, 0x27	; 39
    5a9c:	b9 01       	movw	r22, r18
    5a9e:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5aa2:	28 ee       	ldi	r18, 0xE8	; 232
    5aa4:	33 e0       	ldi	r19, 0x03	; 3
    5aa6:	b9 01       	movw	r22, r18
    5aa8:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5aac:	cb 01       	movw	r24, r22
    5aae:	80 5d       	subi	r24, 0xD0	; 208
    5ab0:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
	LCD_WriteData(Number%1000/100+'0');
    5ab4:	89 81       	ldd	r24, Y+1	; 0x01
    5ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ab8:	28 ee       	ldi	r18, 0xE8	; 232
    5aba:	33 e0       	ldi	r19, 0x03	; 3
    5abc:	b9 01       	movw	r22, r18
    5abe:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5ac2:	24 e6       	ldi	r18, 0x64	; 100
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	b9 01       	movw	r22, r18
    5ac8:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5acc:	cb 01       	movw	r24, r22
    5ace:	80 5d       	subi	r24, 0xD0	; 208
    5ad0:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
	LCD_WriteData(Number%100/10+'0');
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad8:	24 e6       	ldi	r18, 0x64	; 100
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	b9 01       	movw	r22, r18
    5ade:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5ae2:	2a e0       	ldi	r18, 0x0A	; 10
    5ae4:	30 e0       	ldi	r19, 0x00	; 0
    5ae6:	b9 01       	movw	r22, r18
    5ae8:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5aec:	cb 01       	movw	r24, r22
    5aee:	80 5d       	subi	r24, 0xD0	; 208
    5af0:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
	LCD_WriteData(Number%10/1+'0');
    5af4:	89 81       	ldd	r24, Y+1	; 0x01
    5af6:	9a 81       	ldd	r25, Y+2	; 0x02
    5af8:	2a e0       	ldi	r18, 0x0A	; 10
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	b9 01       	movw	r22, r18
    5afe:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5b02:	80 5d       	subi	r24, 0xD0	; 208
    5b04:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
}
    5b08:	0f 90       	pop	r0
    5b0a:	0f 90       	pop	r0
    5b0c:	cf 91       	pop	r28
    5b0e:	df 91       	pop	r29
    5b10:	08 95       	ret

00005b12 <Create_Character>:

void Create_Character(u8 *Pattern,u8 Location) {
    5b12:	df 93       	push	r29
    5b14:	cf 93       	push	r28
    5b16:	00 d0       	rcall	.+0      	; 0x5b18 <Create_Character+0x6>
    5b18:	00 d0       	rcall	.+0      	; 0x5b1a <Create_Character+0x8>
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	9b 83       	std	Y+3, r25	; 0x03
    5b20:	8a 83       	std	Y+2, r24	; 0x02
    5b22:	6c 83       	std	Y+4, r22	; 0x04

	u8 iLoop=0;
    5b24:	19 82       	std	Y+1, r1	; 0x01

	LCD_WriteCommand(0x40+(Location*8)); //Send the Address of CGRAM
    5b26:	8c 81       	ldd	r24, Y+4	; 0x04
    5b28:	88 2f       	mov	r24, r24
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	08 96       	adiw	r24, 0x08	; 8
    5b2e:	88 0f       	add	r24, r24
    5b30:	99 1f       	adc	r25, r25
    5b32:	88 0f       	add	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	88 0f       	add	r24, r24
    5b38:	99 1f       	adc	r25, r25
    5b3a:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>
	for(iLoop=0;iLoop<8;iLoop++)
    5b3e:	19 82       	std	Y+1, r1	; 0x01
    5b40:	0e c0       	rjmp	.+28     	; 0x5b5e <Create_Character+0x4c>
	LCD_WriteData(Pattern[iLoop]); //Pass the bytes of pattern on LCD
    5b42:	89 81       	ldd	r24, Y+1	; 0x01
    5b44:	28 2f       	mov	r18, r24
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5b4c:	fc 01       	movw	r30, r24
    5b4e:	e2 0f       	add	r30, r18
    5b50:	f3 1f       	adc	r31, r19
    5b52:	80 81       	ld	r24, Z
    5b54:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <LCD_WriteData>
void Create_Character(u8 *Pattern,u8 Location) {

	u8 iLoop=0;

	LCD_WriteCommand(0x40+(Location*8)); //Send the Address of CGRAM
	for(iLoop=0;iLoop<8;iLoop++)
    5b58:	89 81       	ldd	r24, Y+1	; 0x01
    5b5a:	8f 5f       	subi	r24, 0xFF	; 255
    5b5c:	89 83       	std	Y+1, r24	; 0x01
    5b5e:	89 81       	ldd	r24, Y+1	; 0x01
    5b60:	88 30       	cpi	r24, 0x08	; 8
    5b62:	78 f3       	brcs	.-34     	; 0x5b42 <Create_Character+0x30>
	LCD_WriteData(Pattern[iLoop]); //Pass the bytes of pattern on LCD

}
    5b64:	0f 90       	pop	r0
    5b66:	0f 90       	pop	r0
    5b68:	0f 90       	pop	r0
    5b6a:	0f 90       	pop	r0
    5b6c:	cf 91       	pop	r28
    5b6e:	df 91       	pop	r29
    5b70:	08 95       	ret

00005b72 <LCD_Clear>:
void LCD_Clear(void)
{
    5b72:	df 93       	push	r29
    5b74:	cf 93       	push	r28
    5b76:	cd b7       	in	r28, 0x3d	; 61
    5b78:	de b7       	in	r29, 0x3e	; 62

	LCD_WriteCommand(0x01);
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LCD_WriteCommand>

}
    5b80:	cf 91       	pop	r28
    5b82:	df 91       	pop	r29
    5b84:	08 95       	ret

00005b86 <SERVO_Init>:

#include "Servo.h"
#include "../Mem_Map32.h"

void SERVO_Init(void)
{
    5b86:	df 93       	push	r29
    5b88:	cf 93       	push	r28
    5b8a:	cd b7       	in	r28, 0x3d	; 61
    5b8c:	de b7       	in	r29, 0x3e	; 62
	/*set timer 1 prescaler to 8to get 1us tick time
	use fast mode with top value at OCRA reg to set the freq of servo
	diconnect OC1A PIN ,and generate the PWM on OC1B PIN with nin inverting mode to use OCR1B reg as the ton value*/

	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_NON_INVERTING);
    5b8e:	82 e0       	ldi	r24, 0x02	; 2
    5b90:	62 e0       	ldi	r22, 0x02	; 2
    5b92:	40 e0       	ldi	r20, 0x00	; 0
    5b94:	22 e0       	ldi	r18, 0x02	; 2
    5b96:	0e 94 76 20 	call	0x40ec	; 0x40ec <Timer1_Init>
	OCR1A=19999;//20000us to get 50hz 
    5b9a:	ea e4       	ldi	r30, 0x4A	; 74
    5b9c:	f0 e0       	ldi	r31, 0x00	; 0
    5b9e:	8f e1       	ldi	r24, 0x1F	; 31
    5ba0:	9e e4       	ldi	r25, 0x4E	; 78
    5ba2:	91 83       	std	Z+1, r25	; 0x01
    5ba4:	80 83       	st	Z, r24
	OCR1B=999;// 2000us ton to get angle zero
    5ba6:	e8 e4       	ldi	r30, 0x48	; 72
    5ba8:	f0 e0       	ldi	r31, 0x00	; 0
    5baa:	87 ee       	ldi	r24, 0xE7	; 231
    5bac:	93 e0       	ldi	r25, 0x03	; 3
    5bae:	91 83       	std	Z+1, r25	; 0x01
    5bb0:	80 83       	st	Z, r24
}
    5bb2:	cf 91       	pop	r28
    5bb4:	df 91       	pop	r29
    5bb6:	08 95       	ret

00005bb8 <SERVO_SetAngle>:

void SERVO_SetAngle(u8 angle)
{
    5bb8:	0f 93       	push	r16
    5bba:	1f 93       	push	r17
    5bbc:	df 93       	push	r29
    5bbe:	cf 93       	push	r28
    5bc0:	0f 92       	push	r0
    5bc2:	cd b7       	in	r28, 0x3d	; 61
    5bc4:	de b7       	in	r29, 0x3e	; 62
    5bc6:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=(((u32)angle*1000)/180)+999;
    5bc8:	08 e4       	ldi	r16, 0x48	; 72
    5bca:	10 e0       	ldi	r17, 0x00	; 0
    5bcc:	89 81       	ldd	r24, Y+1	; 0x01
    5bce:	88 2f       	mov	r24, r24
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	a0 e0       	ldi	r26, 0x00	; 0
    5bd4:	b0 e0       	ldi	r27, 0x00	; 0
    5bd6:	28 ee       	ldi	r18, 0xE8	; 232
    5bd8:	33 e0       	ldi	r19, 0x03	; 3
    5bda:	40 e0       	ldi	r20, 0x00	; 0
    5bdc:	50 e0       	ldi	r21, 0x00	; 0
    5bde:	bc 01       	movw	r22, r24
    5be0:	cd 01       	movw	r24, r26
    5be2:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    5be6:	dc 01       	movw	r26, r24
    5be8:	cb 01       	movw	r24, r22
    5bea:	24 eb       	ldi	r18, 0xB4	; 180
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	40 e0       	ldi	r20, 0x00	; 0
    5bf0:	50 e0       	ldi	r21, 0x00	; 0
    5bf2:	bc 01       	movw	r22, r24
    5bf4:	cd 01       	movw	r24, r26
    5bf6:	0e 94 b2 32 	call	0x6564	; 0x6564 <__udivmodsi4>
    5bfa:	da 01       	movw	r26, r20
    5bfc:	c9 01       	movw	r24, r18
    5bfe:	89 51       	subi	r24, 0x19	; 25
    5c00:	9c 4f       	sbci	r25, 0xFC	; 252
    5c02:	f8 01       	movw	r30, r16
    5c04:	91 83       	std	Z+1, r25	; 0x01
    5c06:	80 83       	st	Z, r24
}
    5c08:	0f 90       	pop	r0
    5c0a:	cf 91       	pop	r28
    5c0c:	df 91       	pop	r29
    5c0e:	1f 91       	pop	r17
    5c10:	0f 91       	pop	r16
    5c12:	08 95       	ret

00005c14 <ULTRASONIC_Init>:


static volatile u16 t1,t2,flag=0,c=0;

void ULTRASONIC_Init(void)
{
    5c14:	df 93       	push	r29
    5c16:	cf 93       	push	r28
    5c18:	cd b7       	in	r28, 0x3d	; 61
    5c1a:	de b7       	in	r29, 0x3e	; 62
	/****you can use timer in another mode except modes using ICR as top put take care dont reset timer****/
	Timer1_Init(TIMER1_NORMAL_MODE,TIMER1_SCALER_8,OCRA_DISCONNECTED,OCRB_DISCONNECTED);
    5c1c:	80 e0       	ldi	r24, 0x00	; 0
    5c1e:	62 e0       	ldi	r22, 0x02	; 2
    5c20:	40 e0       	ldi	r20, 0x00	; 0
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	0e 94 76 20 	call	0x40ec	; 0x40ec <Timer1_Init>
	Timer1_OVF_SetCallBack(Func_OVF);
    5c28:	83 eb       	ldi	r24, 0xB3	; 179
    5c2a:	91 e3       	ldi	r25, 0x31	; 49
    5c2c:	0e 94 96 22 	call	0x452c	; 0x452c <Timer1_OVF_SetCallBack>
	Timer1_ICU_SetCallBack(Func_ICU);
    5c30:	84 e7       	ldi	r24, 0x74	; 116
    5c32:	91 e3       	ldi	r25, 0x31	; 49
    5c34:	0e 94 cc 22 	call	0x4598	; 0x4598 <Timer1_ICU_SetCallBack>
	
}
    5c38:	cf 91       	pop	r28
    5c3a:	df 91       	pop	r29
    5c3c:	08 95       	ret

00005c3e <ULTRASONIC_GetDistance>:

u8 ULTRASONIC_GetDistance(ULTRASONIC_type ultrasonic_pin)
{
    5c3e:	0f 93       	push	r16
    5c40:	1f 93       	push	r17
    5c42:	df 93       	push	r29
    5c44:	cf 93       	push	r28
    5c46:	cd b7       	in	r28, 0x3d	; 61
    5c48:	de b7       	in	r29, 0x3e	; 62
    5c4a:	6c 97       	sbiw	r28, 0x1c	; 28
    5c4c:	0f b6       	in	r0, 0x3f	; 63
    5c4e:	f8 94       	cli
    5c50:	de bf       	out	0x3e, r29	; 62
    5c52:	0f be       	out	0x3f, r0	; 63
    5c54:	cd bf       	out	0x3d, r28	; 61
    5c56:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 distance;
	u16 time;
	//TCNT1=0;
	c=0;
    5c58:	10 92 02 02 	sts	0x0202, r1
    5c5c:	10 92 01 02 	sts	0x0201, r1
	flag=0;
    5c60:	10 92 00 02 	sts	0x0200, r1
    5c64:	10 92 ff 01 	sts	0x01FF, r1
	DIO_WritePin(ultrasonic_pin,HIGH);
    5c68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5c6a:	61 e0       	ldi	r22, 0x01	; 1
    5c6c:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    5c70:	80 e0       	ldi	r24, 0x00	; 0
    5c72:	90 e0       	ldi	r25, 0x00	; 0
    5c74:	a0 e2       	ldi	r26, 0x20	; 32
    5c76:	b1 e4       	ldi	r27, 0x41	; 65
    5c78:	8d 8b       	std	Y+21, r24	; 0x15
    5c7a:	9e 8b       	std	Y+22, r25	; 0x16
    5c7c:	af 8b       	std	Y+23, r26	; 0x17
    5c7e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5c80:	6d 89       	ldd	r22, Y+21	; 0x15
    5c82:	7e 89       	ldd	r23, Y+22	; 0x16
    5c84:	8f 89       	ldd	r24, Y+23	; 0x17
    5c86:	98 8d       	ldd	r25, Y+24	; 0x18
    5c88:	2b ea       	ldi	r18, 0xAB	; 171
    5c8a:	3a ea       	ldi	r19, 0xAA	; 170
    5c8c:	4a e2       	ldi	r20, 0x2A	; 42
    5c8e:	50 e4       	ldi	r21, 0x40	; 64
    5c90:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5c94:	dc 01       	movw	r26, r24
    5c96:	cb 01       	movw	r24, r22
    5c98:	89 8b       	std	Y+17, r24	; 0x11
    5c9a:	9a 8b       	std	Y+18, r25	; 0x12
    5c9c:	ab 8b       	std	Y+19, r26	; 0x13
    5c9e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5ca0:	69 89       	ldd	r22, Y+17	; 0x11
    5ca2:	7a 89       	ldd	r23, Y+18	; 0x12
    5ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	30 e0       	ldi	r19, 0x00	; 0
    5cac:	40 e8       	ldi	r20, 0x80	; 128
    5cae:	5f e3       	ldi	r21, 0x3F	; 63
    5cb0:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5cb4:	88 23       	and	r24, r24
    5cb6:	1c f4       	brge	.+6      	; 0x5cbe <ULTRASONIC_GetDistance+0x80>
		__ticks = 1;
    5cb8:	81 e0       	ldi	r24, 0x01	; 1
    5cba:	88 8b       	std	Y+16, r24	; 0x10
    5cbc:	91 c0       	rjmp	.+290    	; 0x5de0 <ULTRASONIC_GetDistance+0x1a2>
	else if (__tmp > 255)
    5cbe:	69 89       	ldd	r22, Y+17	; 0x11
    5cc0:	7a 89       	ldd	r23, Y+18	; 0x12
    5cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    5cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	4f e7       	ldi	r20, 0x7F	; 127
    5ccc:	53 e4       	ldi	r21, 0x43	; 67
    5cce:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5cd2:	18 16       	cp	r1, r24
    5cd4:	0c f0       	brlt	.+2      	; 0x5cd8 <ULTRASONIC_GetDistance+0x9a>
    5cd6:	7b c0       	rjmp	.+246    	; 0x5dce <ULTRASONIC_GetDistance+0x190>
	{
		_delay_ms(__us / 1000.0);
    5cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    5cda:	7e 89       	ldd	r23, Y+22	; 0x16
    5cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    5cde:	98 8d       	ldd	r25, Y+24	; 0x18
    5ce0:	20 e0       	ldi	r18, 0x00	; 0
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	4a e7       	ldi	r20, 0x7A	; 122
    5ce6:	54 e4       	ldi	r21, 0x44	; 68
    5ce8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    5cec:	dc 01       	movw	r26, r24
    5cee:	cb 01       	movw	r24, r22
    5cf0:	8c 87       	std	Y+12, r24	; 0x0c
    5cf2:	9d 87       	std	Y+13, r25	; 0x0d
    5cf4:	ae 87       	std	Y+14, r26	; 0x0e
    5cf6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cf8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5cfa:	7d 85       	ldd	r23, Y+13	; 0x0d
    5cfc:	8e 85       	ldd	r24, Y+14	; 0x0e
    5cfe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d00:	20 e0       	ldi	r18, 0x00	; 0
    5d02:	30 e0       	ldi	r19, 0x00	; 0
    5d04:	4a ef       	ldi	r20, 0xFA	; 250
    5d06:	54 e4       	ldi	r21, 0x44	; 68
    5d08:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	88 87       	std	Y+8, r24	; 0x08
    5d12:	99 87       	std	Y+9, r25	; 0x09
    5d14:	aa 87       	std	Y+10, r26	; 0x0a
    5d16:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5d18:	68 85       	ldd	r22, Y+8	; 0x08
    5d1a:	79 85       	ldd	r23, Y+9	; 0x09
    5d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d20:	20 e0       	ldi	r18, 0x00	; 0
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	40 e8       	ldi	r20, 0x80	; 128
    5d26:	5f e3       	ldi	r21, 0x3F	; 63
    5d28:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5d2c:	88 23       	and	r24, r24
    5d2e:	2c f4       	brge	.+10     	; 0x5d3a <ULTRASONIC_GetDistance+0xfc>
		__ticks = 1;
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	9f 83       	std	Y+7, r25	; 0x07
    5d36:	8e 83       	std	Y+6, r24	; 0x06
    5d38:	3f c0       	rjmp	.+126    	; 0x5db8 <ULTRASONIC_GetDistance+0x17a>
	else if (__tmp > 65535)
    5d3a:	68 85       	ldd	r22, Y+8	; 0x08
    5d3c:	79 85       	ldd	r23, Y+9	; 0x09
    5d3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d40:	9b 85       	ldd	r25, Y+11	; 0x0b
    5d42:	20 e0       	ldi	r18, 0x00	; 0
    5d44:	3f ef       	ldi	r19, 0xFF	; 255
    5d46:	4f e7       	ldi	r20, 0x7F	; 127
    5d48:	57 e4       	ldi	r21, 0x47	; 71
    5d4a:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5d4e:	18 16       	cp	r1, r24
    5d50:	4c f5       	brge	.+82     	; 0x5da4 <ULTRASONIC_GetDistance+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d52:	6c 85       	ldd	r22, Y+12	; 0x0c
    5d54:	7d 85       	ldd	r23, Y+13	; 0x0d
    5d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d58:	9f 85       	ldd	r25, Y+15	; 0x0f
    5d5a:	20 e0       	ldi	r18, 0x00	; 0
    5d5c:	30 e0       	ldi	r19, 0x00	; 0
    5d5e:	40 e2       	ldi	r20, 0x20	; 32
    5d60:	51 e4       	ldi	r21, 0x41	; 65
    5d62:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5d66:	dc 01       	movw	r26, r24
    5d68:	cb 01       	movw	r24, r22
    5d6a:	bc 01       	movw	r22, r24
    5d6c:	cd 01       	movw	r24, r26
    5d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d72:	dc 01       	movw	r26, r24
    5d74:	cb 01       	movw	r24, r22
    5d76:	9f 83       	std	Y+7, r25	; 0x07
    5d78:	8e 83       	std	Y+6, r24	; 0x06
    5d7a:	0f c0       	rjmp	.+30     	; 0x5d9a <ULTRASONIC_GetDistance+0x15c>
    5d7c:	88 ec       	ldi	r24, 0xC8	; 200
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	9d 83       	std	Y+5, r25	; 0x05
    5d82:	8c 83       	std	Y+4, r24	; 0x04
    5d84:	8c 81       	ldd	r24, Y+4	; 0x04
    5d86:	9d 81       	ldd	r25, Y+5	; 0x05
    5d88:	01 97       	sbiw	r24, 0x01	; 1
    5d8a:	f1 f7       	brne	.-4      	; 0x5d88 <ULTRASONIC_GetDistance+0x14a>
    5d8c:	9d 83       	std	Y+5, r25	; 0x05
    5d8e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d90:	8e 81       	ldd	r24, Y+6	; 0x06
    5d92:	9f 81       	ldd	r25, Y+7	; 0x07
    5d94:	01 97       	sbiw	r24, 0x01	; 1
    5d96:	9f 83       	std	Y+7, r25	; 0x07
    5d98:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    5d9e:	00 97       	sbiw	r24, 0x00	; 0
    5da0:	69 f7       	brne	.-38     	; 0x5d7c <ULTRASONIC_GetDistance+0x13e>
    5da2:	24 c0       	rjmp	.+72     	; 0x5dec <ULTRASONIC_GetDistance+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5da4:	68 85       	ldd	r22, Y+8	; 0x08
    5da6:	79 85       	ldd	r23, Y+9	; 0x09
    5da8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5daa:	9b 85       	ldd	r25, Y+11	; 0x0b
    5dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5db0:	dc 01       	movw	r26, r24
    5db2:	cb 01       	movw	r24, r22
    5db4:	9f 83       	std	Y+7, r25	; 0x07
    5db6:	8e 83       	std	Y+6, r24	; 0x06
    5db8:	8e 81       	ldd	r24, Y+6	; 0x06
    5dba:	9f 81       	ldd	r25, Y+7	; 0x07
    5dbc:	9b 83       	std	Y+3, r25	; 0x03
    5dbe:	8a 83       	std	Y+2, r24	; 0x02
    5dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    5dc4:	01 97       	sbiw	r24, 0x01	; 1
    5dc6:	f1 f7       	brne	.-4      	; 0x5dc4 <ULTRASONIC_GetDistance+0x186>
    5dc8:	9b 83       	std	Y+3, r25	; 0x03
    5dca:	8a 83       	std	Y+2, r24	; 0x02
    5dcc:	0f c0       	rjmp	.+30     	; 0x5dec <ULTRASONIC_GetDistance+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5dce:	69 89       	ldd	r22, Y+17	; 0x11
    5dd0:	7a 89       	ldd	r23, Y+18	; 0x12
    5dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    5dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    5dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dda:	dc 01       	movw	r26, r24
    5ddc:	cb 01       	movw	r24, r22
    5dde:	88 8b       	std	Y+16, r24	; 0x10
    5de0:	88 89       	ldd	r24, Y+16	; 0x10
    5de2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5de4:	89 81       	ldd	r24, Y+1	; 0x01
    5de6:	8a 95       	dec	r24
    5de8:	f1 f7       	brne	.-4      	; 0x5de6 <ULTRASONIC_GetDistance+0x1a8>
    5dea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_WritePin(ultrasonic_pin,LOW);
    5dec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5dee:	60 e0       	ldi	r22, 0x00	; 0
    5df0:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	Timer1_InputCaptureEdge(RISING);
    5df4:	80 e0       	ldi	r24, 0x00	; 0
    5df6:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
	Timer1_ICU_InterruptEnable();
    5dfa:	0e 94 26 22 	call	0x444c	; 0x444c <Timer1_ICU_InterruptEnable>
	while (flag<2);
    5dfe:	80 91 ff 01 	lds	r24, 0x01FF
    5e02:	90 91 00 02 	lds	r25, 0x0200
    5e06:	82 30       	cpi	r24, 0x02	; 2
    5e08:	91 05       	cpc	r25, r1
    5e0a:	c8 f3       	brcs	.-14     	; 0x5dfe <ULTRASONIC_GetDistance+0x1c0>
	time=t2-t1+((u32)c*65535);
    5e0c:	20 91 05 02 	lds	r18, 0x0205
    5e10:	30 91 06 02 	lds	r19, 0x0206
    5e14:	80 91 03 02 	lds	r24, 0x0203
    5e18:	90 91 04 02 	lds	r25, 0x0204
    5e1c:	89 01       	movw	r16, r18
    5e1e:	08 1b       	sub	r16, r24
    5e20:	19 0b       	sbc	r17, r25
    5e22:	80 91 01 02 	lds	r24, 0x0201
    5e26:	90 91 02 02 	lds	r25, 0x0202
    5e2a:	cc 01       	movw	r24, r24
    5e2c:	a0 e0       	ldi	r26, 0x00	; 0
    5e2e:	b0 e0       	ldi	r27, 0x00	; 0
    5e30:	2f ef       	ldi	r18, 0xFF	; 255
    5e32:	3f ef       	ldi	r19, 0xFF	; 255
    5e34:	40 e0       	ldi	r20, 0x00	; 0
    5e36:	50 e0       	ldi	r21, 0x00	; 0
    5e38:	bc 01       	movw	r22, r24
    5e3a:	cd 01       	movw	r24, r26
    5e3c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    5e40:	dc 01       	movw	r26, r24
    5e42:	cb 01       	movw	r24, r22
    5e44:	80 0f       	add	r24, r16
    5e46:	91 1f       	adc	r25, r17
    5e48:	9a 8f       	std	Y+26, r25	; 0x1a
    5e4a:	89 8f       	std	Y+25, r24	; 0x19
	distance=time/58;
    5e4c:	89 8d       	ldd	r24, Y+25	; 0x19
    5e4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e50:	2a e3       	ldi	r18, 0x3A	; 58
    5e52:	30 e0       	ldi	r19, 0x00	; 0
    5e54:	b9 01       	movw	r22, r18
    5e56:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    5e5a:	cb 01       	movw	r24, r22
    5e5c:	8b 8f       	std	Y+27, r24	; 0x1b
	Timer1_ICU_InterruptDisable();
    5e5e:	0e 94 34 22 	call	0x4468	; 0x4468 <Timer1_ICU_InterruptDisable>
	return distance;
    5e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
	
}
    5e64:	6c 96       	adiw	r28, 0x1c	; 28
    5e66:	0f b6       	in	r0, 0x3f	; 63
    5e68:	f8 94       	cli
    5e6a:	de bf       	out	0x3e, r29	; 62
    5e6c:	0f be       	out	0x3f, r0	; 63
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	cf 91       	pop	r28
    5e72:	df 91       	pop	r29
    5e74:	1f 91       	pop	r17
    5e76:	0f 91       	pop	r16
    5e78:	08 95       	ret

00005e7a <ULTRASONIC_Start>:
void ULTRASONIC_Start(ULTRASONIC_type ultrasonic_pin)
{
    5e7a:	df 93       	push	r29
    5e7c:	cf 93       	push	r28
    5e7e:	cd b7       	in	r28, 0x3d	; 61
    5e80:	de b7       	in	r29, 0x3e	; 62
    5e82:	69 97       	sbiw	r28, 0x19	; 25
    5e84:	0f b6       	in	r0, 0x3f	; 63
    5e86:	f8 94       	cli
    5e88:	de bf       	out	0x3e, r29	; 62
    5e8a:	0f be       	out	0x3f, r0	; 63
    5e8c:	cd bf       	out	0x3d, r28	; 61
    5e8e:	89 8f       	std	Y+25, r24	; 0x19
		if(flag==0)
    5e90:	80 91 ff 01 	lds	r24, 0x01FF
    5e94:	90 91 00 02 	lds	r25, 0x0200
    5e98:	00 97       	sbiw	r24, 0x00	; 0
    5e9a:	09 f0       	breq	.+2      	; 0x5e9e <ULTRASONIC_Start+0x24>
    5e9c:	cd c0       	rjmp	.+410    	; 0x6038 <ULTRASONIC_Start+0x1be>
		{
			DIO_WritePin(ultrasonic_pin,HIGH);
    5e9e:	89 8d       	ldd	r24, Y+25	; 0x19
    5ea0:	61 e0       	ldi	r22, 0x01	; 1
    5ea2:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    5ea6:	80 e0       	ldi	r24, 0x00	; 0
    5ea8:	90 e0       	ldi	r25, 0x00	; 0
    5eaa:	a0 e2       	ldi	r26, 0x20	; 32
    5eac:	b1 e4       	ldi	r27, 0x41	; 65
    5eae:	8d 8b       	std	Y+21, r24	; 0x15
    5eb0:	9e 8b       	std	Y+22, r25	; 0x16
    5eb2:	af 8b       	std	Y+23, r26	; 0x17
    5eb4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    5eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    5eba:	8f 89       	ldd	r24, Y+23	; 0x17
    5ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    5ebe:	2b ea       	ldi	r18, 0xAB	; 171
    5ec0:	3a ea       	ldi	r19, 0xAA	; 170
    5ec2:	4a e2       	ldi	r20, 0x2A	; 42
    5ec4:	50 e4       	ldi	r21, 0x40	; 64
    5ec6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	89 8b       	std	Y+17, r24	; 0x11
    5ed0:	9a 8b       	std	Y+18, r25	; 0x12
    5ed2:	ab 8b       	std	Y+19, r26	; 0x13
    5ed4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5ed6:	69 89       	ldd	r22, Y+17	; 0x11
    5ed8:	7a 89       	ldd	r23, Y+18	; 0x12
    5eda:	8b 89       	ldd	r24, Y+19	; 0x13
    5edc:	9c 89       	ldd	r25, Y+20	; 0x14
    5ede:	20 e0       	ldi	r18, 0x00	; 0
    5ee0:	30 e0       	ldi	r19, 0x00	; 0
    5ee2:	40 e8       	ldi	r20, 0x80	; 128
    5ee4:	5f e3       	ldi	r21, 0x3F	; 63
    5ee6:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5eea:	88 23       	and	r24, r24
    5eec:	1c f4       	brge	.+6      	; 0x5ef4 <ULTRASONIC_Start+0x7a>
		__ticks = 1;
    5eee:	81 e0       	ldi	r24, 0x01	; 1
    5ef0:	88 8b       	std	Y+16, r24	; 0x10
    5ef2:	91 c0       	rjmp	.+290    	; 0x6016 <ULTRASONIC_Start+0x19c>
	else if (__tmp > 255)
    5ef4:	69 89       	ldd	r22, Y+17	; 0x11
    5ef6:	7a 89       	ldd	r23, Y+18	; 0x12
    5ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    5efa:	9c 89       	ldd	r25, Y+20	; 0x14
    5efc:	20 e0       	ldi	r18, 0x00	; 0
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	4f e7       	ldi	r20, 0x7F	; 127
    5f02:	53 e4       	ldi	r21, 0x43	; 67
    5f04:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5f08:	18 16       	cp	r1, r24
    5f0a:	0c f0       	brlt	.+2      	; 0x5f0e <ULTRASONIC_Start+0x94>
    5f0c:	7b c0       	rjmp	.+246    	; 0x6004 <ULTRASONIC_Start+0x18a>
	{
		_delay_ms(__us / 1000.0);
    5f0e:	6d 89       	ldd	r22, Y+21	; 0x15
    5f10:	7e 89       	ldd	r23, Y+22	; 0x16
    5f12:	8f 89       	ldd	r24, Y+23	; 0x17
    5f14:	98 8d       	ldd	r25, Y+24	; 0x18
    5f16:	20 e0       	ldi	r18, 0x00	; 0
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	4a e7       	ldi	r20, 0x7A	; 122
    5f1c:	54 e4       	ldi	r21, 0x44	; 68
    5f1e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    5f22:	dc 01       	movw	r26, r24
    5f24:	cb 01       	movw	r24, r22
    5f26:	8c 87       	std	Y+12, r24	; 0x0c
    5f28:	9d 87       	std	Y+13, r25	; 0x0d
    5f2a:	ae 87       	std	Y+14, r26	; 0x0e
    5f2c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f30:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f32:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f34:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f36:	20 e0       	ldi	r18, 0x00	; 0
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	4a ef       	ldi	r20, 0xFA	; 250
    5f3c:	54 e4       	ldi	r21, 0x44	; 68
    5f3e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	88 87       	std	Y+8, r24	; 0x08
    5f48:	99 87       	std	Y+9, r25	; 0x09
    5f4a:	aa 87       	std	Y+10, r26	; 0x0a
    5f4c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5f4e:	68 85       	ldd	r22, Y+8	; 0x08
    5f50:	79 85       	ldd	r23, Y+9	; 0x09
    5f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f56:	20 e0       	ldi	r18, 0x00	; 0
    5f58:	30 e0       	ldi	r19, 0x00	; 0
    5f5a:	40 e8       	ldi	r20, 0x80	; 128
    5f5c:	5f e3       	ldi	r21, 0x3F	; 63
    5f5e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    5f62:	88 23       	and	r24, r24
    5f64:	2c f4       	brge	.+10     	; 0x5f70 <ULTRASONIC_Start+0xf6>
		__ticks = 1;
    5f66:	81 e0       	ldi	r24, 0x01	; 1
    5f68:	90 e0       	ldi	r25, 0x00	; 0
    5f6a:	9f 83       	std	Y+7, r25	; 0x07
    5f6c:	8e 83       	std	Y+6, r24	; 0x06
    5f6e:	3f c0       	rjmp	.+126    	; 0x5fee <ULTRASONIC_Start+0x174>
	else if (__tmp > 65535)
    5f70:	68 85       	ldd	r22, Y+8	; 0x08
    5f72:	79 85       	ldd	r23, Y+9	; 0x09
    5f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f76:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f78:	20 e0       	ldi	r18, 0x00	; 0
    5f7a:	3f ef       	ldi	r19, 0xFF	; 255
    5f7c:	4f e7       	ldi	r20, 0x7F	; 127
    5f7e:	57 e4       	ldi	r21, 0x47	; 71
    5f80:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    5f84:	18 16       	cp	r1, r24
    5f86:	4c f5       	brge	.+82     	; 0x5fda <ULTRASONIC_Start+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f88:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	40 e2       	ldi	r20, 0x20	; 32
    5f96:	51 e4       	ldi	r21, 0x41	; 65
    5f98:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	bc 01       	movw	r22, r24
    5fa2:	cd 01       	movw	r24, r26
    5fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fa8:	dc 01       	movw	r26, r24
    5faa:	cb 01       	movw	r24, r22
    5fac:	9f 83       	std	Y+7, r25	; 0x07
    5fae:	8e 83       	std	Y+6, r24	; 0x06
    5fb0:	0f c0       	rjmp	.+30     	; 0x5fd0 <ULTRASONIC_Start+0x156>
    5fb2:	88 ec       	ldi	r24, 0xC8	; 200
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	9d 83       	std	Y+5, r25	; 0x05
    5fb8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5fba:	8c 81       	ldd	r24, Y+4	; 0x04
    5fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    5fbe:	01 97       	sbiw	r24, 0x01	; 1
    5fc0:	f1 f7       	brne	.-4      	; 0x5fbe <ULTRASONIC_Start+0x144>
    5fc2:	9d 83       	std	Y+5, r25	; 0x05
    5fc4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fc6:	8e 81       	ldd	r24, Y+6	; 0x06
    5fc8:	9f 81       	ldd	r25, Y+7	; 0x07
    5fca:	01 97       	sbiw	r24, 0x01	; 1
    5fcc:	9f 83       	std	Y+7, r25	; 0x07
    5fce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    5fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    5fd4:	00 97       	sbiw	r24, 0x00	; 0
    5fd6:	69 f7       	brne	.-38     	; 0x5fb2 <ULTRASONIC_Start+0x138>
    5fd8:	24 c0       	rjmp	.+72     	; 0x6022 <ULTRASONIC_Start+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fda:	68 85       	ldd	r22, Y+8	; 0x08
    5fdc:	79 85       	ldd	r23, Y+9	; 0x09
    5fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    5fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    5fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fe6:	dc 01       	movw	r26, r24
    5fe8:	cb 01       	movw	r24, r22
    5fea:	9f 83       	std	Y+7, r25	; 0x07
    5fec:	8e 83       	std	Y+6, r24	; 0x06
    5fee:	8e 81       	ldd	r24, Y+6	; 0x06
    5ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    5ff2:	9b 83       	std	Y+3, r25	; 0x03
    5ff4:	8a 83       	std	Y+2, r24	; 0x02
    5ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    5ffa:	01 97       	sbiw	r24, 0x01	; 1
    5ffc:	f1 f7       	brne	.-4      	; 0x5ffa <ULTRASONIC_Start+0x180>
    5ffe:	9b 83       	std	Y+3, r25	; 0x03
    6000:	8a 83       	std	Y+2, r24	; 0x02
    6002:	0f c0       	rjmp	.+30     	; 0x6022 <ULTRASONIC_Start+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6004:	69 89       	ldd	r22, Y+17	; 0x11
    6006:	7a 89       	ldd	r23, Y+18	; 0x12
    6008:	8b 89       	ldd	r24, Y+19	; 0x13
    600a:	9c 89       	ldd	r25, Y+20	; 0x14
    600c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6010:	dc 01       	movw	r26, r24
    6012:	cb 01       	movw	r24, r22
    6014:	88 8b       	std	Y+16, r24	; 0x10
    6016:	88 89       	ldd	r24, Y+16	; 0x10
    6018:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    601a:	89 81       	ldd	r24, Y+1	; 0x01
    601c:	8a 95       	dec	r24
    601e:	f1 f7       	brne	.-4      	; 0x601c <ULTRASONIC_Start+0x1a2>
    6020:	89 83       	std	Y+1, r24	; 0x01
			_delay_us(10);
			DIO_WritePin(ultrasonic_pin,LOW);
    6022:	89 8d       	ldd	r24, Y+25	; 0x19
    6024:	60 e0       	ldi	r22, 0x00	; 0
    6026:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
			Timer1_InputCaptureEdge(RISING);
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
			Timer1_ICU_InterruptEnable();
    6030:	0e 94 26 22 	call	0x444c	; 0x444c <Timer1_ICU_InterruptEnable>
			Timer1_OVF_InterruptEnable();
    6034:	0e 94 42 22 	call	0x4484	; 0x4484 <Timer1_OVF_InterruptEnable>
		}
	
}
    6038:	69 96       	adiw	r28, 0x19	; 25
    603a:	0f b6       	in	r0, 0x3f	; 63
    603c:	f8 94       	cli
    603e:	de bf       	out	0x3e, r29	; 62
    6040:	0f be       	out	0x3f, r0	; 63
    6042:	cd bf       	out	0x3d, r28	; 61
    6044:	cf 91       	pop	r28
    6046:	df 91       	pop	r29
    6048:	08 95       	ret

0000604a <ULTRASONIC_GetDistanceNoBlock>:
u8 ULTRASONIC_GetDistanceNoBlock(u8*Pdistance)
{
    604a:	0f 93       	push	r16
    604c:	1f 93       	push	r17
    604e:	df 93       	push	r29
    6050:	cf 93       	push	r28
    6052:	00 d0       	rcall	.+0      	; 0x6054 <ULTRASONIC_GetDistanceNoBlock+0xa>
    6054:	00 d0       	rcall	.+0      	; 0x6056 <ULTRASONIC_GetDistanceNoBlock+0xc>
    6056:	00 d0       	rcall	.+0      	; 0x6058 <ULTRASONIC_GetDistanceNoBlock+0xe>
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	9d 83       	std	Y+5, r25	; 0x05
    605e:	8c 83       	std	Y+4, r24	; 0x04
	u8 distance;
	u16 time;
	if (flag==2)
    6060:	80 91 ff 01 	lds	r24, 0x01FF
    6064:	90 91 00 02 	lds	r25, 0x0200
    6068:	82 30       	cpi	r24, 0x02	; 2
    606a:	91 05       	cpc	r25, r1
    606c:	b1 f5       	brne	.+108    	; 0x60da <ULTRASONIC_GetDistanceNoBlock+0x90>
	{
		time=t2-t1+((u32)c*65535);
    606e:	20 91 05 02 	lds	r18, 0x0205
    6072:	30 91 06 02 	lds	r19, 0x0206
    6076:	80 91 03 02 	lds	r24, 0x0203
    607a:	90 91 04 02 	lds	r25, 0x0204
    607e:	89 01       	movw	r16, r18
    6080:	08 1b       	sub	r16, r24
    6082:	19 0b       	sbc	r17, r25
    6084:	80 91 01 02 	lds	r24, 0x0201
    6088:	90 91 02 02 	lds	r25, 0x0202
    608c:	cc 01       	movw	r24, r24
    608e:	a0 e0       	ldi	r26, 0x00	; 0
    6090:	b0 e0       	ldi	r27, 0x00	; 0
    6092:	2f ef       	ldi	r18, 0xFF	; 255
    6094:	3f ef       	ldi	r19, 0xFF	; 255
    6096:	40 e0       	ldi	r20, 0x00	; 0
    6098:	50 e0       	ldi	r21, 0x00	; 0
    609a:	bc 01       	movw	r22, r24
    609c:	cd 01       	movw	r24, r26
    609e:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__mulsi3>
    60a2:	dc 01       	movw	r26, r24
    60a4:	cb 01       	movw	r24, r22
    60a6:	80 0f       	add	r24, r16
    60a8:	91 1f       	adc	r25, r17
    60aa:	9a 83       	std	Y+2, r25	; 0x02
    60ac:	89 83       	std	Y+1, r24	; 0x01
		distance=time/58;
    60ae:	89 81       	ldd	r24, Y+1	; 0x01
    60b0:	9a 81       	ldd	r25, Y+2	; 0x02
    60b2:	2a e3       	ldi	r18, 0x3A	; 58
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	b9 01       	movw	r22, r18
    60b8:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    60bc:	cb 01       	movw	r24, r22
    60be:	8b 83       	std	Y+3, r24	; 0x03
		*Pdistance=distance;
    60c0:	ec 81       	ldd	r30, Y+4	; 0x04
    60c2:	fd 81       	ldd	r31, Y+5	; 0x05
    60c4:	8b 81       	ldd	r24, Y+3	; 0x03
    60c6:	80 83       	st	Z, r24
		Timer1_OVF_InterruptEnable();
    60c8:	0e 94 42 22 	call	0x4484	; 0x4484 <Timer1_OVF_InterruptEnable>
		flag=0;
    60cc:	10 92 00 02 	sts	0x0200, r1
    60d0:	10 92 ff 01 	sts	0x01FF, r1
		return 1;
    60d4:	81 e0       	ldi	r24, 0x01	; 1
    60d6:	8e 83       	std	Y+6, r24	; 0x06
    60d8:	01 c0       	rjmp	.+2      	; 0x60dc <ULTRASONIC_GetDistanceNoBlock+0x92>
	}
	return 0;
    60da:	1e 82       	std	Y+6, r1	; 0x06
    60dc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    60de:	26 96       	adiw	r28, 0x06	; 6
    60e0:	0f b6       	in	r0, 0x3f	; 63
    60e2:	f8 94       	cli
    60e4:	de bf       	out	0x3e, r29	; 62
    60e6:	0f be       	out	0x3f, r0	; 63
    60e8:	cd bf       	out	0x3d, r28	; 61
    60ea:	cf 91       	pop	r28
    60ec:	df 91       	pop	r29
    60ee:	1f 91       	pop	r17
    60f0:	0f 91       	pop	r16
    60f2:	08 95       	ret

000060f4 <ULTRASONIC_GetDistance2>:
u8 ULTRASONIC_GetDistance2(ULTRASONIC_type ultrasonic_pin)
{
    60f4:	df 93       	push	r29
    60f6:	cf 93       	push	r28
    60f8:	cd b7       	in	r28, 0x3d	; 61
    60fa:	de b7       	in	r29, 0x3e	; 62
    60fc:	6c 97       	sbiw	r28, 0x1c	; 28
    60fe:	0f b6       	in	r0, 0x3f	; 63
    6100:	f8 94       	cli
    6102:	de bf       	out	0x3e, r29	; 62
    6104:	0f be       	out	0x3f, r0	; 63
    6106:	cd bf       	out	0x3d, r28	; 61
    6108:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 distance;
	u16 time;
	DIO_WritePin(ultrasonic_pin,HIGH);
    610a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    610c:	61 e0       	ldi	r22, 0x01	; 1
    610e:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
    6112:	80 e0       	ldi	r24, 0x00	; 0
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	a0 e2       	ldi	r26, 0x20	; 32
    6118:	b1 e4       	ldi	r27, 0x41	; 65
    611a:	8d 8b       	std	Y+21, r24	; 0x15
    611c:	9e 8b       	std	Y+22, r25	; 0x16
    611e:	af 8b       	std	Y+23, r26	; 0x17
    6120:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    6122:	6d 89       	ldd	r22, Y+21	; 0x15
    6124:	7e 89       	ldd	r23, Y+22	; 0x16
    6126:	8f 89       	ldd	r24, Y+23	; 0x17
    6128:	98 8d       	ldd	r25, Y+24	; 0x18
    612a:	2b ea       	ldi	r18, 0xAB	; 171
    612c:	3a ea       	ldi	r19, 0xAA	; 170
    612e:	4a e2       	ldi	r20, 0x2A	; 42
    6130:	50 e4       	ldi	r21, 0x40	; 64
    6132:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6136:	dc 01       	movw	r26, r24
    6138:	cb 01       	movw	r24, r22
    613a:	89 8b       	std	Y+17, r24	; 0x11
    613c:	9a 8b       	std	Y+18, r25	; 0x12
    613e:	ab 8b       	std	Y+19, r26	; 0x13
    6140:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    6142:	69 89       	ldd	r22, Y+17	; 0x11
    6144:	7a 89       	ldd	r23, Y+18	; 0x12
    6146:	8b 89       	ldd	r24, Y+19	; 0x13
    6148:	9c 89       	ldd	r25, Y+20	; 0x14
    614a:	20 e0       	ldi	r18, 0x00	; 0
    614c:	30 e0       	ldi	r19, 0x00	; 0
    614e:	40 e8       	ldi	r20, 0x80	; 128
    6150:	5f e3       	ldi	r21, 0x3F	; 63
    6152:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6156:	88 23       	and	r24, r24
    6158:	1c f4       	brge	.+6      	; 0x6160 <ULTRASONIC_GetDistance2+0x6c>
		__ticks = 1;
    615a:	81 e0       	ldi	r24, 0x01	; 1
    615c:	88 8b       	std	Y+16, r24	; 0x10
    615e:	91 c0       	rjmp	.+290    	; 0x6282 <ULTRASONIC_GetDistance2+0x18e>
	else if (__tmp > 255)
    6160:	69 89       	ldd	r22, Y+17	; 0x11
    6162:	7a 89       	ldd	r23, Y+18	; 0x12
    6164:	8b 89       	ldd	r24, Y+19	; 0x13
    6166:	9c 89       	ldd	r25, Y+20	; 0x14
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	4f e7       	ldi	r20, 0x7F	; 127
    616e:	53 e4       	ldi	r21, 0x43	; 67
    6170:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6174:	18 16       	cp	r1, r24
    6176:	0c f0       	brlt	.+2      	; 0x617a <ULTRASONIC_GetDistance2+0x86>
    6178:	7b c0       	rjmp	.+246    	; 0x6270 <ULTRASONIC_GetDistance2+0x17c>
	{
		_delay_ms(__us / 1000.0);
    617a:	6d 89       	ldd	r22, Y+21	; 0x15
    617c:	7e 89       	ldd	r23, Y+22	; 0x16
    617e:	8f 89       	ldd	r24, Y+23	; 0x17
    6180:	98 8d       	ldd	r25, Y+24	; 0x18
    6182:	20 e0       	ldi	r18, 0x00	; 0
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	4a e7       	ldi	r20, 0x7A	; 122
    6188:	54 e4       	ldi	r21, 0x44	; 68
    618a:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <__divsf3>
    618e:	dc 01       	movw	r26, r24
    6190:	cb 01       	movw	r24, r22
    6192:	8c 87       	std	Y+12, r24	; 0x0c
    6194:	9d 87       	std	Y+13, r25	; 0x0d
    6196:	ae 87       	std	Y+14, r26	; 0x0e
    6198:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    619a:	6c 85       	ldd	r22, Y+12	; 0x0c
    619c:	7d 85       	ldd	r23, Y+13	; 0x0d
    619e:	8e 85       	ldd	r24, Y+14	; 0x0e
    61a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    61a2:	20 e0       	ldi	r18, 0x00	; 0
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	4a ef       	ldi	r20, 0xFA	; 250
    61a8:	54 e4       	ldi	r21, 0x44	; 68
    61aa:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    61ae:	dc 01       	movw	r26, r24
    61b0:	cb 01       	movw	r24, r22
    61b2:	88 87       	std	Y+8, r24	; 0x08
    61b4:	99 87       	std	Y+9, r25	; 0x09
    61b6:	aa 87       	std	Y+10, r26	; 0x0a
    61b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    61ba:	68 85       	ldd	r22, Y+8	; 0x08
    61bc:	79 85       	ldd	r23, Y+9	; 0x09
    61be:	8a 85       	ldd	r24, Y+10	; 0x0a
    61c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	40 e8       	ldi	r20, 0x80	; 128
    61c8:	5f e3       	ldi	r21, 0x3F	; 63
    61ca:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    61ce:	88 23       	and	r24, r24
    61d0:	2c f4       	brge	.+10     	; 0x61dc <ULTRASONIC_GetDistance2+0xe8>
		__ticks = 1;
    61d2:	81 e0       	ldi	r24, 0x01	; 1
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	9f 83       	std	Y+7, r25	; 0x07
    61d8:	8e 83       	std	Y+6, r24	; 0x06
    61da:	3f c0       	rjmp	.+126    	; 0x625a <ULTRASONIC_GetDistance2+0x166>
	else if (__tmp > 65535)
    61dc:	68 85       	ldd	r22, Y+8	; 0x08
    61de:	79 85       	ldd	r23, Y+9	; 0x09
    61e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    61e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    61e4:	20 e0       	ldi	r18, 0x00	; 0
    61e6:	3f ef       	ldi	r19, 0xFF	; 255
    61e8:	4f e7       	ldi	r20, 0x7F	; 127
    61ea:	57 e4       	ldi	r21, 0x47	; 71
    61ec:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    61f0:	18 16       	cp	r1, r24
    61f2:	4c f5       	brge	.+82     	; 0x6246 <ULTRASONIC_GetDistance2+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    61f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    61f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    61fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    61fc:	20 e0       	ldi	r18, 0x00	; 0
    61fe:	30 e0       	ldi	r19, 0x00	; 0
    6200:	40 e2       	ldi	r20, 0x20	; 32
    6202:	51 e4       	ldi	r21, 0x41	; 65
    6204:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6208:	dc 01       	movw	r26, r24
    620a:	cb 01       	movw	r24, r22
    620c:	bc 01       	movw	r22, r24
    620e:	cd 01       	movw	r24, r26
    6210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6214:	dc 01       	movw	r26, r24
    6216:	cb 01       	movw	r24, r22
    6218:	9f 83       	std	Y+7, r25	; 0x07
    621a:	8e 83       	std	Y+6, r24	; 0x06
    621c:	0f c0       	rjmp	.+30     	; 0x623c <ULTRASONIC_GetDistance2+0x148>
    621e:	88 ec       	ldi	r24, 0xC8	; 200
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	9d 83       	std	Y+5, r25	; 0x05
    6224:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6226:	8c 81       	ldd	r24, Y+4	; 0x04
    6228:	9d 81       	ldd	r25, Y+5	; 0x05
    622a:	01 97       	sbiw	r24, 0x01	; 1
    622c:	f1 f7       	brne	.-4      	; 0x622a <ULTRASONIC_GetDistance2+0x136>
    622e:	9d 83       	std	Y+5, r25	; 0x05
    6230:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6232:	8e 81       	ldd	r24, Y+6	; 0x06
    6234:	9f 81       	ldd	r25, Y+7	; 0x07
    6236:	01 97       	sbiw	r24, 0x01	; 1
    6238:	9f 83       	std	Y+7, r25	; 0x07
    623a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    623c:	8e 81       	ldd	r24, Y+6	; 0x06
    623e:	9f 81       	ldd	r25, Y+7	; 0x07
    6240:	00 97       	sbiw	r24, 0x00	; 0
    6242:	69 f7       	brne	.-38     	; 0x621e <ULTRASONIC_GetDistance2+0x12a>
    6244:	24 c0       	rjmp	.+72     	; 0x628e <ULTRASONIC_GetDistance2+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6246:	68 85       	ldd	r22, Y+8	; 0x08
    6248:	79 85       	ldd	r23, Y+9	; 0x09
    624a:	8a 85       	ldd	r24, Y+10	; 0x0a
    624c:	9b 85       	ldd	r25, Y+11	; 0x0b
    624e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6252:	dc 01       	movw	r26, r24
    6254:	cb 01       	movw	r24, r22
    6256:	9f 83       	std	Y+7, r25	; 0x07
    6258:	8e 83       	std	Y+6, r24	; 0x06
    625a:	8e 81       	ldd	r24, Y+6	; 0x06
    625c:	9f 81       	ldd	r25, Y+7	; 0x07
    625e:	9b 83       	std	Y+3, r25	; 0x03
    6260:	8a 83       	std	Y+2, r24	; 0x02
    6262:	8a 81       	ldd	r24, Y+2	; 0x02
    6264:	9b 81       	ldd	r25, Y+3	; 0x03
    6266:	01 97       	sbiw	r24, 0x01	; 1
    6268:	f1 f7       	brne	.-4      	; 0x6266 <ULTRASONIC_GetDistance2+0x172>
    626a:	9b 83       	std	Y+3, r25	; 0x03
    626c:	8a 83       	std	Y+2, r24	; 0x02
    626e:	0f c0       	rjmp	.+30     	; 0x628e <ULTRASONIC_GetDistance2+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    6270:	69 89       	ldd	r22, Y+17	; 0x11
    6272:	7a 89       	ldd	r23, Y+18	; 0x12
    6274:	8b 89       	ldd	r24, Y+19	; 0x13
    6276:	9c 89       	ldd	r25, Y+20	; 0x14
    6278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    627c:	dc 01       	movw	r26, r24
    627e:	cb 01       	movw	r24, r22
    6280:	88 8b       	std	Y+16, r24	; 0x10
    6282:	88 89       	ldd	r24, Y+16	; 0x10
    6284:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6286:	89 81       	ldd	r24, Y+1	; 0x01
    6288:	8a 95       	dec	r24
    628a:	f1 f7       	brne	.-4      	; 0x6288 <ULTRASONIC_GetDistance2+0x194>
    628c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_WritePin(ultrasonic_pin,LOW);
    628e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6290:	60 e0       	ldi	r22, 0x00	; 0
    6292:	0e 94 25 1b 	call	0x364a	; 0x364a <DIO_WritePin>
	while (!DIO_ReadPin(PIND6));
    6296:	8e e1       	ldi	r24, 0x1E	; 30
    6298:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    629c:	88 23       	and	r24, r24
    629e:	d9 f3       	breq	.-10     	; 0x6296 <ULTRASONIC_GetDistance2+0x1a2>
	TCNT1=0;
    62a0:	ec e4       	ldi	r30, 0x4C	; 76
    62a2:	f0 e0       	ldi	r31, 0x00	; 0
    62a4:	11 82       	std	Z+1, r1	; 0x01
    62a6:	10 82       	st	Z, r1
	while (DIO_ReadPin(PIND6));
    62a8:	8e e1       	ldi	r24, 0x1E	; 30
    62aa:	0e 94 96 1c 	call	0x392c	; 0x392c <DIO_ReadPin>
    62ae:	88 23       	and	r24, r24
    62b0:	d9 f7       	brne	.-10     	; 0x62a8 <ULTRASONIC_GetDistance2+0x1b4>
	time=TCNT1;
    62b2:	ec e4       	ldi	r30, 0x4C	; 76
    62b4:	f0 e0       	ldi	r31, 0x00	; 0
    62b6:	80 81       	ld	r24, Z
    62b8:	91 81       	ldd	r25, Z+1	; 0x01
    62ba:	9a 8f       	std	Y+26, r25	; 0x1a
    62bc:	89 8f       	std	Y+25, r24	; 0x19
	distance=c/58;
    62be:	80 91 01 02 	lds	r24, 0x0201
    62c2:	90 91 02 02 	lds	r25, 0x0202
    62c6:	2a e3       	ldi	r18, 0x3A	; 58
    62c8:	30 e0       	ldi	r19, 0x00	; 0
    62ca:	b9 01       	movw	r22, r18
    62cc:	0e 94 9e 32 	call	0x653c	; 0x653c <__udivmodhi4>
    62d0:	cb 01       	movw	r24, r22
    62d2:	8b 8f       	std	Y+27, r24	; 0x1b
	return distance;
    62d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
	
}
    62d6:	6c 96       	adiw	r28, 0x1c	; 28
    62d8:	0f b6       	in	r0, 0x3f	; 63
    62da:	f8 94       	cli
    62dc:	de bf       	out	0x3e, r29	; 62
    62de:	0f be       	out	0x3f, r0	; 63
    62e0:	cd bf       	out	0x3d, r28	; 61
    62e2:	cf 91       	pop	r28
    62e4:	df 91       	pop	r29
    62e6:	08 95       	ret

000062e8 <Func_ICU>:

static void Func_ICU(void)
{
    62e8:	df 93       	push	r29
    62ea:	cf 93       	push	r28
    62ec:	cd b7       	in	r28, 0x3d	; 61
    62ee:	de b7       	in	r29, 0x3e	; 62
	if(flag==0)
    62f0:	80 91 ff 01 	lds	r24, 0x01FF
    62f4:	90 91 00 02 	lds	r25, 0x0200
    62f8:	00 97       	sbiw	r24, 0x00	; 0
    62fa:	b1 f4       	brne	.+44     	; 0x6328 <Func_ICU+0x40>
	{
		c=0;
    62fc:	10 92 02 02 	sts	0x0202, r1
    6300:	10 92 01 02 	sts	0x0201, r1
		t1=ICR1;
    6304:	e6 e4       	ldi	r30, 0x46	; 70
    6306:	f0 e0       	ldi	r31, 0x00	; 0
    6308:	80 81       	ld	r24, Z
    630a:	91 81       	ldd	r25, Z+1	; 0x01
    630c:	90 93 04 02 	sts	0x0204, r25
    6310:	80 93 03 02 	sts	0x0203, r24
		flag=1;
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	90 93 00 02 	sts	0x0200, r25
    631c:	80 93 ff 01 	sts	0x01FF, r24
		Timer1_InputCaptureEdge(FALLING);
    6320:	81 e0       	ldi	r24, 0x01	; 1
    6322:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
    6326:	1c c0       	rjmp	.+56     	; 0x6360 <Func_ICU+0x78>
	}
	else if (flag==1)
    6328:	80 91 ff 01 	lds	r24, 0x01FF
    632c:	90 91 00 02 	lds	r25, 0x0200
    6330:	81 30       	cpi	r24, 0x01	; 1
    6332:	91 05       	cpc	r25, r1
    6334:	a9 f4       	brne	.+42     	; 0x6360 <Func_ICU+0x78>
	{
		t2=ICR1;
    6336:	e6 e4       	ldi	r30, 0x46	; 70
    6338:	f0 e0       	ldi	r31, 0x00	; 0
    633a:	80 81       	ld	r24, Z
    633c:	91 81       	ldd	r25, Z+1	; 0x01
    633e:	90 93 06 02 	sts	0x0206, r25
    6342:	80 93 05 02 	sts	0x0205, r24
		flag=2;
    6346:	82 e0       	ldi	r24, 0x02	; 2
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	90 93 00 02 	sts	0x0200, r25
    634e:	80 93 ff 01 	sts	0x01FF, r24
		Timer1_InputCaptureEdge(RISING);
    6352:	80 e0       	ldi	r24, 0x00	; 0
    6354:	0e 94 07 22 	call	0x440e	; 0x440e <Timer1_InputCaptureEdge>
		Timer1_OVF_InterruptDisable();
    6358:	0e 94 50 22 	call	0x44a0	; 0x44a0 <Timer1_OVF_InterruptDisable>
		Timer1_ICU_InterruptDisable();
    635c:	0e 94 34 22 	call	0x4468	; 0x4468 <Timer1_ICU_InterruptDisable>
	}
}
    6360:	cf 91       	pop	r28
    6362:	df 91       	pop	r29
    6364:	08 95       	ret

00006366 <Func_OVF>:

static void Func_OVF(void)
{
    6366:	df 93       	push	r29
    6368:	cf 93       	push	r28
    636a:	cd b7       	in	r28, 0x3d	; 61
    636c:	de b7       	in	r29, 0x3e	; 62
	c++;
    636e:	80 91 01 02 	lds	r24, 0x0201
    6372:	90 91 02 02 	lds	r25, 0x0202
    6376:	01 96       	adiw	r24, 0x01	; 1
    6378:	90 93 02 02 	sts	0x0202, r25
    637c:	80 93 01 02 	sts	0x0201, r24
    6380:	cf 91       	pop	r28
    6382:	df 91       	pop	r29
    6384:	08 95       	ret

00006386 <main>:
#include "Mcal/EX_Interrupt.h"
#include <util/delay.h>


int main(void)
{
    6386:	af 92       	push	r10
    6388:	bf 92       	push	r11
    638a:	cf 92       	push	r12
    638c:	df 92       	push	r13
    638e:	ef 92       	push	r14
    6390:	ff 92       	push	r15
    6392:	0f 93       	push	r16
    6394:	1f 93       	push	r17
    6396:	df 93       	push	r29
    6398:	cf 93       	push	r28
    639a:	cd b7       	in	r28, 0x3d	; 61
    639c:	de b7       	in	r29, 0x3e	; 62
    639e:	2f 97       	sbiw	r28, 0x0f	; 15
    63a0:	0f b6       	in	r0, 0x3f	; 63
    63a2:	f8 94       	cli
    63a4:	de bf       	out	0x3e, r29	; 62
    63a6:	0f be       	out	0x3f, r0	; 63
    63a8:	cd bf       	out	0x3d, r28	; 61
	sei();
    63aa:	78 94       	sei
	DIO_Init();
    63ac:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <DIO_Init>
	LCD_Init();
    63b0:	0e 94 9b 29 	call	0x5336	; 0x5336 <LCD_Init>
	EXI_TriggerEdge(EX_INT0,RISING_EDGE);
    63b4:	80 e0       	ldi	r24, 0x00	; 0
    63b6:	63 e0       	ldi	r22, 0x03	; 3
    63b8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <EXI_TriggerEdge>
	EXI_TriggerEdge(EX_INT1,FALLING_EDGE);
    63bc:	81 e0       	ldi	r24, 0x01	; 1
    63be:	62 e0       	ldi	r22, 0x02	; 2
    63c0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <EXI_TriggerEdge>
	EXI_Enable(EX_INT0);
    63c4:	80 e0       	ldi	r24, 0x00	; 0
    63c6:	0e 94 56 1d 	call	0x3aac	; 0x3aac <EXI_Enable>
	EXI_Enable(EX_INT1);
    63ca:	81 e0       	ldi	r24, 0x01	; 1
    63cc:	0e 94 56 1d 	call	0x3aac	; 0x3aac <EXI_Enable>
	LCD_WriteSentence("test 1");
    63d0:	80 e6       	ldi	r24, 0x60	; 96
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	0e 94 20 2c 	call	0x5840	; 0x5840 <LCD_WriteSentence>
	//_delay_ms(3000);
	sei();
    63d8:	78 94       	sei
	u8 x=0;
    63da:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		LCD_GoTo(1,0);
    63dc:	81 e0       	ldi	r24, 0x01	; 1
    63de:	60 e0       	ldi	r22, 0x00	; 0
    63e0:	0e 94 4a 2c 	call	0x5894	; 0x5894 <LCD_GoTo>
		LCD_WriteNumber(x);
    63e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    63e6:	a8 2e       	mov	r10, r24
    63e8:	bb 24       	eor	r11, r11
    63ea:	cc 24       	eor	r12, r12
    63ec:	dd 24       	eor	r13, r13
    63ee:	ee 24       	eor	r14, r14
    63f0:	ff 24       	eor	r15, r15
    63f2:	87 01       	movw	r16, r14
    63f4:	2a 2d       	mov	r18, r10
    63f6:	3b 2d       	mov	r19, r11
    63f8:	4c 2d       	mov	r20, r12
    63fa:	5d 2d       	mov	r21, r13
    63fc:	6e 2d       	mov	r22, r14
    63fe:	7f 2d       	mov	r23, r15
    6400:	80 2f       	mov	r24, r16
    6402:	91 2f       	mov	r25, r17
    6404:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <LCD_WriteNumber>
		x++;
    6408:	8f 85       	ldd	r24, Y+15	; 0x0f
    640a:	8f 5f       	subi	r24, 0xFF	; 255
    640c:	8f 87       	std	Y+15, r24	; 0x0f
    640e:	80 e0       	ldi	r24, 0x00	; 0
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	a6 e9       	ldi	r26, 0x96	; 150
    6414:	b3 e4       	ldi	r27, 0x43	; 67
    6416:	8b 87       	std	Y+11, r24	; 0x0b
    6418:	9c 87       	std	Y+12, r25	; 0x0c
    641a:	ad 87       	std	Y+13, r26	; 0x0d
    641c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    641e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6420:	7c 85       	ldd	r23, Y+12	; 0x0c
    6422:	8d 85       	ldd	r24, Y+13	; 0x0d
    6424:	9e 85       	ldd	r25, Y+14	; 0x0e
    6426:	20 e0       	ldi	r18, 0x00	; 0
    6428:	30 e0       	ldi	r19, 0x00	; 0
    642a:	4a ef       	ldi	r20, 0xFA	; 250
    642c:	54 e4       	ldi	r21, 0x44	; 68
    642e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    6432:	dc 01       	movw	r26, r24
    6434:	cb 01       	movw	r24, r22
    6436:	8f 83       	std	Y+7, r24	; 0x07
    6438:	98 87       	std	Y+8, r25	; 0x08
    643a:	a9 87       	std	Y+9, r26	; 0x09
    643c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    643e:	6f 81       	ldd	r22, Y+7	; 0x07
    6440:	78 85       	ldd	r23, Y+8	; 0x08
    6442:	89 85       	ldd	r24, Y+9	; 0x09
    6444:	9a 85       	ldd	r25, Y+10	; 0x0a
    6446:	20 e0       	ldi	r18, 0x00	; 0
    6448:	30 e0       	ldi	r19, 0x00	; 0
    644a:	40 e8       	ldi	r20, 0x80	; 128
    644c:	5f e3       	ldi	r21, 0x3F	; 63
    644e:	0e 94 0a 11 	call	0x2214	; 0x2214 <__ltsf2>
    6452:	88 23       	and	r24, r24
    6454:	2c f4       	brge	.+10     	; 0x6460 <main+0xda>
		__ticks = 1;
    6456:	81 e0       	ldi	r24, 0x01	; 1
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	9e 83       	std	Y+6, r25	; 0x06
    645c:	8d 83       	std	Y+5, r24	; 0x05
    645e:	3f c0       	rjmp	.+126    	; 0x64de <main+0x158>
	else if (__tmp > 65535)
    6460:	6f 81       	ldd	r22, Y+7	; 0x07
    6462:	78 85       	ldd	r23, Y+8	; 0x08
    6464:	89 85       	ldd	r24, Y+9	; 0x09
    6466:	9a 85       	ldd	r25, Y+10	; 0x0a
    6468:	20 e0       	ldi	r18, 0x00	; 0
    646a:	3f ef       	ldi	r19, 0xFF	; 255
    646c:	4f e7       	ldi	r20, 0x7F	; 127
    646e:	57 e4       	ldi	r21, 0x47	; 71
    6470:	0e 94 aa 10 	call	0x2154	; 0x2154 <__gtsf2>
    6474:	18 16       	cp	r1, r24
    6476:	4c f5       	brge	.+82     	; 0x64ca <main+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6478:	6b 85       	ldd	r22, Y+11	; 0x0b
    647a:	7c 85       	ldd	r23, Y+12	; 0x0c
    647c:	8d 85       	ldd	r24, Y+13	; 0x0d
    647e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6480:	20 e0       	ldi	r18, 0x00	; 0
    6482:	30 e0       	ldi	r19, 0x00	; 0
    6484:	40 e2       	ldi	r20, 0x20	; 32
    6486:	51 e4       	ldi	r21, 0x41	; 65
    6488:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__mulsf3>
    648c:	dc 01       	movw	r26, r24
    648e:	cb 01       	movw	r24, r22
    6490:	bc 01       	movw	r22, r24
    6492:	cd 01       	movw	r24, r26
    6494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6498:	dc 01       	movw	r26, r24
    649a:	cb 01       	movw	r24, r22
    649c:	9e 83       	std	Y+6, r25	; 0x06
    649e:	8d 83       	std	Y+5, r24	; 0x05
    64a0:	0f c0       	rjmp	.+30     	; 0x64c0 <main+0x13a>
    64a2:	88 ec       	ldi	r24, 0xC8	; 200
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	9c 83       	std	Y+4, r25	; 0x04
    64a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    64aa:	8b 81       	ldd	r24, Y+3	; 0x03
    64ac:	9c 81       	ldd	r25, Y+4	; 0x04
    64ae:	01 97       	sbiw	r24, 0x01	; 1
    64b0:	f1 f7       	brne	.-4      	; 0x64ae <main+0x128>
    64b2:	9c 83       	std	Y+4, r25	; 0x04
    64b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64b6:	8d 81       	ldd	r24, Y+5	; 0x05
    64b8:	9e 81       	ldd	r25, Y+6	; 0x06
    64ba:	01 97       	sbiw	r24, 0x01	; 1
    64bc:	9e 83       	std	Y+6, r25	; 0x06
    64be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64c0:	8d 81       	ldd	r24, Y+5	; 0x05
    64c2:	9e 81       	ldd	r25, Y+6	; 0x06
    64c4:	00 97       	sbiw	r24, 0x00	; 0
    64c6:	69 f7       	brne	.-38     	; 0x64a2 <main+0x11c>
    64c8:	14 c0       	rjmp	.+40     	; 0x64f2 <main+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64ca:	6f 81       	ldd	r22, Y+7	; 0x07
    64cc:	78 85       	ldd	r23, Y+8	; 0x08
    64ce:	89 85       	ldd	r24, Y+9	; 0x09
    64d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    64d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64d6:	dc 01       	movw	r26, r24
    64d8:	cb 01       	movw	r24, r22
    64da:	9e 83       	std	Y+6, r25	; 0x06
    64dc:	8d 83       	std	Y+5, r24	; 0x05
    64de:	8d 81       	ldd	r24, Y+5	; 0x05
    64e0:	9e 81       	ldd	r25, Y+6	; 0x06
    64e2:	9a 83       	std	Y+2, r25	; 0x02
    64e4:	89 83       	std	Y+1, r24	; 0x01
    64e6:	89 81       	ldd	r24, Y+1	; 0x01
    64e8:	9a 81       	ldd	r25, Y+2	; 0x02
    64ea:	01 97       	sbiw	r24, 0x01	; 1
    64ec:	f1 f7       	brne	.-4      	; 0x64ea <main+0x164>
    64ee:	9a 83       	std	Y+2, r25	; 0x02
    64f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);

		if (x==10)
    64f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    64f4:	8a 30       	cpi	r24, 0x0A	; 10
    64f6:	09 f0       	breq	.+2      	; 0x64fa <main+0x174>
    64f8:	71 cf       	rjmp	.-286    	; 0x63dc <main+0x56>
		{
			x=0;
    64fa:	1f 86       	std	Y+15, r1	; 0x0f
    64fc:	6f cf       	rjmp	.-290    	; 0x63dc <main+0x56>

000064fe <__mulsi3>:
    64fe:	62 9f       	mul	r22, r18
    6500:	d0 01       	movw	r26, r0
    6502:	73 9f       	mul	r23, r19
    6504:	f0 01       	movw	r30, r0
    6506:	82 9f       	mul	r24, r18
    6508:	e0 0d       	add	r30, r0
    650a:	f1 1d       	adc	r31, r1
    650c:	64 9f       	mul	r22, r20
    650e:	e0 0d       	add	r30, r0
    6510:	f1 1d       	adc	r31, r1
    6512:	92 9f       	mul	r25, r18
    6514:	f0 0d       	add	r31, r0
    6516:	83 9f       	mul	r24, r19
    6518:	f0 0d       	add	r31, r0
    651a:	74 9f       	mul	r23, r20
    651c:	f0 0d       	add	r31, r0
    651e:	65 9f       	mul	r22, r21
    6520:	f0 0d       	add	r31, r0
    6522:	99 27       	eor	r25, r25
    6524:	72 9f       	mul	r23, r18
    6526:	b0 0d       	add	r27, r0
    6528:	e1 1d       	adc	r30, r1
    652a:	f9 1f       	adc	r31, r25
    652c:	63 9f       	mul	r22, r19
    652e:	b0 0d       	add	r27, r0
    6530:	e1 1d       	adc	r30, r1
    6532:	f9 1f       	adc	r31, r25
    6534:	bd 01       	movw	r22, r26
    6536:	cf 01       	movw	r24, r30
    6538:	11 24       	eor	r1, r1
    653a:	08 95       	ret

0000653c <__udivmodhi4>:
    653c:	aa 1b       	sub	r26, r26
    653e:	bb 1b       	sub	r27, r27
    6540:	51 e1       	ldi	r21, 0x11	; 17
    6542:	07 c0       	rjmp	.+14     	; 0x6552 <__udivmodhi4_ep>

00006544 <__udivmodhi4_loop>:
    6544:	aa 1f       	adc	r26, r26
    6546:	bb 1f       	adc	r27, r27
    6548:	a6 17       	cp	r26, r22
    654a:	b7 07       	cpc	r27, r23
    654c:	10 f0       	brcs	.+4      	; 0x6552 <__udivmodhi4_ep>
    654e:	a6 1b       	sub	r26, r22
    6550:	b7 0b       	sbc	r27, r23

00006552 <__udivmodhi4_ep>:
    6552:	88 1f       	adc	r24, r24
    6554:	99 1f       	adc	r25, r25
    6556:	5a 95       	dec	r21
    6558:	a9 f7       	brne	.-22     	; 0x6544 <__udivmodhi4_loop>
    655a:	80 95       	com	r24
    655c:	90 95       	com	r25
    655e:	bc 01       	movw	r22, r24
    6560:	cd 01       	movw	r24, r26
    6562:	08 95       	ret

00006564 <__udivmodsi4>:
    6564:	a1 e2       	ldi	r26, 0x21	; 33
    6566:	1a 2e       	mov	r1, r26
    6568:	aa 1b       	sub	r26, r26
    656a:	bb 1b       	sub	r27, r27
    656c:	fd 01       	movw	r30, r26
    656e:	0d c0       	rjmp	.+26     	; 0x658a <__udivmodsi4_ep>

00006570 <__udivmodsi4_loop>:
    6570:	aa 1f       	adc	r26, r26
    6572:	bb 1f       	adc	r27, r27
    6574:	ee 1f       	adc	r30, r30
    6576:	ff 1f       	adc	r31, r31
    6578:	a2 17       	cp	r26, r18
    657a:	b3 07       	cpc	r27, r19
    657c:	e4 07       	cpc	r30, r20
    657e:	f5 07       	cpc	r31, r21
    6580:	20 f0       	brcs	.+8      	; 0x658a <__udivmodsi4_ep>
    6582:	a2 1b       	sub	r26, r18
    6584:	b3 0b       	sbc	r27, r19
    6586:	e4 0b       	sbc	r30, r20
    6588:	f5 0b       	sbc	r31, r21

0000658a <__udivmodsi4_ep>:
    658a:	66 1f       	adc	r22, r22
    658c:	77 1f       	adc	r23, r23
    658e:	88 1f       	adc	r24, r24
    6590:	99 1f       	adc	r25, r25
    6592:	1a 94       	dec	r1
    6594:	69 f7       	brne	.-38     	; 0x6570 <__udivmodsi4_loop>
    6596:	60 95       	com	r22
    6598:	70 95       	com	r23
    659a:	80 95       	com	r24
    659c:	90 95       	com	r25
    659e:	9b 01       	movw	r18, r22
    65a0:	ac 01       	movw	r20, r24
    65a2:	bd 01       	movw	r22, r26
    65a4:	cf 01       	movw	r24, r30
    65a6:	08 95       	ret

000065a8 <__prologue_saves__>:
    65a8:	2f 92       	push	r2
    65aa:	3f 92       	push	r3
    65ac:	4f 92       	push	r4
    65ae:	5f 92       	push	r5
    65b0:	6f 92       	push	r6
    65b2:	7f 92       	push	r7
    65b4:	8f 92       	push	r8
    65b6:	9f 92       	push	r9
    65b8:	af 92       	push	r10
    65ba:	bf 92       	push	r11
    65bc:	cf 92       	push	r12
    65be:	df 92       	push	r13
    65c0:	ef 92       	push	r14
    65c2:	ff 92       	push	r15
    65c4:	0f 93       	push	r16
    65c6:	1f 93       	push	r17
    65c8:	cf 93       	push	r28
    65ca:	df 93       	push	r29
    65cc:	cd b7       	in	r28, 0x3d	; 61
    65ce:	de b7       	in	r29, 0x3e	; 62
    65d0:	ca 1b       	sub	r28, r26
    65d2:	db 0b       	sbc	r29, r27
    65d4:	0f b6       	in	r0, 0x3f	; 63
    65d6:	f8 94       	cli
    65d8:	de bf       	out	0x3e, r29	; 62
    65da:	0f be       	out	0x3f, r0	; 63
    65dc:	cd bf       	out	0x3d, r28	; 61
    65de:	09 94       	ijmp

000065e0 <__epilogue_restores__>:
    65e0:	2a 88       	ldd	r2, Y+18	; 0x12
    65e2:	39 88       	ldd	r3, Y+17	; 0x11
    65e4:	48 88       	ldd	r4, Y+16	; 0x10
    65e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    65e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    65ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    65ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    65ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    65f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    65f2:	b9 84       	ldd	r11, Y+9	; 0x09
    65f4:	c8 84       	ldd	r12, Y+8	; 0x08
    65f6:	df 80       	ldd	r13, Y+7	; 0x07
    65f8:	ee 80       	ldd	r14, Y+6	; 0x06
    65fa:	fd 80       	ldd	r15, Y+5	; 0x05
    65fc:	0c 81       	ldd	r16, Y+4	; 0x04
    65fe:	1b 81       	ldd	r17, Y+3	; 0x03
    6600:	aa 81       	ldd	r26, Y+2	; 0x02
    6602:	b9 81       	ldd	r27, Y+1	; 0x01
    6604:	ce 0f       	add	r28, r30
    6606:	d1 1d       	adc	r29, r1
    6608:	0f b6       	in	r0, 0x3f	; 63
    660a:	f8 94       	cli
    660c:	de bf       	out	0x3e, r29	; 62
    660e:	0f be       	out	0x3f, r0	; 63
    6610:	cd bf       	out	0x3d, r28	; 61
    6612:	ed 01       	movw	r28, r26
    6614:	08 95       	ret

00006616 <_exit>:
    6616:	f8 94       	cli

00006618 <__stop_program>:
    6618:	ff cf       	rjmp	.-2      	; 0x6618 <__stop_program>
